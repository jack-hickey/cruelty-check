(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Auxilium"] = factory();
	else
		root["Auxilium"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/highlight.min.js":
/*!******************************!*\
  !*** ./src/highlight.min.js ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hljs: () => (/* binding */ hljs)
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
/*!
  Highlight.js v11.10.0 (git: 366a8bd012)
  (c) 2006-2024 Josh Goebel <hello@joshgoebel.com> and other contributors
  License: BSD-3-Clause
 */
var hljs=function(){"use strict";function e(t){
return t instanceof Map?t.clear=t.delete=t.set=()=>{
throw Error("map is read-only")}:t instanceof Set&&(t.add=t.clear=t.delete=()=>{
throw Error("set is read-only")
}),Object.freeze(t),Object.getOwnPropertyNames(t).forEach((n=>{
const i=t[n],s=typeof i;"object"!==s&&"function"!==s||Object.isFrozen(i)||e(i)
})),t}class t{constructor(e){
void 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}
ignoreMatch(){this.isMatchIgnored=!0}}function n(e){
return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")
}function i(e,...t){const n=Object.create(null);for(const t in e)n[t]=e[t]
;return t.forEach((e=>{for(const t in e)n[t]=e[t]})),n}const s=e=>!!e.scope
;class o{constructor(e,t){
this.buffer="",this.classPrefix=t.classPrefix,e.walk(this)}addText(e){
this.buffer+=n(e)}openNode(e){if(!s(e))return;const t=((e,{prefix:t})=>{
if(e.startsWith("language:"))return e.replace("language:","language-")
;if(e.includes(".")){const n=e.split(".")
;return[`${t}${n.shift()}`,...n.map(((e,t)=>`${e}${"_".repeat(t+1)}`))].join(" ")
}return`${t}${e}`})(e.scope,{prefix:this.classPrefix});this.span(t)}
closeNode(e){s(e)&&(this.buffer+="</span>")}value(){return this.buffer}span(e){
this.buffer+=`<span class="${e}">`}}const r=(e={})=>{const t={children:[]}
;return Object.assign(t,e),t};class a{constructor(){
this.rootNode=r(),this.stack=[this.rootNode]}get top(){
return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){
this.top.children.push(e)}openNode(e){const t=r({scope:e})
;this.add(t),this.stack.push(t)}closeNode(){
if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){
for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}
walk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,t){
return"string"==typeof t?e.addText(t):t.children&&(e.openNode(t),
t.children.forEach((t=>this._walk(e,t))),e.closeNode(t)),e}static _collapse(e){
"string"!=typeof e&&e.children&&(e.children.every((e=>"string"==typeof e))?e.children=[e.children.join("")]:e.children.forEach((e=>{
a._collapse(e)})))}}class c extends a{constructor(e){super(),this.options=e}
addText(e){""!==e&&this.add(e)}startScope(e){this.openNode(e)}endScope(){
this.closeNode()}__addSublanguage(e,t){const n=e.root
;t&&(n.scope="language:"+t),this.add(n)}toHTML(){
return new o(this,this.options).value()}finalize(){
return this.closeAllNodes(),!0}}function l(e){
return e?"string"==typeof e?e:e.source:null}function g(e){return h("(?=",e,")")}
function u(e){return h("(?:",e,")*")}function d(e){return h("(?:",e,")?")}
function h(...e){return e.map((e=>l(e))).join("")}function f(...e){const t=(e=>{
const t=e[e.length-1]
;return"object"==typeof t&&t.constructor===Object?(e.splice(e.length-1,1),t):{}
})(e);return"("+(t.capture?"":"?:")+e.map((e=>l(e))).join("|")+")"}
function p(e){return RegExp(e.toString()+"|").exec("").length-1}
const b=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./
;function m(e,{joinWith:t}){let n=0;return e.map((e=>{n+=1;const t=n
;let i=l(e),s="";for(;i.length>0;){const e=b.exec(i);if(!e){s+=i;break}
s+=i.substring(0,e.index),
i=i.substring(e.index+e[0].length),"\\"===e[0][0]&&e[1]?s+="\\"+(Number(e[1])+t):(s+=e[0],
"("===e[0]&&n++)}return s})).map((e=>`(${e})`)).join(t)}
const E="[a-zA-Z]\\w*",x="[a-zA-Z_]\\w*",w="\\b\\d+(\\.\\d+)?",y="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",_="\\b(0b[01]+)",O={
begin:"\\\\[\\s\\S]",relevance:0},v={scope:"string",begin:"'",end:"'",
illegal:"\\n",contains:[O]},k={scope:"string",begin:'"',end:'"',illegal:"\\n",
contains:[O]},N=(e,t,n={})=>{const s=i({scope:"comment",begin:e,end:t,
contains:[]},n);s.contains.push({scope:"doctag",
begin:"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
end:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0})
;const o=f("I","a","is","so","us","to","at","if","in","it","on",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/)
;return s.contains.push({begin:h(/[ ]+/,"(",o,/[.]?[:]?([.][ ]|[ ])/,"){3}")}),s
},S=N("//","$"),M=N("/\\*","\\*/"),R=N("#","$");var j=Object.freeze({
__proto__:null,APOS_STRING_MODE:v,BACKSLASH_ESCAPE:O,BINARY_NUMBER_MODE:{
scope:"number",begin:_,relevance:0},BINARY_NUMBER_RE:_,COMMENT:N,
C_BLOCK_COMMENT_MODE:M,C_LINE_COMMENT_MODE:S,C_NUMBER_MODE:{scope:"number",
begin:y,relevance:0},C_NUMBER_RE:y,END_SAME_AS_BEGIN:e=>Object.assign(e,{
"on:begin":(e,t)=>{t.data._beginMatch=e[1]},"on:end":(e,t)=>{
t.data._beginMatch!==e[1]&&t.ignoreMatch()}}),HASH_COMMENT_MODE:R,IDENT_RE:E,
MATCH_NOTHING_RE:/\b\B/,METHOD_GUARD:{begin:"\\.\\s*"+x,relevance:0},
NUMBER_MODE:{scope:"number",begin:w,relevance:0},NUMBER_RE:w,
PHRASAL_WORDS_MODE:{
begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
},QUOTE_STRING_MODE:k,REGEXP_MODE:{scope:"regexp",begin:/\/(?=[^/\n]*\/)/,
end:/\/[gimuy]*/,contains:[O,{begin:/\[/,end:/\]/,relevance:0,contains:[O]}]},
RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",
SHEBANG:(e={})=>{const t=/^#![ ]*\//
;return e.binary&&(e.begin=h(t,/.*\b/,e.binary,/\b.*/)),i({scope:"meta",begin:t,
end:/$/,relevance:0,"on:begin":(e,t)=>{0!==e.index&&t.ignoreMatch()}},e)},
TITLE_MODE:{scope:"title",begin:E,relevance:0},UNDERSCORE_IDENT_RE:x,
UNDERSCORE_TITLE_MODE:{scope:"title",begin:x,relevance:0}});function A(e,t){
"."===e.input[e.index-1]&&t.ignoreMatch()}function I(e,t){
void 0!==e.className&&(e.scope=e.className,delete e.className)}function T(e,t){
t&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",
e.__beforeBegin=A,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,
void 0===e.relevance&&(e.relevance=0))}function L(e,t){
Array.isArray(e.illegal)&&(e.illegal=f(...e.illegal))}function B(e,t){
if(e.match){
if(e.begin||e.end)throw Error("begin & end are not supported with match")
;e.begin=e.match,delete e.match}}function P(e,t){
void 0===e.relevance&&(e.relevance=1)}const D=(e,t)=>{if(!e.beforeMatch)return
;if(e.starts)throw Error("beforeMatch cannot be used with starts")
;const n=Object.assign({},e);Object.keys(e).forEach((t=>{delete e[t]
})),e.keywords=n.keywords,e.begin=h(n.beforeMatch,g(n.begin)),e.starts={
relevance:0,contains:[Object.assign(n,{endsParent:!0})]
},e.relevance=0,delete n.beforeMatch
},H=["of","and","for","in","not","or","if","then","parent","list","value"],C="keyword"
;function $(e,t,n=C){const i=Object.create(null)
;return"string"==typeof e?s(n,e.split(" ")):Array.isArray(e)?s(n,e):Object.keys(e).forEach((n=>{
Object.assign(i,$(e[n],t,n))})),i;function s(e,n){
t&&(n=n.map((e=>e.toLowerCase()))),n.forEach((t=>{const n=t.split("|")
;i[n[0]]=[e,U(n[0],n[1])]}))}}function U(e,t){
return t?Number(t):(e=>H.includes(e.toLowerCase()))(e)?0:1}const z={},W=e=>{
console.error(e)},X=(e,...t)=>{console.log("WARN: "+e,...t)},G=(e,t)=>{
z[`${e}/${t}`]||(console.log(`Deprecated as of ${e}. ${t}`),z[`${e}/${t}`]=!0)
},K=Error();function F(e,t,{key:n}){let i=0;const s=e[n],o={},r={}
;for(let e=1;e<=t.length;e++)r[e+i]=s[e],o[e+i]=!0,i+=p(t[e-1])
;e[n]=r,e[n]._emit=o,e[n]._multi=!0}function Z(e){(e=>{
e.scope&&"object"==typeof e.scope&&null!==e.scope&&(e.beginScope=e.scope,
delete e.scope)})(e),"string"==typeof e.beginScope&&(e.beginScope={
_wrap:e.beginScope}),"string"==typeof e.endScope&&(e.endScope={_wrap:e.endScope
}),(e=>{if(Array.isArray(e.begin)){
if(e.skip||e.excludeBegin||e.returnBegin)throw W("skip, excludeBegin, returnBegin not compatible with beginScope: {}"),
K
;if("object"!=typeof e.beginScope||null===e.beginScope)throw W("beginScope must be object"),
K;F(e,e.begin,{key:"beginScope"}),e.begin=m(e.begin,{joinWith:""})}})(e),(e=>{
if(Array.isArray(e.end)){
if(e.skip||e.excludeEnd||e.returnEnd)throw W("skip, excludeEnd, returnEnd not compatible with endScope: {}"),
K
;if("object"!=typeof e.endScope||null===e.endScope)throw W("endScope must be object"),
K;F(e,e.end,{key:"endScope"}),e.end=m(e.end,{joinWith:""})}})(e)}function V(e){
function t(t,n){
return RegExp(l(t),"m"+(e.case_insensitive?"i":"")+(e.unicodeRegex?"u":"")+(n?"g":""))
}class n{constructor(){
this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}
addRule(e,t){
t.position=this.position++,this.matchIndexes[this.matchAt]=t,this.regexes.push([t,e]),
this.matchAt+=p(e)+1}compile(){0===this.regexes.length&&(this.exec=()=>null)
;const e=this.regexes.map((e=>e[1]));this.matcherRe=t(m(e,{joinWith:"|"
}),!0),this.lastIndex=0}exec(e){this.matcherRe.lastIndex=this.lastIndex
;const t=this.matcherRe.exec(e);if(!t)return null
;const n=t.findIndex(((e,t)=>t>0&&void 0!==e)),i=this.matchIndexes[n]
;return t.splice(0,n),Object.assign(t,i)}}class s{constructor(){
this.rules=[],this.multiRegexes=[],
this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(e){
if(this.multiRegexes[e])return this.multiRegexes[e];const t=new n
;return this.rules.slice(e).forEach((([e,n])=>t.addRule(e,n))),
t.compile(),this.multiRegexes[e]=t,t}resumingScanAtSamePosition(){
return 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(e,t){
this.rules.push([e,t]),"begin"===t.type&&this.count++}exec(e){
const t=this.getMatcher(this.regexIndex);t.lastIndex=this.lastIndex
;let n=t.exec(e)
;if(this.resumingScanAtSamePosition())if(n&&n.index===this.lastIndex);else{
const t=this.getMatcher(0);t.lastIndex=this.lastIndex+1,n=t.exec(e)}
return n&&(this.regexIndex+=n.position+1,
this.regexIndex===this.count&&this.considerAll()),n}}
if(e.compilerExtensions||(e.compilerExtensions=[]),
e.contains&&e.contains.includes("self"))throw Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.")
;return e.classNameAliases=i(e.classNameAliases||{}),function n(o,r){const a=o
;if(o.isCompiled)return a
;[I,B,Z,D].forEach((e=>e(o,r))),e.compilerExtensions.forEach((e=>e(o,r))),
o.__beforeBegin=null,[T,L,P].forEach((e=>e(o,r))),o.isCompiled=!0;let c=null
;return"object"==typeof o.keywords&&o.keywords.$pattern&&(o.keywords=Object.assign({},o.keywords),
c=o.keywords.$pattern,
delete o.keywords.$pattern),c=c||/\w+/,o.keywords&&(o.keywords=$(o.keywords,e.case_insensitive)),
a.keywordPatternRe=t(c,!0),
r&&(o.begin||(o.begin=/\B|\b/),a.beginRe=t(a.begin),o.end||o.endsWithParent||(o.end=/\B|\b/),
o.end&&(a.endRe=t(a.end)),
a.terminatorEnd=l(a.end)||"",o.endsWithParent&&r.terminatorEnd&&(a.terminatorEnd+=(o.end?"|":"")+r.terminatorEnd)),
o.illegal&&(a.illegalRe=t(o.illegal)),
o.contains||(o.contains=[]),o.contains=[].concat(...o.contains.map((e=>(e=>(e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((t=>i(e,{
variants:null},t)))),e.cachedVariants?e.cachedVariants:q(e)?i(e,{
starts:e.starts?i(e.starts):null
}):Object.isFrozen(e)?i(e):e))("self"===e?o:e)))),o.contains.forEach((e=>{n(e,a)
})),o.starts&&n(o.starts,r),a.matcher=(e=>{const t=new s
;return e.contains.forEach((e=>t.addRule(e.begin,{rule:e,type:"begin"
}))),e.terminatorEnd&&t.addRule(e.terminatorEnd,{type:"end"
}),e.illegal&&t.addRule(e.illegal,{type:"illegal"}),t})(a),a}(e)}function q(e){
return!!e&&(e.endsWithParent||q(e.starts))}class J extends Error{
constructor(e,t){super(e),this.name="HTMLInjectionError",this.html=t}}
const Y=n,Q=i,ee=Symbol("nomatch"),te=n=>{
const i=Object.create(null),s=Object.create(null),o=[];let r=!0
;const a="Could not find the language '{}', did you forget to load/include a language module?",l={
disableAutodetect:!0,name:"Plain text",contains:[]};let p={
ignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,
languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",
cssSelector:"pre code",languages:null,__emitter:c};function b(e){
return p.noHighlightRe.test(e)}function m(e,t,n){let i="",s=""
;"object"==typeof t?(i=e,
n=t.ignoreIllegals,s=t.language):(G("10.7.0","highlight(lang, code, ...args) has been deprecated."),
G("10.7.0","Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"),
s=e,i=t),void 0===n&&(n=!0);const o={code:i,language:s};N("before:highlight",o)
;const r=o.result?o.result:E(o.language,o.code,n)
;return r.code=o.code,N("after:highlight",r),r}function E(e,n,s,o){
const c=Object.create(null);function l(){if(!N.keywords)return void M.addText(R)
;let e=0;N.keywordPatternRe.lastIndex=0;let t=N.keywordPatternRe.exec(R),n=""
;for(;t;){n+=R.substring(e,t.index)
;const s=_.case_insensitive?t[0].toLowerCase():t[0],o=(i=s,N.keywords[i]);if(o){
const[e,i]=o
;if(M.addText(n),n="",c[s]=(c[s]||0)+1,c[s]<=7&&(j+=i),e.startsWith("_"))n+=t[0];else{
const n=_.classNameAliases[e]||e;u(t[0],n)}}else n+=t[0]
;e=N.keywordPatternRe.lastIndex,t=N.keywordPatternRe.exec(R)}var i
;n+=R.substring(e),M.addText(n)}function g(){null!=N.subLanguage?(()=>{
if(""===R)return;let e=null;if("string"==typeof N.subLanguage){
if(!i[N.subLanguage])return void M.addText(R)
;e=E(N.subLanguage,R,!0,S[N.subLanguage]),S[N.subLanguage]=e._top
}else e=x(R,N.subLanguage.length?N.subLanguage:null)
;N.relevance>0&&(j+=e.relevance),M.__addSublanguage(e._emitter,e.language)
})():l(),R=""}function u(e,t){
""!==e&&(M.startScope(t),M.addText(e),M.endScope())}function d(e,t){let n=1
;const i=t.length-1;for(;n<=i;){if(!e._emit[n]){n++;continue}
const i=_.classNameAliases[e[n]]||e[n],s=t[n];i?u(s,i):(R=s,l(),R=""),n++}}
function h(e,t){
return e.scope&&"string"==typeof e.scope&&M.openNode(_.classNameAliases[e.scope]||e.scope),
e.beginScope&&(e.beginScope._wrap?(u(R,_.classNameAliases[e.beginScope._wrap]||e.beginScope._wrap),
R=""):e.beginScope._multi&&(d(e.beginScope,t),R="")),N=Object.create(e,{parent:{
value:N}}),N}function f(e,n,i){let s=((e,t)=>{const n=e&&e.exec(t)
;return n&&0===n.index})(e.endRe,i);if(s){if(e["on:end"]){const i=new t(e)
;e["on:end"](n,i),i.isMatchIgnored&&(s=!1)}if(s){
for(;e.endsParent&&e.parent;)e=e.parent;return e}}
if(e.endsWithParent)return f(e.parent,n,i)}function b(e){
return 0===N.matcher.regexIndex?(R+=e[0],1):(T=!0,0)}function m(e){
const t=e[0],i=n.substring(e.index),s=f(N,e,i);if(!s)return ee;const o=N
;N.endScope&&N.endScope._wrap?(g(),
u(t,N.endScope._wrap)):N.endScope&&N.endScope._multi?(g(),
d(N.endScope,e)):o.skip?R+=t:(o.returnEnd||o.excludeEnd||(R+=t),
g(),o.excludeEnd&&(R=t));do{
N.scope&&M.closeNode(),N.skip||N.subLanguage||(j+=N.relevance),N=N.parent
}while(N!==s.parent);return s.starts&&h(s.starts,e),o.returnEnd?0:t.length}
let w={};function y(i,o){const a=o&&o[0];if(R+=i,null==a)return g(),0
;if("begin"===w.type&&"end"===o.type&&w.index===o.index&&""===a){
if(R+=n.slice(o.index,o.index+1),!r){const t=Error(`0 width match regex (${e})`)
;throw t.languageName=e,t.badRule=w.rule,t}return 1}
if(w=o,"begin"===o.type)return(e=>{
const n=e[0],i=e.rule,s=new t(i),o=[i.__beforeBegin,i["on:begin"]]
;for(const t of o)if(t&&(t(e,s),s.isMatchIgnored))return b(n)
;return i.skip?R+=n:(i.excludeBegin&&(R+=n),
g(),i.returnBegin||i.excludeBegin||(R=n)),h(i,e),i.returnBegin?0:n.length})(o)
;if("illegal"===o.type&&!s){
const e=Error('Illegal lexeme "'+a+'" for mode "'+(N.scope||"<unnamed>")+'"')
;throw e.mode=N,e}if("end"===o.type){const e=m(o);if(e!==ee)return e}
if("illegal"===o.type&&""===a)return 1
;if(I>1e5&&I>3*o.index)throw Error("potential infinite loop, way more iterations than matches")
;return R+=a,a.length}const _=O(e)
;if(!_)throw W(a.replace("{}",e)),Error('Unknown language: "'+e+'"')
;const v=V(_);let k="",N=o||v;const S={},M=new p.__emitter(p);(()=>{const e=[]
;for(let t=N;t!==_;t=t.parent)t.scope&&e.unshift(t.scope)
;e.forEach((e=>M.openNode(e)))})();let R="",j=0,A=0,I=0,T=!1;try{
if(_.__emitTokens)_.__emitTokens(n,M);else{for(N.matcher.considerAll();;){
I++,T?T=!1:N.matcher.considerAll(),N.matcher.lastIndex=A
;const e=N.matcher.exec(n);if(!e)break;const t=y(n.substring(A,e.index),e)
;A=e.index+t}y(n.substring(A))}return M.finalize(),k=M.toHTML(),{language:e,
value:k,relevance:j,illegal:!1,_emitter:M,_top:N}}catch(t){
if(t.message&&t.message.includes("Illegal"))return{language:e,value:Y(n),
illegal:!0,relevance:0,_illegalBy:{message:t.message,index:A,
context:n.slice(A-100,A+100),mode:t.mode,resultSoFar:k},_emitter:M};if(r)return{
language:e,value:Y(n),illegal:!1,relevance:0,errorRaised:t,_emitter:M,_top:N}
;throw t}}function x(e,t){t=t||p.languages||Object.keys(i);const n=(e=>{
const t={value:Y(e),illegal:!1,relevance:0,_top:l,_emitter:new p.__emitter(p)}
;return t._emitter.addText(e),t})(e),s=t.filter(O).filter(k).map((t=>E(t,e,!1)))
;s.unshift(n);const o=s.sort(((e,t)=>{
if(e.relevance!==t.relevance)return t.relevance-e.relevance
;if(e.language&&t.language){if(O(e.language).supersetOf===t.language)return 1
;if(O(t.language).supersetOf===e.language)return-1}return 0})),[r,a]=o,c=r
;return c.secondBest=a,c}function w(e){let t=null;const n=(e=>{
let t=e.className+" ";t+=e.parentNode?e.parentNode.className:""
;const n=p.languageDetectRe.exec(t);if(n){const t=O(n[1])
;return t||(X(a.replace("{}",n[1])),
X("Falling back to no-highlight mode for this block.",e)),t?n[1]:"no-highlight"}
return t.split(/\s+/).find((e=>b(e)||O(e)))})(e);if(b(n))return
;if(N("before:highlightElement",{el:e,language:n
}),e.dataset.highlighted)return void console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.",e)
;if(e.children.length>0&&(p.ignoreUnescapedHTML||(console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."),
console.warn("https://github.com/highlightjs/highlight.js/wiki/security"),
console.warn("The element with unescaped HTML:"),
console.warn(e)),p.throwUnescapedHTML))throw new J("One of your code blocks includes unescaped HTML.",e.innerHTML)
;t=e;const i=t.textContent,o=n?m(i,{language:n,ignoreIllegals:!0}):x(i)
;e.innerHTML=o.value,e.dataset.highlighted="yes",((e,t,n)=>{const i=t&&s[t]||n
;e.classList.add("hljs"),e.classList.add("language-"+i)
})(e,n,o.language),e.result={language:o.language,re:o.relevance,
relevance:o.relevance},o.secondBest&&(e.secondBest={
language:o.secondBest.language,relevance:o.secondBest.relevance
}),N("after:highlightElement",{el:e,result:o,text:i})}let y=!1;function _(){
"loading"!==document.readyState?document.querySelectorAll(p.cssSelector).forEach(w):y=!0
}function O(e){return e=(e||"").toLowerCase(),i[e]||i[s[e]]}
function v(e,{languageName:t}){"string"==typeof e&&(e=[e]),e.forEach((e=>{
s[e.toLowerCase()]=t}))}function k(e){const t=O(e)
;return t&&!t.disableAutodetect}function N(e,t){const n=e;o.forEach((e=>{
e[n]&&e[n](t)}))}
"undefined"!=typeof window&&window.addEventListener&&window.addEventListener("DOMContentLoaded",(()=>{
y&&_()}),!1),Object.assign(n,{highlight:m,highlightAuto:x,highlightAll:_,
highlightElement:w,
highlightBlock:e=>(G("10.7.0","highlightBlock will be removed entirely in v12.0"),
G("10.7.0","Please use highlightElement now."),w(e)),configure:e=>{p=Q(p,e)},
initHighlighting:()=>{
_(),G("10.6.0","initHighlighting() deprecated.  Use highlightAll() now.")},
initHighlightingOnLoad:()=>{
_(),G("10.6.0","initHighlightingOnLoad() deprecated.  Use highlightAll() now.")
},registerLanguage:(e,t)=>{let s=null;try{s=t(n)}catch(t){
if(W("Language definition for '{}' could not be registered.".replace("{}",e)),
!r)throw t;W(t),s=l}
s.name||(s.name=e),i[e]=s,s.rawDefinition=t.bind(null,n),s.aliases&&v(s.aliases,{
languageName:e})},unregisterLanguage:e=>{delete i[e]
;for(const t of Object.keys(s))s[t]===e&&delete s[t]},
listLanguages:()=>Object.keys(i),getLanguage:O,registerAliases:v,
autoDetection:k,inherit:Q,addPlugin:e=>{(e=>{
e["before:highlightBlock"]&&!e["before:highlightElement"]&&(e["before:highlightElement"]=t=>{
e["before:highlightBlock"](Object.assign({block:t.el},t))
}),e["after:highlightBlock"]&&!e["after:highlightElement"]&&(e["after:highlightElement"]=t=>{
e["after:highlightBlock"](Object.assign({block:t.el},t))})})(e),o.push(e)},
removePlugin:e=>{const t=o.indexOf(e);-1!==t&&o.splice(t,1)}}),n.debugMode=()=>{
r=!1},n.safeMode=()=>{r=!0},n.versionString="11.10.0",n.regex={concat:h,
lookahead:g,either:f,optional:d,anyNumberOfTimes:u}
;for(const t in j)"object"==typeof j[t]&&e(j[t]);return Object.assign(n,j),n
},ne=te({});return ne.newInstance=()=>te({}),ne}()
;"object"==typeof exports&&"undefined"!="object"&&(module.exports=hljs);/*! `bash` grammar compiled for Highlight.js 11.10.0 */
(()=>{var e=(()=>{"use strict";return e=>{const s=e.regex,t={},n={begin:/\$\{/,
end:/\}/,contains:["self",{begin:/:-/,contains:[t]}]};Object.assign(t,{
className:"variable",variants:[{
begin:s.concat(/\$[\w\d#@][\w\d_]*/,"(?![\\w\\d])(?![$])")},n]});const a={
className:"subst",begin:/\$\(/,end:/\)/,contains:[e.BACKSLASH_ESCAPE]
},i=e.inherit(e.COMMENT(),{match:[/(^|\s)/,/#.*$/],scope:{2:"comment"}}),c={
begin:/<<-?\s*(?=\w+)/,starts:{contains:[e.END_SAME_AS_BEGIN({begin:/(\w+)/,
end:/(\w+)/,className:"string"})]}},o={className:"string",begin:/"/,end:/"/,
contains:[e.BACKSLASH_ESCAPE,t,a]};a.contains.push(o);const r={begin:/\$?\(\(/,
end:/\)\)/,contains:[{begin:/\d+#[0-9a-f]+/,className:"number"},e.NUMBER_MODE,t]
},l=e.SHEBANG({binary:"(fish|bash|zsh|sh|csh|ksh|tcsh|dash|scsh)",relevance:10
}),m={className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,
contains:[e.inherit(e.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0};return{
name:"Bash",aliases:["sh","zsh"],keywords:{$pattern:/\b[a-z][a-z0-9._-]+\b/,
keyword:["if","then","else","elif","fi","for","while","until","in","do","done","case","esac","function","select"],
literal:["true","false"],
built_in:["break","cd","continue","eval","exec","exit","export","getopts","hash","pwd","readonly","return","shift","test","times","trap","umask","unset","alias","bind","builtin","caller","command","declare","echo","enable","help","let","local","logout","mapfile","printf","read","readarray","source","sudo","type","typeset","ulimit","unalias","set","shopt","autoload","bg","bindkey","bye","cap","chdir","clone","comparguments","compcall","compctl","compdescribe","compfiles","compgroups","compquote","comptags","comptry","compvalues","dirs","disable","disown","echotc","echoti","emulate","fc","fg","float","functions","getcap","getln","history","integer","jobs","kill","limit","log","noglob","popd","print","pushd","pushln","rehash","sched","setcap","setopt","stat","suspend","ttyctl","unfunction","unhash","unlimit","unsetopt","vared","wait","whence","where","which","zcompile","zformat","zftp","zle","zmodload","zparseopts","zprof","zpty","zregexparse","zsocket","zstyle","ztcp","chcon","chgrp","chown","chmod","cp","dd","df","dir","dircolors","ln","ls","mkdir","mkfifo","mknod","mktemp","mv","realpath","rm","rmdir","shred","sync","touch","truncate","vdir","b2sum","base32","base64","cat","cksum","comm","csplit","cut","expand","fmt","fold","head","join","md5sum","nl","numfmt","od","paste","ptx","pr","sha1sum","sha224sum","sha256sum","sha384sum","sha512sum","shuf","sort","split","sum","tac","tail","tr","tsort","unexpand","uniq","wc","arch","basename","chroot","date","dirname","du","echo","env","expr","factor","groups","hostid","id","link","logname","nice","nohup","nproc","pathchk","pinky","printenv","printf","pwd","readlink","runcon","seq","sleep","stat","stdbuf","stty","tee","test","timeout","tty","uname","unlink","uptime","users","who","whoami","yes"]
},contains:[l,e.SHEBANG(),m,r,i,c,{match:/(\/[a-z._-]+)+/},o,{match:/\\"/},{
className:"string",begin:/'/,end:/'/},{match:/\\'/},t]}}})()
;hljs.registerLanguage("bash",e)})();/*! `csharp` grammar compiled for Highlight.js 11.10.0 */
(()=>{var e=(()=>{"use strict";return e=>{const n={
keyword:["abstract","as","base","break","case","catch","class","const","continue","do","else","event","explicit","extern","finally","fixed","for","foreach","goto","if","implicit","in","interface","internal","is","lock","namespace","new","operator","out","override","params","private","protected","public","readonly","record","ref","return","scoped","sealed","sizeof","stackalloc","static","struct","switch","this","throw","try","typeof","unchecked","unsafe","using","virtual","void","volatile","while"].concat(["add","alias","and","ascending","async","await","by","descending","equals","from","get","global","group","init","into","join","let","nameof","not","notnull","on","or","orderby","partial","remove","select","set","unmanaged","value|0","var","when","where","with","yield"]),
built_in:["bool","byte","char","decimal","delegate","double","dynamic","enum","float","int","long","nint","nuint","object","sbyte","short","string","ulong","uint","ushort"],
literal:["default","false","null","true"]},a=e.inherit(e.TITLE_MODE,{
begin:"[a-zA-Z](\\.?\\w)*"}),i={className:"number",variants:[{
begin:"\\b(0b[01']+)"},{
begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{
begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"
}],relevance:0},s={className:"string",begin:'@"',end:'"',contains:[{begin:'""'}]
},t=e.inherit(s,{illegal:/\n/}),r={className:"subst",begin:/\{/,end:/\}/,
keywords:n},l=e.inherit(r,{illegal:/\n/}),c={className:"string",begin:/\$"/,
end:'"',illegal:/\n/,contains:[{begin:/\{\{/},{begin:/\}\}/
},e.BACKSLASH_ESCAPE,l]},o={className:"string",begin:/\$@"/,end:'"',contains:[{
begin:/\{\{/},{begin:/\}\}/},{begin:'""'},r]},d=e.inherit(o,{illegal:/\n/,
contains:[{begin:/\{\{/},{begin:/\}\}/},{begin:'""'},l]})
;r.contains=[o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.C_BLOCK_COMMENT_MODE],
l.contains=[d,c,t,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.inherit(e.C_BLOCK_COMMENT_MODE,{
illegal:/\n/})];const g={variants:[{className:"string",
begin:/"""("*)(?!")(.|\n)*?"""\1/,relevance:1
},o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},E={begin:"<",end:">",
contains:[{beginKeywords:"in out"},a]
},_=e.IDENT_RE+"(<"+e.IDENT_RE+"(\\s*,\\s*"+e.IDENT_RE+")*>)?(\\[\\])?",b={
begin:"@"+e.IDENT_RE,relevance:0};return{name:"C#",aliases:["cs","c#"],
keywords:n,illegal:/::/,contains:[e.COMMENT("///","$",{returnBegin:!0,
contains:[{className:"doctag",variants:[{begin:"///",relevance:0},{
begin:"\x3c!--|--\x3e"},{begin:"</?",end:">"}]}]
}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"meta",begin:"#",
end:"$",keywords:{
keyword:"if else elif endif define undef warning error line region endregion pragma checksum"
}},g,i,{beginKeywords:"class interface",relevance:0,end:/[{;=]/,
illegal:/[^\s:,]/,contains:[{beginKeywords:"where class"
},a,E,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"namespace",
relevance:0,end:/[{;=]/,illegal:/[^\s:]/,
contains:[a,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{
beginKeywords:"record",relevance:0,end:/[{;=]/,illegal:/[^\s:]/,
contains:[a,E,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"meta",
begin:"^\\s*\\[(?=[\\w])",excludeBegin:!0,end:"\\]",excludeEnd:!0,contains:[{
className:"string",begin:/"/,end:/"/}]},{
beginKeywords:"new return throw await else",relevance:0},{className:"function",
begin:"("+_+"\\s+)+"+e.IDENT_RE+"\\s*(<[^=]+>\\s*)?\\(",returnBegin:!0,
end:/\s*[{;=]/,excludeEnd:!0,keywords:n,contains:[{
beginKeywords:"public private protected static internal protected abstract async extern override unsafe virtual new sealed partial",
relevance:0},{begin:e.IDENT_RE+"\\s*(<[^=]+>\\s*)?\\(",returnBegin:!0,
contains:[e.TITLE_MODE,E],relevance:0},{match:/\(\)/},{className:"params",
begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,relevance:0,
contains:[g,i,e.C_BLOCK_COMMENT_MODE]
},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},b]}}})()
;hljs.registerLanguage("csharp",e)})();/*! `css` grammar compiled for Highlight.js 11.10.0 */
(()=>{var e=(()=>{"use strict"
;const e=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","optgroup","option","p","picture","q","quote","samp","section","select","source","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video","defs","g","marker","mask","pattern","svg","switch","symbol","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feFlood","feGaussianBlur","feImage","feMerge","feMorphology","feOffset","feSpecularLighting","feTile","feTurbulence","linearGradient","radialGradient","stop","circle","ellipse","image","line","path","polygon","polyline","rect","text","use","textPath","tspan","foreignObject","clipPath"],r=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"].sort().reverse(),t=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"].sort().reverse(),i=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"].sort().reverse(),o=["accent-color","align-content","align-items","align-self","alignment-baseline","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","backface-visibility","background","background-attachment","background-blend-mode","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","block-size","border","border-block","border-block-color","border-block-end","border-block-end-color","border-block-end-style","border-block-end-width","border-block-start","border-block-start-color","border-block-start-style","border-block-start-width","border-block-style","border-block-width","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-inline","border-inline-color","border-inline-end","border-inline-end-color","border-inline-end-style","border-inline-end-width","border-inline-start","border-inline-start-color","border-inline-start-style","border-inline-start-width","border-inline-style","border-inline-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-end-end-radius","border-end-start-radius","border-right-color","border-right-style","border-right-width","border-spacing","border-start-end-radius","border-start-start-radius","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","cx","cy","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","color-scheme","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","dominant-baseline","empty-cells","enable-background","fill","fill-opacity","fill-rule","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","flood-color","flood-opacity","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-horizontal","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inline-size","inset","inset-block","inset-block-end","inset-block-start","inset-inline","inset-inline-end","inset-inline-start","isolation","kerning","justify-content","justify-items","justify-self","left","letter-spacing","lighting-color","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","marker","marker-end","marker-mid","marker-start","mask","margin","margin-block","margin-block-end","margin-block-start","margin-bottom","margin-inline","margin-inline-end","margin-inline-start","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-block-size","max-height","max-inline-size","max-width","min-block-size","min-height","min-inline-size","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-block","padding-block-end","padding-block-start","padding-bottom","padding-inline","padding-inline-end","padding-inline-start","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","r","resize","rest","rest-after","rest-before","right","rotate","row-gap","scale","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","scrollbar-color","scrollbar-gutter","scrollbar-width","shape-image-threshold","shape-margin","shape-outside","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","speak","speak-as","src","tab-size","table-layout","text-anchor","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip-ink","text-decoration-style","text-decoration-thickness","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-offset","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","translate","unicode-bidi","vector-effect","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","x","y","z-index"].sort().reverse()
;return n=>{const a=n.regex,l=(e=>({IMPORTANT:{scope:"meta",begin:"!important"},
BLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",
begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{
className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{
scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",
contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{
scope:"number",
begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z_][A-Za-z0-9_-]*/}
}))(n),s=[n.APOS_STRING_MODE,n.QUOTE_STRING_MODE];return{name:"CSS",
case_insensitive:!0,illegal:/[=|'\$]/,keywords:{keyframePosition:"from to"},
classNameAliases:{keyframePosition:"selector-tag"},contains:[l.BLOCK_COMMENT,{
begin:/-(webkit|moz|ms|o)-(?=[a-z])/},l.CSS_NUMBER_MODE,{
className:"selector-id",begin:/#[A-Za-z0-9_-]+/,relevance:0},{
className:"selector-class",begin:"\\.[a-zA-Z-][a-zA-Z0-9_-]*",relevance:0
},l.ATTRIBUTE_SELECTOR_MODE,{className:"selector-pseudo",variants:[{
begin:":("+t.join("|")+")"},{begin:":(:)?("+i.join("|")+")"}]},l.CSS_VARIABLE,{
className:"attribute",begin:"\\b("+o.join("|")+")\\b"},{begin:/:/,end:/[;}{]/,
contains:[l.BLOCK_COMMENT,l.HEXCOLOR,l.IMPORTANT,l.CSS_NUMBER_MODE,...s,{
begin:/(url|data-uri)\(/,end:/\)/,relevance:0,keywords:{built_in:"url data-uri"
},contains:[...s,{className:"string",begin:/[^)]/,endsWithParent:!0,
excludeEnd:!0}]},l.FUNCTION_DISPATCH]},{begin:a.lookahead(/@/),end:"[{;]",
relevance:0,illegal:/:/,contains:[{className:"keyword",begin:/@-?\w[\w]*(-\w+)*/
},{begin:/\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,keywords:{
$pattern:/[a-z-]+/,keyword:"and or not only",attribute:r.join(" ")},contains:[{
begin:/[a-z-]+(?=:)/,className:"attribute"},...s,l.CSS_NUMBER_MODE]}]},{
className:"selector-tag",begin:"\\b("+e.join("|")+")\\b"}]}}})()
;hljs.registerLanguage("css",e)})();/*! `javascript` grammar compiled for Highlight.js 11.10.0 */
(()=>{var e=(()=>{"use strict"
;const e="[A-Za-z$_][0-9A-Za-z$_]*",n=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],a=["true","false","null","undefined","NaN","Infinity"],t=["Object","Function","Boolean","Symbol","Math","Date","Number","BigInt","String","RegExp","Array","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array","Set","Map","WeakSet","WeakMap","ArrayBuffer","SharedArrayBuffer","Atomics","DataView","JSON","Promise","Generator","GeneratorFunction","AsyncFunction","Reflect","Proxy","Intl","WebAssembly"],s=["Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],r=["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],c=["arguments","this","super","console","window","document","localStorage","sessionStorage","module","global"],i=[].concat(r,t,s)
;return o=>{const l=o.regex,b=e,d={begin:/<[A-Za-z0-9\\._:-]+/,
end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:(e,n)=>{
const a=e[0].length+e.index,t=e.input[a]
;if("<"===t||","===t)return void n.ignoreMatch();let s
;">"===t&&(((e,{after:n})=>{const a="</"+e[0].slice(1)
;return-1!==e.input.indexOf(a,n)})(e,{after:a})||n.ignoreMatch())
;const r=e.input.substring(a)
;((s=r.match(/^\s*=/))||(s=r.match(/^\s+extends\s+/))&&0===s.index)&&n.ignoreMatch()
}},g={$pattern:e,keyword:n,literal:a,built_in:i,"variable.language":c
},u="[0-9](_?[0-9])*",m=`\\.(${u})`,E="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",A={
className:"number",variants:[{
begin:`(\\b(${E})((${m})|\\.)?|(${m}))[eE][+-]?(${u})\\b`},{
begin:`\\b(${E})\\b((${m})\\b|\\.)?|(${m})\\b`},{
begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{
begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{
begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{
begin:"\\b0[0-7]+n?\\b"}],relevance:0},y={className:"subst",begin:"\\$\\{",
end:"\\}",keywords:g,contains:[]},h={begin:".?html`",end:"",starts:{end:"`",
returnEnd:!1,contains:[o.BACKSLASH_ESCAPE,y],subLanguage:"xml"}},N={
begin:".?css`",end:"",starts:{end:"`",returnEnd:!1,
contains:[o.BACKSLASH_ESCAPE,y],subLanguage:"css"}},_={begin:".?gql`",end:"",
starts:{end:"`",returnEnd:!1,contains:[o.BACKSLASH_ESCAPE,y],
subLanguage:"graphql"}},f={className:"string",begin:"`",end:"`",
contains:[o.BACKSLASH_ESCAPE,y]},p={className:"comment",
variants:[o.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{
begin:"(?=@[A-Za-z]+)",relevance:0,contains:[{className:"doctag",
begin:"@[A-Za-z]+"},{className:"type",begin:"\\{",end:"\\}",excludeEnd:!0,
excludeBegin:!0,relevance:0},{className:"variable",begin:b+"(?=\\s*(-)|$)",
endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]
}),o.C_BLOCK_COMMENT_MODE,o.C_LINE_COMMENT_MODE]
},v=[o.APOS_STRING_MODE,o.QUOTE_STRING_MODE,h,N,_,f,{match:/\$\d+/},A]
;y.contains=v.concat({begin:/\{/,end:/\}/,keywords:g,contains:["self"].concat(v)
});const S=[].concat(p,y.contains),w=S.concat([{begin:/(\s*)\(/,end:/\)/,
keywords:g,contains:["self"].concat(S)}]),R={className:"params",begin:/(\s*)\(/,
end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:g,contains:w},O={variants:[{
match:[/class/,/\s+/,b,/\s+/,/extends/,/\s+/,l.concat(b,"(",l.concat(/\./,b),")*")],
scope:{1:"keyword",3:"title.class",5:"keyword",7:"title.class.inherited"}},{
match:[/class/,/\s+/,b],scope:{1:"keyword",3:"title.class"}}]},k={relevance:0,
match:l.either(/\bJSON/,/\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,/\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,/\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/),
className:"title.class",keywords:{_:[...t,...s]}},I={variants:[{
match:[/function/,/\s+/,b,/(?=\s*\()/]},{match:[/function/,/\s*(?=\()/]}],
className:{1:"keyword",3:"title.function"},label:"func.def",contains:[R],
illegal:/%/},x={
match:l.concat(/\b/,(T=[...r,"super","import"].map((e=>e+"\\s*\\(")),
l.concat("(?!",T.join("|"),")")),b,l.lookahead(/\s*\(/)),
className:"title.function",relevance:0};var T;const C={
begin:l.concat(/\./,l.lookahead(l.concat(b,/(?![0-9A-Za-z$_(])/))),end:b,
excludeBegin:!0,keywords:"prototype",className:"property",relevance:0},M={
match:[/get|set/,/\s+/,b,/(?=\()/],className:{1:"keyword",3:"title.function"},
contains:[{begin:/\(\)/},R]
},B="(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+o.UNDERSCORE_IDENT_RE+")\\s*=>",$={
match:[/const|var|let/,/\s+/,b,/\s*/,/=\s*/,/(async\s*)?/,l.lookahead(B)],
keywords:"async",className:{1:"keyword",3:"title.function"},contains:[R]}
;return{name:"JavaScript",aliases:["js","jsx","mjs","cjs"],keywords:g,exports:{
PARAMS_CONTAINS:w,CLASS_REFERENCE:k},illegal:/#(?![$_A-z])/,
contains:[o.SHEBANG({label:"shebang",binary:"node",relevance:5}),{
label:"use_strict",className:"meta",relevance:10,
begin:/^\s*['"]use (strict|asm)['"]/
},o.APOS_STRING_MODE,o.QUOTE_STRING_MODE,h,N,_,f,p,{match:/\$\d+/},A,k,{
className:"attr",begin:b+l.lookahead(":"),relevance:0},$,{
begin:"("+o.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",
keywords:"return throw case",relevance:0,contains:[p,o.REGEXP_MODE,{
className:"function",begin:B,returnBegin:!0,end:"\\s*=>",contains:[{
className:"params",variants:[{begin:o.UNDERSCORE_IDENT_RE,relevance:0},{
className:null,begin:/\(\s*\)/,skip:!0},{begin:/(\s*)\(/,end:/\)/,
excludeBegin:!0,excludeEnd:!0,keywords:g,contains:w}]}]},{begin:/,/,relevance:0
},{match:/\s+/,relevance:0},{variants:[{begin:"<>",end:"</>"},{
match:/<[A-Za-z0-9\\._:-]+\s*\/>/},{begin:d.begin,
"on:begin":d.isTrulyOpeningTag,end:d.end}],subLanguage:"xml",contains:[{
begin:d.begin,end:d.end,skip:!0,contains:["self"]}]}]},I,{
beginKeywords:"while if switch catch for"},{
begin:"\\b(?!function)"+o.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
returnBegin:!0,label:"func.def",contains:[R,o.inherit(o.TITLE_MODE,{begin:b,
className:"title.function"})]},{match:/\.\.\./,relevance:0},C,{match:"\\$"+b,
relevance:0},{match:[/\bconstructor(?=\s*\()/],className:{1:"title.function"},
contains:[R]},x,{relevance:0,match:/\b[A-Z][A-Z_0-9]+\b/,
className:"variable.constant"},O,M,{match:/\$[(.]/}]}}})()
;hljs.registerLanguage("javascript",e)})();/*! `json` grammar compiled for Highlight.js 11.10.0 */
(()=>{var e=(()=>{"use strict";return e=>{const a=["true","false","null"],s={
scope:"literal",beginKeywords:a.join(" ")};return{name:"JSON",aliases:["jsonc"],
keywords:{literal:a},contains:[{className:"attr",
begin:/"(\\.|[^\\"\r\n])*"(?=\s*:)/,relevance:1.01},{match:/[{}[\],:]/,
className:"punctuation",relevance:0
},e.QUOTE_STRING_MODE,s,e.C_NUMBER_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE],
illegal:"\\S"}}})();hljs.registerLanguage("json",e)})();/*! `shell` grammar compiled for Highlight.js 11.10.0 */
(()=>{var s=(()=>{"use strict";return s=>({name:"Shell Session",
aliases:["console","shellsession"],contains:[{className:"meta.prompt",
begin:/^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,starts:{end:/[^\\](?=\s*$)/,
subLanguage:"bash"}}]})})();hljs.registerLanguage("shell",s)})();/*! `sql` grammar compiled for Highlight.js 11.10.0 */
(()=>{var e=(()=>{"use strict";return e=>{
const r=e.regex,t=e.COMMENT("--","$"),n=["true","false","unknown"],a=["bigint","binary","blob","boolean","char","character","clob","date","dec","decfloat","decimal","float","int","integer","interval","nchar","nclob","national","numeric","real","row","smallint","time","timestamp","varchar","varying","varbinary"],i=["abs","acos","array_agg","asin","atan","avg","cast","ceil","ceiling","coalesce","corr","cos","cosh","count","covar_pop","covar_samp","cume_dist","dense_rank","deref","element","exp","extract","first_value","floor","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","last_value","lead","listagg","ln","log","log10","lower","max","min","mod","nth_value","ntile","nullif","percent_rank","percentile_cont","percentile_disc","position","position_regex","power","rank","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","row_number","sin","sinh","sqrt","stddev_pop","stddev_samp","substring","substring_regex","sum","tan","tanh","translate","translate_regex","treat","trim","trim_array","unnest","upper","value_of","var_pop","var_samp","width_bucket"],s=["create table","insert into","primary key","foreign key","not null","alter table","add constraint","grouping sets","on overflow","character set","respect nulls","ignore nulls","nulls first","nulls last","depth first","breadth first"],o=i,c=["abs","acos","all","allocate","alter","and","any","are","array","array_agg","array_max_cardinality","as","asensitive","asin","asymmetric","at","atan","atomic","authorization","avg","begin","begin_frame","begin_partition","between","bigint","binary","blob","boolean","both","by","call","called","cardinality","cascaded","case","cast","ceil","ceiling","char","char_length","character","character_length","check","classifier","clob","close","coalesce","collate","collect","column","commit","condition","connect","constraint","contains","convert","copy","corr","corresponding","cos","cosh","count","covar_pop","covar_samp","create","cross","cube","cume_dist","current","current_catalog","current_date","current_default_transform_group","current_path","current_role","current_row","current_schema","current_time","current_timestamp","current_path","current_role","current_transform_group_for_type","current_user","cursor","cycle","date","day","deallocate","dec","decimal","decfloat","declare","default","define","delete","dense_rank","deref","describe","deterministic","disconnect","distinct","double","drop","dynamic","each","element","else","empty","end","end_frame","end_partition","end-exec","equals","escape","every","except","exec","execute","exists","exp","external","extract","false","fetch","filter","first_value","float","floor","for","foreign","frame_row","free","from","full","function","fusion","get","global","grant","group","grouping","groups","having","hold","hour","identity","in","indicator","initial","inner","inout","insensitive","insert","int","integer","intersect","intersection","interval","into","is","join","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","language","large","last_value","lateral","lead","leading","left","like","like_regex","listagg","ln","local","localtime","localtimestamp","log","log10","lower","match","match_number","match_recognize","matches","max","member","merge","method","min","minute","mod","modifies","module","month","multiset","national","natural","nchar","nclob","new","no","none","normalize","not","nth_value","ntile","null","nullif","numeric","octet_length","occurrences_regex","of","offset","old","omit","on","one","only","open","or","order","out","outer","over","overlaps","overlay","parameter","partition","pattern","per","percent","percent_rank","percentile_cont","percentile_disc","period","portion","position","position_regex","power","precedes","precision","prepare","primary","procedure","ptf","range","rank","reads","real","recursive","ref","references","referencing","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","release","result","return","returns","revoke","right","rollback","rollup","row","row_number","rows","running","savepoint","scope","scroll","search","second","seek","select","sensitive","session_user","set","show","similar","sin","sinh","skip","smallint","some","specific","specifictype","sql","sqlexception","sqlstate","sqlwarning","sqrt","start","static","stddev_pop","stddev_samp","submultiset","subset","substring","substring_regex","succeeds","sum","symmetric","system","system_time","system_user","table","tablesample","tan","tanh","then","time","timestamp","timezone_hour","timezone_minute","to","trailing","translate","translate_regex","translation","treat","trigger","trim","trim_array","true","truncate","uescape","union","unique","unknown","unnest","update","upper","user","using","value","values","value_of","var_pop","var_samp","varbinary","varchar","varying","versioning","when","whenever","where","width_bucket","window","with","within","without","year","add","asc","collation","desc","final","first","last","view"].filter((e=>!i.includes(e))),l={
begin:r.concat(/\b/,r.either(...o),/\s*\(/),relevance:0,keywords:{built_in:o}}
;return{name:"SQL",case_insensitive:!0,illegal:/[{}]|<\//,keywords:{
$pattern:/\b[\w\.]+/,keyword:((e,{exceptions:r,when:t}={})=>{const n=t
;return r=r||[],e.map((e=>e.match(/\|\d+$/)||r.includes(e)?e:n(e)?e+"|0":e))
})(c,{when:e=>e.length<3}),literal:n,type:a,
built_in:["current_catalog","current_date","current_default_transform_group","current_path","current_role","current_schema","current_transform_group_for_type","current_user","session_user","system_time","system_user","current_time","localtime","current_timestamp","localtimestamp"]
},contains:[{begin:r.either(...s),relevance:0,keywords:{$pattern:/[\w\.]+/,
keyword:c.concat(s),literal:n,type:a}},{className:"type",
begin:r.either("double precision","large object","with timezone","without timezone")
},l,{className:"variable",begin:/@[a-z0-9][a-z0-9_]*/},{className:"string",
variants:[{begin:/'/,end:/'/,contains:[{begin:/''/}]}]},{begin:/"/,end:/"/,
contains:[{begin:/""/}]},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,t,{
className:"operator",begin:/[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
relevance:0}]}}})();hljs.registerLanguage("sql",e)})();/*! `xml` grammar compiled for Highlight.js 11.10.0 */
(()=>{var e=(()=>{"use strict";return e=>{
const a=e.regex,n=a.concat(/[\p{L}_]/u,a.optional(/[\p{L}0-9_.-]*:/u),/[\p{L}0-9_.-]*/u),s={
className:"symbol",begin:/&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/},t={begin:/\s/,
contains:[{className:"keyword",begin:/#?[a-z_][a-z1-9_-]+/,illegal:/\n/}]
},i=e.inherit(t,{begin:/\(/,end:/\)/}),c=e.inherit(e.APOS_STRING_MODE,{
className:"string"}),l=e.inherit(e.QUOTE_STRING_MODE,{className:"string"}),r={
endsWithParent:!0,illegal:/</,relevance:0,contains:[{className:"attr",
begin:/[\p{L}0-9._:-]+/u,relevance:0},{begin:/=\s*/,relevance:0,contains:[{
className:"string",endsParent:!0,variants:[{begin:/"/,end:/"/,contains:[s]},{
begin:/'/,end:/'/,contains:[s]},{begin:/[^\s"'=<>`]+/}]}]}]};return{
name:"HTML, XML",
aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist","wsf","svg"],
case_insensitive:!0,unicodeRegex:!0,contains:[{className:"meta",begin:/<![a-z]/,
end:/>/,relevance:10,contains:[t,l,c,i,{begin:/\[/,end:/\]/,contains:[{
className:"meta",begin:/<![a-z]/,end:/>/,contains:[t,i,l,c]}]}]
},e.COMMENT(/<!--/,/-->/,{relevance:10}),{begin:/<!\[CDATA\[/,end:/\]\]>/,
relevance:10},s,{className:"meta",end:/\?>/,variants:[{begin:/<\?xml/,
relevance:10,contains:[l]},{begin:/<\?[a-z][a-z0-9]+/}]},{className:"tag",
begin:/<style(?=\s|>)/,end:/>/,keywords:{name:"style"},contains:[r],starts:{
end:/<\/style>/,returnEnd:!0,subLanguage:["css","xml"]}},{className:"tag",
begin:/<script(?=\s|>)/,end:/>/,keywords:{name:"script"},contains:[r],starts:{
end:/<\/script>/,returnEnd:!0,subLanguage:["javascript","handlebars","xml"]}},{
className:"tag",begin:/<>|<\/>/},{className:"tag",
begin:a.concat(/</,a.lookahead(a.concat(n,a.either(/\/>/,/>/,/\s/)))),
end:/\/?>/,contains:[{className:"name",begin:n,relevance:0,starts:r}]},{
className:"tag",begin:a.concat(/<\//,a.lookahead(a.concat(n,/>/))),contains:[{
className:"name",begin:n,relevance:0},{begin:/>/,relevance:0,endsParent:!0}]}]}}
})();hljs.registerLanguage("xml",e)})();

/***/ }),

/***/ "./src/modules/ajax/ajax.js":
/*!**********************************!*\
  !*** ./src/modules/ajax/ajax.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ajax: () => (/* binding */ Ajax)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialog/dialog */ "./src/modules/dialog/dialog.js");



let UnloadInitialized = false;

class Ajax {
	static DefaultOptions = {
		method: "GET",
		headers: {},
		preventSlidingExpiration: false,
		processData: true,
		ResponseOverrides: {},
		LoadTimeout: 2000,
		error: error => _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__.Dialog.ShowError(Localizer.ERROR_TITLE, Localizer.ERROR_MESSAGE, error)
	}

	static async #Send(url, options) {
		url = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(url);

		let preventTimeout = false,
			abortController = new AbortController();

		try {
			const config = {
				...this.DefaultOptions,
				url,
				queryParameters: options.queryParameters ?? {},
				method: options.method,
				headers: {
					'RequestVerificationToken': document.querySelector("input[name='__RequestVerificationToken']")?.value,
					...options.headers
				},
				body: options.body,
				signal: abortController.signal
			};

			options = { ...this.DefaultOptions, ...options };

			if (options.preventSlidingExpiration) { config.headers["x-prevent-sliding-expiration"] = true; }

			if (options.LoadTimeout) {
				setTimeout(() => {
					if (!preventTimeout) {
						Ajax.#ShowThrobber();
					}
				}, options.LoadTimeout);
			}

			if (options.OnBeforeSend) {
				await options.OnBeforeSend(config);
			}

			if (!(options.body instanceof HTMLFormElement)) {
				const sendAsJSON = ["Object", "Number", "String"].includes(config.body?.constructor.name) || Array.isArray(config.body);

				if (sendAsJSON) {
					config.headers['Content-Type'] = 'application/json';
					config.body = JSON.stringify(config.body);
				}
			} else {
				config.body = new FormData(options.body);
				config.body.delete("__RequestVerificationToken");
			}

			const parsedURL = new URL(config.url, location);
			parsedURL.hash = "";

			Object.entries(config.queryParameters ?? {}).forEach(([key, value]) => {
				if (!Array.isArray(config.queryParameters[key])) {
					parsedURL.searchParams.set(key, value);
				} else {
					config.queryParameters[key].forEach(item => parsedURL.searchParams.append(key, item));
				}
			});

			if (options.OnCheckValid?.(config) !== false) {
				const fetchResponse = await fetch(parsedURL.toString(), config),
					{ headers, ok, redirected, status, statusText, type } = fetchResponse;

				const content = options.processData ? await fetchResponse.text() : "";

				const response = {
					content,
					blob: () => fetchResponse.blob(),
					json: () => fetchResponse.json(),
					body: options.processData ? _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.TryParseJSON(content) : fetchResponse.body,
					url: fetchResponse.url,
					headers, ok, redirected, status, statusText, type
				};

				options.OnComplete?.(response);
				preventTimeout = true;

				Ajax.HandleResponse(response, options.success);

				return response;
			} else {
				Ajax.#HideThrobber();
				preventTimeout = true;

				options.OnComplete?.();
			}
		} catch (error) {
			Ajax.#HideThrobber();
			preventTimeout = true;

			if (!UnloadInitialized) {
				options.error?.(error);
			}
		}
	}

	static Get = async (url, options) => await this.#Send(url, { ...this.DefaultOptions, ...options, method: "GET" });
	static Post = async (url, options) => await this.#Send(url, { ...this.DefaultOptions, ...options, method: "POST" });
	static Put = async (url, options) => await this.#Send(url, { ...this.DefaultOptions, ...options, method: "PUT" });
	static Delete = async (url, options) => await this.#Send(url, { ...this.DefaultOptions, ...options, method: "DELETE" });
	static Patch = async (url, options) => await this.#Send(url, { ...this.DefaultOptions, ...options, method: "PATCH" });

	static HandleResponse(response, overrides = {}) {
		Ajax.#HideThrobber();

		overrides = { ...this.DefaultOptions.ResponseOverrides, ...overrides };
		overrides.any?.(response);

		const func = response.ok ? overrides.ok : overrides[response.status];

		if (typeof func !== "function") {
			switch (response.status) {
				case 400:
					console.log(response);
					return _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__.Dialog.ShowError(Localizer.ERROR_TITLE, Localizer.BAD_REQUEST);

				case 404:
					console.log(response);
					return _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__.Dialog.ShowError(Localizer.ERROR_TITLE, Localizer.NOT_FOUND);
				case 403: return _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__.Dialog.ShowError(Localizer.ACCESS_DENIED_TITLE, Localizer.ACCESS_DENIED);
				case 500: return _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__.Dialog.ShowError(Localizer.ERROR_TITLE, Localizer.ERROR_MESSAGE);

				default:
					if (response.ok && response.redirected) {
						location.href = response.url;
					}
					break;
			}
		} else {
			return func(response);
		}
	}

	static #ShowThrobber() {
		document.body.classList.add("blur");

		document.body.appendChild(
			document.createElementWithContents("div", "<div class='cubes'><div class='cube'></div><div class='cube'></div><div class='cube'></div><div class='cube'></div><div class='cube'></div></div>", { className: "ajax-throbber" })
		);
	}

	static #HideThrobber() {
		document.body.removeClass("blur");
		document.querySelector(".ajax-throbber")?.remove();
	}
}

window.addEventListener("beforeunload", () => UnloadInitialized = true);

/***/ }),

/***/ "./src/modules/components/accordion/accordion-item.js":
/*!************************************************************!*\
  !*** ./src/modules/components/accordion/accordion-item.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AccordionItem: () => (/* binding */ AccordionItem)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class AccordionItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["open"];

	constructor() {
		super();

		this.heading = this.getAttribute("heading") ?? "";
		this.open = this.hasAttribute("open");
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("div", this.childNodes, {
			className: "accordion__content"
		}));

		const button = document.createElementWithContents("button", document.createElementWithContents("span", this.heading), {
			className: "btn--base btn-accordion-toggle",
			type: "button",
			ariaExpanded: this.open,
			onclick: () => this.open = !this.open
		}), toggleIcon = document.createElementWithContents("chip-icon", null, {
			className: "accordion__icon",
			icon: "fas fa-chevron-down"
		});

		if (_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() === "gov") {
			button.appendChild(document.createElementWithContents("div", "<chip-icon></chip-icon> <span>Show</span>", {
				className: "accordion--gov-toggle"
			}));
		}

		button.prepend(toggleIcon);

		if (this.heading) {
			this.prepend(button);
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "open") {
			if (this.IsAttributeValueTrue(newValue)) {
				this.Open();
			} else {
				this.Close();
			}
		}
	}

	#GetItems() {
		const container = this.closest("chip-accordion");

		if (container && !container.multiple) {
			return [...container.querySelectorAll("chip-accordionitem") ?? []];
		} else {
			return [this];
		}
	}

	Toggle() {
		if (!this.open) { this.Open(); }
		else { this.Close(); }
	}

	Open() {
		this.open = true;
		this.#GetItems().filter(x => x !== this && x.open).forEach(x => x.Close());

		this.querySelector(".btn-accordion-toggle")?.setAttribute("aria-expanded", true);

		const toggleText = this.querySelector(".accordion--gov-toggle span");

		if (toggleText) {
			toggleText.textContent = "Hide";
		}

		this.closest("chip-accordion")?.UpdateState();
	}

	Close() {
		this.open = false;
		this.querySelector(".btn-accordion-toggle")?.setAttribute("aria-expanded", false);

		const toggleText = this.querySelector(".accordion--gov-toggle span");

		if (toggleText) {
			toggleText.textContent = "Show";
		}

		this.closest("chip-accordion")?.UpdateState();
	}
}

/***/ }),

/***/ "./src/modules/components/accordion/accordion.js":
/*!*******************************************************!*\
  !*** ./src/modules/components/accordion/accordion.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Accordion: () => (/* binding */ Accordion)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class Accordion extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	constructor() {
		super();

		this.multiple = this.hasAttribute("multiple");

		this.classList.add("accordion__container");
	}

	parsedCallback() {
		if (this.multiple && _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() === "gov") {
			this.prepend(document.createElementWithContents("chip-button", "Show all sections", {
				variation: "none",
				className: "accordion--gov-toggle-all",
				icon: "fas fa-chevron-circle-down",
				onclick: () => {
					const open = !!this.querySelector(":scope > chip-accordionitem:not([open])");

					this.querySelectorAll(":scope > chip-accordionitem").forEach(x => open ? x.Open() : x.Close());
				}
			}));
		}
	}

	UpdateState() {
		const btn = this.querySelector(".accordion--gov-toggle-all span");

		if (btn) {
			btn.textContent = this.querySelector(":scope > chip-accordionitem:not([open])") ? "Show all sections" : "Hide all sections";
		}
	}
}

/***/ }),

/***/ "./src/modules/components/auxilium-component.js":
/*!******************************************************!*\
  !*** ./src/modules/components/auxilium-component.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuxiliumComponent: () => (/* binding */ AuxiliumComponent)
/* harmony export */ });
/* harmony import */ var _razor_razor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../razor/razor */ "./src/modules/razor/razor.js");


class AuxiliumComponent extends HTMLElement {
	#ObservableBooleans = ["disabled"];

	constructor() {
		super();

		this.init = new WeakMap;
		this.queue = [];
		this._onparsed = null;
		this.parsed = false;
		this.setQueue = [];

		this.disabled = this.hasAttribute("disabled");
		this.badge = this.getAttribute("badge");
		this.tooltip = this.getAttribute("tooltip");
		this.tooltipPlacement = this.getAttribute("tooltipPlacement");

		this.normalizeContent = true;
		this.enhanceContents = this.hasAttribute("enhance");

		const observable = this.constructor.observedAttributes ?? [];
		observable.push("disabled", "tooltip", "tooltip-placement");

		for (const attribute of observable) {
			let value = this.getAttribute(attribute),
				propertyName = attribute.replace(/-([a-z]|\d)/ig, (_, letter) => letter.toUpperCase());

			// The regex converts something like 'button-style' to 'buttonStyle'
			Object.defineProperty(this, propertyName, {
				get() {
					return this.#ObservableBooleans.includes(attribute) ? this.hasAttribute(attribute) : value;
				},
				set(val) {
					if ([true, false].includes(val) && !this.#ObservableBooleans.includes(attribute)) {
						this.#ObservableBooleans.push(attribute);
					}

					const setValue = () => {
						if (val === false && this.hasAttribute(attribute)) {
							this.removeAttribute(attribute);
						} else if (val === true && !this.hasAttribute(attribute)) {
							this.setAttribute(attribute, "");
						} else if (!this.#attributeEquals(attribute, val) && ![true, false].includes(val)) {
							if (val?.toString().trim() === "") { this.removeAttribute(attribute); }
							else { this.setAttribute(attribute, val); }
						}

						if (attribute === "tooltip") {
							const existing = document.querySelector(`#${this.__tooltipID} .tooltip-content`);

							if (existing) {
								if (val) {
									existing.textContent = val;
								} else {
									existing.parentElement.remove();
									this.onmouseover = null;
								}
							} else {
								_razor_razor__WEBPACK_IMPORTED_MODULE_0__.Razor.RefreshTooltips();
							}
						}
					}

					value = val;

					if (!this.parsed) {
						this.setQueue.push(setValue);
					} else {
						setValue();
					}
				}
			});
		}
	}

	GetValidationMessage(control) {
		if (!control || control.validity.valid) { return this.VALIDATION_CUSTOM; }

		if (control.validity.valueMissing) { return this.VALIDATION_REQUIRED || control.validationMessage; }
		else if (control.validity.typeMismatch) { return this.VALIDATION_TYPE_MISMATCH || control.validationMessage; }
		else if (control.validity.patternMismatch) { return this.VALIDATION_PATTERN_MISMATCH || control.validationMessage; }
		else if (control.validity.tooShort) { return this.VALIDATION_TOO_SHORT || control.validationMessage; }
		else if (control.validity.tooLong) { return this.VALIDATION_TOO_LONG || control.validationMessage; }
		else if (control.validity.rangeUnderflow) { return this.VALIDATION_RANGE_UNDERFLOW || control.validationMessage; }
		else if (control.validity.rangeOverflow) { return this.VALIDATION_RANGE_OVERFLOW || control.validationMessage; }
		else if (control.validity.stepMismatch) { return this.VALIDATION_STEP_MISMATCH || control.validationMessage; }
		else if (control.validity.badInput) { return this.VALIDATION_BAD_INPUT || control.validationMessage; }

		return control.validationMessage;
	}

	InitializeValidationMessages() {
		Object.assign(this, {
			VALIDATION_REQUIRED: this.getAttribute("validation-required") ?? "",
			VALIDATION_TYPE_MISMATCH: this.getAttribute("validation-wrong-type") ?? "",
			VALIDATION_PATTERN_MISMATCH: this.getAttribute("validation-wrong-pattern") ?? "",
			VALIDATION_TOO_SHORT: this.getAttribute("validation-too-short") ?? "",
			VALIDATION_TOO_LONG: this.getAttribute("validation-too-long") ?? "",
			VALIDATION_RANGE_OVERFLOW: this.getAttribute("validation-too-high") ?? "",
			VALIDATION_RANGE_UNDERFLOW: this.getAttribute("validation-too-low") ?? "",
			VALIDATION_STEP_MISMATCH: this.getAttribute("validation-wrong-step") ?? "",
			VALIDATION_BAD_INPUT: this.getAttribute("validation-bad-input") ?? "",
			VALIDATION_CUSTOM: this.getAttribute("validation-custom") ?? ""
		})
	}

	get onparsed() {
		return this._onparsed;
	}

	set onparsed(value) {
		if (this.parsed) { value?.(); }
		else { this._onparsed = value; }
	}

	attributeChangedCallback(name, oldValue, newValue) {
		if (!this.parsed) { return; }

		this.attributeChanged?.(name, oldValue, newValue);
	}

	/**
	 * For a boolean attribute, this is a helper function to check whether the attribute should exist or not
	 * @param {*} value The value to check
	 * @return {boolean} True if the attribute is to exist
	 */
	IsAttributeValueTrue(value) {
		return [true, ""].includes(value);
	}

	#attributeEquals(attributeName, value) {
		const attrValue = this.getAttribute(attributeName);

		if (attrValue?.toString() === value?.toString()) { return true; }

		return attrValue == null && ["null", "undefined"].includes(value?.toString());
	}

	raiseEvent(eventName, data = {}) {
		const handler = this[`on${eventName.toLowerCase()}`];

		if (handler) {
			handler(data);
		} else {
			this.dispatchEvent(new Event(eventName, {
				view: window,
				bubbles: false,
				cancelable: false
			}));
		}
	}

	raiseEvents(...events) {
		events.forEach(event => this.raiseEvent(event));
	}

	toggleReadonly(setToTrue = false) {
		this.readonly = setToTrue;
	}

	click() {
		this.raiseEvent("click");
	}

	disconnectedCallback() {
		document.getElementById(this.__tooltipID)?.remove();
	}

	#processQueueItem(element, fnName) {
		if (this.init.get(element) !== true && !this.parsed) {
			this.init.set(element, true);

			if (!this.innerHTML?.trim()) { this.innerHTML = ""; }
			if (this.normalizeContent && this.firstChild?.nodeType === Node.TEXT_NODE) { this.firstChild.trimBreaks(); }
			if (this.enhanceContents) { this.enhance(); }

			element[fnName]?.();
			this.parsed = true;

			this.setQueue.forEach(fn => fn());

			if (this.tooltip || this.querySelector("[tooltip]")) {
				_razor_razor__WEBPACK_IMPORTED_MODULE_0__.Razor.RefreshTooltips();
			}

			setTimeout(() => {
				this.raiseEvent("parsed");
			}, 0);
		}
	}

	connectedCallback() {
		const parsedCallback = el => {
			this.queue = this.queue.filter(([_, value]) => value !== "parsedCallback");

			if (!this.queue.length) {
				requestAnimationFrame(() => {
					this.queue.splice(0).forEach(([element, fnName]) => this.#processQueueItem(element, fnName));
				});
			}

			this.queue.push([el, "parsedCallback"]);
		}

		const isParsed = el => {
			do {
				if (el.nextSibling) {
					return true;
				}
			} while (el = el.parentNode);

			return false;
		}

		const cleanUp = (el, observer, ownerDocument, onDCL) => {
			observer.disconnect();
			ownerDocument.removeEventListener("DOMContentLoaded", onDCL);

			parsedCallback(el);
		}

		const self = this;
		const { ownerDocument } = self;

		this.init.set(self, false);

		if (ownerDocument.readyState === 'complete' || isParsed(self)) {
			parsedCallback(self);
		}
		else {
			const onDCL = () => cleanUp(self, observer, ownerDocument, onDCL);
			ownerDocument.addEventListener("DOMContentLoaded", onDCL);

			const observer = new MutationObserver(() => {
				if (isParsed(self)) {
					cleanUp(self, observer, ownerDocument, onDCL);
				}
			});

			observer.observe(self.parentNode, { childList: true, subtree: true });
		}
	}

	InitializeCheckboxProperties() {
		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);
		this.label = this.getAttribute("label");
		this.checked = this.hasAttribute("checked");
		this.name = this.getAttribute("name");
		this.required = this.hasAttribute("required");
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.value = this.getAttribute("value") ?? "true";
	}
}

/***/ }),

/***/ "./src/modules/components/badge/badge.js":
/*!***********************************************!*\
  !*** ./src/modules/components/badge/badge.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Badge: () => (/* binding */ Badge)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class Badge extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["variation"];

	constructor() {
		super();

		this.variation = this.getAttribute("variation") ?? "theme";
		this.size = this.getAttribute("size");
		this.icon = this.getAttribute("icon");
		this.link = this.getAttribute("link") ?? "";
		this.badgeStyle = this.getAttribute("badge-style");
	}

	parsedCallback() {
		if (this.link) { this.appendChild(document.createElementWithContents("chip-link", this.childNodes, { href: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link) })); }

		this.classList.add("badge", `badge--${this.variation}`);

		if (this.size) { this.classList.add(`badge--${this.size.toLowerCase()}`); }
		if (this.icon) { this.prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon })); }
	}

	SetText(text) {
		this.textContent = text;
		if (this.icon) { this.prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon })); }
	}

	attributeChanged(name, oldValue, newValue) {
		if (name === "variation") {
			this.classList.remove(`badge--${oldValue}`);
			this.classList.add(`badge--${newValue}`);
		}
	}
}

/***/ }),

/***/ "./src/modules/components/beacon/beacon.js":
/*!*************************************************!*\
  !*** ./src/modules/components/beacon/beacon.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Beacon: () => (/* binding */ Beacon)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Beacon extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.variation = this.getAttribute("variation") ?? "theme";
		this.size = this.getAttribute("size");
		this.paused = this.hasAttribute("paused");
	}

	parsedCallback() {
		this.classList.add("beacon", `beacon--${this.variation.toLowerCase()}`);

		if (this.size) { this.classList.add(`beacon--${this.size.toLowerCase()}`) };
		if (this.paused) { this.classList.add("beacon--off"); }
	}
}

/***/ }),

/***/ "./src/modules/components/breadcrumb/breadcrumb-item.js":
/*!**************************************************************!*\
  !*** ./src/modules/components/breadcrumb/breadcrumb-item.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BreadcrumbItem: () => (/* binding */ BreadcrumbItem)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class BreadcrumbItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	constructor() {
		super();

		this.link = this.getAttribute("link") ?? "";
		this.target = this.getAttribute("target");
		this.icon = this.getAttribute("icon") ?? "";

		if (_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link) === location.toString()) { this.link = ""; }
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("span", this.childNodes));

		if (this.link) {
			const anchor = document.createElementWithContents("a", this.childNodes, { href: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link) });

			if (this.target) { anchor.target = this.target; }
			if (this.target === "_blank") { anchor.appendChild(document.createElementWithContents("span", "(opens in new window)", { className: "visually-hidden" })) }

			this.appendChild(anchor);
		}

		if (this.icon) { (this.link ? this.querySelector("a") : this).prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon })); }
	}
}

/***/ }),

/***/ "./src/modules/components/breadcrumb/breadcrumb.js":
/*!*********************************************************!*\
  !*** ./src/modules/components/breadcrumb/breadcrumb.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Breadcrumb: () => (/* binding */ Breadcrumb)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Breadcrumb extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.description = this.getAttribute("description") ?? "Breadcrumb";
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("nav", document.createElementWithContents("ol", [...this.children ?? []].map(x => document.createElementWithContents("li", x)), {
			className: "breadcrumb-list"
		}), { ariaLabel: this.description }));
	}
}

/***/ }),

/***/ "./src/modules/components/button/button-group.js":
/*!*******************************************************!*\
  !*** ./src/modules/components/button/button-group.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonGroup: () => (/* binding */ ButtonGroup)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/modules/components/button/button.js");


class ButtonGroup extends _button__WEBPACK_IMPORTED_MODULE_0__.Button {
	constructor() {
		super();

		this.type = this.getAttribute("type") ?? "single";
		this.hiddenName = this.getAttribute("hidden-name");
		this.size = this.getAttribute("size");
		this.spacing = this.getAttribute("spacing") ?? "";
		this.variation = this.getAttribute("variation");
		this.label = this.getAttribute("label") ?? "";
		this.helperText = this.getAttribute("helper-text") ?? "";

		if (this.closest("form") && !this.hiddenName) {
			this.hiddenName = this.id;
		}
	}

	parsedCallback() {
		const wrapper = document.createElementWithContents("div", document.createElementWithContents("ul", [...this.children ?? []].map(x => document.createElementWithContents("li", x))), { className: "button-group__container" });

		const buttons = wrapper.querySelectorAll("chip-button, chip-dropdownbutton, chip-splitbutton");

		if (buttons.length < 6) {
			wrapper.querySelector("ul").setAttribute("columns", buttons.length);
		}

		buttons.forEach(button => {
			this.addButton(button);
		});

		if (this.hiddenName) {
			wrapper.appendChild(document.createElementWithContents("input", null, {
				type: "hidden",
				value: this.value,
				name: this.hiddenName
			}));
		}

		if (this.label) {
			wrapper.prepend(document.createElementWithContents("div", this.label, { className: "input-field__label" }));
		}

		this.appendChild(wrapper);

		if (this.helperText) {
			wrapper.appendChild(document.createElementWithContents("div", this.helperText, { className: "input-field__helper-text" }));
		}

		this.#SelectValue(this.value);
	}

	addButton(button) {
		const list = this.querySelector(".button-group__container>ul");

		if (list?.contains(button) === false) {
			list.appendChild(document.createElementWithContents("li", button));
		}

		if (!button.getAttribute("size") && this.size) { button.size = this.size; }
		if (!button.getAttribute("buttonStyle") && this.buttonStyle) { button.buttonStyle = this.buttonStyle; }
		if (!button.getAttribute("orientation") && this.orientation) { button.orientation = this.orientation; }

		if (this.variation) { button.variation = this.variation; }
		if (this.disabled) { button.disabled = this.disabled; }

		button.buttonClass = button.buttonClass + ` ${this.buttonClass}`.trim();

		switch (button.nodeName) {
			case "CHIP-BUTTON":
				button.addEventListener("click", ev => this.#HandleButtonClick(ev.target));
				break;
			case "CHIP-DROPDOWNBUTTON":
				button.querySelector("chip-dropdown").onselectionchange = () => this.#HandleButtonClick(button);
				break;
			case "CHIP-SPLITBUTTON":
				button.addEventListener("click", ev => this.#HandleButtonClick(ev.target));
				button.querySelectorAll("chip-dropdownitem").forEach(item => item.addEventListener("click", ev => this.#HandleButtonClick(ev.target)));
				break;
		}
	}

	#SelectButton(button) {
		if (!button) { return; }

		if (this.type === "single") {
			this.querySelectorAll("chip-button, chip-dropdownbutton, chip-splitbutton").forEach(btn => {
				btn.active = btn === button;
			});
		} else {
			button.active = true;
		}

		this.selectedItem = button;
		this.#UpdateHiddenInput();
	}

	#SelectValue(value) {
		for (const target of [...this.querySelectorAll("chip-button, chip-splitbutton, chip-dropdownbutton")].filter(x => value?.split("|").includes(x.value?.toString()))) {
			this.#SelectButton(target);
		}
	}

	#UpdateHiddenInput() {
		const hiddenInput = this.querySelector("input[type='hidden']");

		if (hiddenInput) {
			hiddenInput.value = [...this.querySelectorAll("chip-button[active], chip-dropdownbutton[active], chip-splitbutton[active]")].
				map(x => x.value).join("|");
		}
	}

	#HandleButtonClick(target) {
		const closestButton = target.closest("chip-button, chip-splitbutton, chip-dropdownbutton");

		let elements = (this.type === "single" ? [] : [...this.querySelectorAll("chip-button[active], chip-dropdownbutton[active], chip-splitbutton[active]")])
			.concat(closestButton);

		if (closestButton.active && this.type !== "single") {
			elements = elements.filter(x => x !== closestButton);

			closestButton.active = false;
			this.#UpdateHiddenInput();
		}

		const oldValue = this.value;
		this.value = elements.map(x => x.value).join("|");

		if (oldValue !== this.value) {
			this.raiseEvent("change");
		}
	}

	removeValue(value) {
		for (const target of [...this.querySelectorAll("chip-button, chip-splitbutton, chip-dropdownbutton")].filter(x => value?.toString().split("|").includes(x.value?.toString()))) {
			target.remove();
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "value") {
			this.#SelectValue(newValue);
		}
	}
}

/***/ }),

/***/ "./src/modules/components/button/button.js":
/*!*************************************************!*\
  !*** ./src/modules/components/button/button.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _razor_razor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../razor/razor */ "./src/modules/razor/razor.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");




class Button extends _auxilium_component__WEBPACK_IMPORTED_MODULE_2__.AuxiliumComponent {
	#Mappers = {};
	#OriginalIcon = "";

	static observedAttributes = ["icon", "button-style", "variation", "size", "value", "orientation", "link", "active", "suffix-icon", "button-class", "description", "icon-colour", "loading"];

	constructor() {
		super();

		this.loading = this.hasAttribute("loading");
		this.icon = this.getAttribute("icon") ?? "";
		this.iconColour = this.getAttribute("icon-colour") ?? "";
		this.variation = this.getAttribute("variation") ?? "theme";
		this.description = this.getAttribute("description") ?? "";
		this.disabled = this.hasAttribute("disabled");
		this.buttonStyle = this.getAttribute("button-style") ?? "";
		this.buttonClass = this.getAttribute("button-class") ?? "";
		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);
		this.size = this.getAttribute("size") ?? "";
		this.active = this.hasAttribute("active");
		this.suffixIcon = this.getAttribute("suffix-icon");
		this.value = this.getAttribute("value");
		this.link = this.getAttribute("link") ?? "";
		this.submits = this.hasAttribute("submits");
		this.orientation = this.getAttribute("orientation") ?? "";
		this.stepDirection = this.getAttribute("step-direction") ?? "";

		this.#Mappers = {
			form: this.getAttribute("form") ?? "",
			autofocus: this.hasAttribute("focus"),
			download: this.getAttribute("download") ?? "",
			type: this.getAttribute("type") ?? "button",
			target: this.getAttribute("target") ?? "",
			formaction: this.getAttribute("formaction") ?? "",
			formmethod: this.getAttribute("formmethod") ?? ""
		};

		Object.keys(this.#Mappers).forEach(key => this[key] = this.#Mappers[key]);

		if (this.hasAttribute("onclick")) {
			this.role = "button";
		}
	}

	get textContent() {
		return this.querySelector("span")?.textContent ?? "";
	}

	set textContent(value) {
		const span = this.querySelector("span");

		if (span) {
			span.textContent = value;
		}
	}

	#SetDescription(description, button) {
		if (!button) { return; }

		if (button.nodeName === "BUTTON") {
			if (!button.id) {
				button.id = this.identifier;
			}

			let label = this.querySelector(":scope > label.visually-hidden");

			if (!label) {
				const newLabel = document.createElementWithContents("label", null, { className: "visually-hidden" });
				this.prepend(newLabel);

				label = newLabel;
			}

			label.textContent = description;
			label.htmlFor = button.id;
		} else {
			button.ariaLabel = description;
		}
	}

	parsedCallback() {
		if (this.variation === "theme" && _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() === "gov" && !this.suffixIcon) {
			this.suffixIcon = "fas fa-chevron-right";
		}

		const button = document.createElementWithContents(this.link ? "a" : "button", this.childNodes.length ? document.createElementWithContents("span", this.childNodes) : null, {
			className: "btn--base"
		});

		button.onfocus = ev => {
			ev.halt();
			this.raiseEvent("focus");
		}

		button.classList.add(Button.ClassFromVariation(this.variation))

		if (this.link && this.#Mappers.target === "_blank") {
			button.appendChild(document.createElementWithContents("span", "(opens in new window)", {
				className: "visually-hidden"
			}));
		}

		if (this.identifier) { button.id = this.identifier; }
		if (this.disabled) { button.setAttribute("disabled", ""); }
		if (this.stepDirection) { button.addEventListener("click", () => this.#HandleStepButtonClick()); }
		if (this.active) { button.classList.add("active"); }
		if (this.buttonClass) { button.classList.add(...this.buttonClass.split(" ")); }

		if (this.tooltip && button.textContent.trim() === "") { this.#SetDescription(this.tooltip, button); }
		if (this.description && !button.textContent?.trim()) { this.#SetDescription(this.description, button); }

		if (this.submits) {
			button.classList.add("btn-entity-post");
			button.onclick = () => _razor_razor__WEBPACK_IMPORTED_MODULE_1__.Razor.FireButtonAjax(button);
		}

		if (this.link) { button.href = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link); }
		if (this.size) { button.classList.add(`btn--${this.size.toLowerCase()}`); }
		if (this.buttonStyle) { button.classList.add(`btn--${this.buttonStyle.toLowerCase()}`); }
		if (this.orientation) { button.classList.add(`btn--${this.orientation.toLowerCase()}`); }

		if (this.icon) {
			const icon = document.createElementWithContents("chip-icon", null, {
				icon: this.icon
			});

			if (this.iconColour) {
				icon.colour = this.iconColour;
			}

			button.prepend(icon);
		}

		if (this.suffixIcon) {
			button.appendChild(document.createElementWithContents("chip-icon", null, {
				icon: this.suffixIcon
			}));
		}

		Object.keys(this.#Mappers).filter(x => this.#Mappers[x])
			.forEach(key => button.setAttribute(key, this.#Mappers[key] === true ? "" : this.#Mappers[key]));

		this.#OriginalIcon = this.icon;
		this.#updateLoadingState(this.loading);

		this.appendChild(button);
	}

	#HandleStepButtonClick() {
		const tabContent = this.closest(".tab-group__tab");

		let index = [...this.closest(".tab-group__content")?.children ?? []].indexOf(tabContent);

		if (this.stepDirection.toLowerCase() === "next") { index = Math.min(index + 1, this.closest(".tab-group__content").children.length - 1); }
		else { index = Math.max(index - 1, 0); }

		const tab = this.closest("chip-tabgroup")?.querySelector(`:scope > .tab-group__tabs > .tab__wrapper > chip-tab:nth-child(${index + 1})`);

		if (tab && (this.closest("chip-tabgroup")?.querySelector(`:scope > .tab-group__tabs > .tab__wrapper > chip-tab:nth-child(${index})`)?.checkValidity() === true || this.stepDirection.toLowerCase() !== "next")) {
			tab.selected = true;
		}
	}

	click() {
		this.querySelector(":scope > button, :scope > a")?.click();
	}

	#updateLoadingState(isLoading) {
		if (isLoading) {
			this.#OriginalIcon = this.icon;
			this.icon = "fad fa-spinner-third spin";
		} else {
			this.icon = this.#OriginalIcon;
		}

		this.disabled = isLoading;
	}

	#updateIcon(icon) {
		const existingIcon = this.querySelector(":scope>.btn--base>chip-icon:first-child");

		if (!icon?.trim()) { return existingIcon?.remove(); }

		if (existingIcon) {
			existingIcon.icon = icon;
		} else {
			this.querySelector(":scope>.btn--base")?.prepend(document.createElementWithContents("chip-icon", null, { icon: icon }));
		}
	}

	attributeChanged(name, oldValue, newValue) {
		switch (name) {
			case "variation":
				this.querySelectorAll(":scope>button, :scope>a, :scope>chip-dropdown>div>button").forEach(x => {
					x.classList.remove(Button.ClassFromVariation(oldValue));
					x.classList.add(Button.ClassFromVariation(newValue));
				});
				break;
			case "size":
				this.querySelectorAll(":scope>button, :scope>a, :scope>chip-dropdown>div>button").forEach(x => {
					x.classList.remove(`btn--${this.size}`);

					if (newValue) {
						x.classList.add(`btn--${newValue.toLowerCase()}`);
					}
				});
				break;
			case "button-style":
				this.querySelectorAll(":scope>button, :scope>a, :scope>chip-dropdown>div>button").forEach(x => {
					x.classList.remove(`btn--${oldValue}`);

					if (newValue) {
						x.classList.add(`btn--${newValue.toLowerCase()}`);
					}
				});
				break;
			case "button-class":
				{
					const buttons = this.querySelectorAll(":scope>button, :scope>a, :scope>chip-dropdown>div>button");

					if (oldValue) { buttons.forEach(x => x.classList.remove(...oldValue.split(" "))); }
					if (newValue) { buttons.forEach(x => x.classList.add(...newValue.split(" "))); }
				}
				break;
			case "orientation":
				this.firstElementChild.classList.remove(`btn--${this.orientation}`);
				this.firstElementChild.classList.add(`btn--${newValue.toLowerCase()}`);
				break;
			case "tooltip":
				{
					const target = this.querySelector("button, a");

					if (target?.textContent.trim() === "") {
						this.#SetDescription(newValue, target);
					}
				}
				break;
			case "identifier":
				{
					const target = this.querySelector("button, a");

					if (target) {
						target.id = newValue;
					}
				}
				break;
			case "description":
				{
					const target = this.querySelector("button, a");

					if (target && !target.textContent?.trim()) {
						this.#SetDescription(newValue, target);
					}
				}
				break;
			case "icon":
				this.#updateIcon(newValue);
				break;
			case "icon-colour":
				{
					const existingIcon = this.querySelector("chip-icon");

					if (existingIcon) {
						existingIcon.classList.add("text-theme");
						existingIcon.dataset.colour = newValue;
					} else {
						this.prepend(document.createElementWithContents("chip-icon", null, { icon: newValue }));
					}
				}
				break;
			case "suffix-icon":
				{
					const existingIcon = this.querySelector(":scope > div > button > i:last-child:not(:first-child)");

					if (existingIcon) {
						existingIcon.className = newValue;
					} else {
						this.querySelector(":scope > div > button")?.appendChild(document.createElementWithContents("chip-icon", null, { icon: newValue }));
					}
				}
				break;
			case "link":
				{
					const anchor = this.querySelector("a");

					if (anchor) {
						if (newValue) {
							anchor.href = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(newValue);
						} else {
							anchor.removeAttribute("href");
						}
					}
				}
				break;
			case "disabled":
				this.querySelectorAll(":scope>button, :scope>a, :scope>chip-dropdown>div>button").forEach(x => {
					if (this.IsAttributeValueTrue(newValue)) {
						x.disabled = true;
					} else {
						x.removeAttribute("disabled");
					}
				});
				break;
			case "active":
				if (this.IsAttributeValueTrue(newValue)) {
					this.querySelector("button, a").classList.add("active");
				} else {
					this.querySelector("button, a").classList.remove("active");
				}
				break;
			case "loading":
				this.#updateLoadingState(this.IsAttributeValueTrue(newValue));
				break;
		}
	}

	focus() {
		const attempt = this.querySelector("a, button");

		if (attempt) {
			attempt.focus();
		} else {
			this.onparsed = () => this.querySelector("a, button")?.focus();
		}
	}

	static ClassFromVariation(variation) {
		switch (variation?.toLowerCase()) {
			case "theme-outline":
			case "info-outline":
			case "success-outline":
			case "warning-outline":
			case "secondary-outline":
			case "danger-outline":
			case "theme-secondary":
			case "theme-tertiary":
			case "secondary-secondary":
			case "danger-secondary":
			case "danger-tertiary":
			case "warning-secondary":
			case "warning-tertiary":
			case "secondary-tertiary":
			case "success-secondary":
			case "info":
			case "info-secondary":
			case "info-tertiary":
			case "body":
			case "success-tertiary":
			case "pagination":
			case "secondary":
			case "none":
			case "sidebar":
			case "theme": return `btn-${variation.toLowerCase()}`;

			case "success":
			case "warning":
			case "danger": return `btn-${variation.toLowerCase()}-action`;
			default: return "btn-theme";
		}
	}
}

/***/ }),

/***/ "./src/modules/components/button/dropdown-button.js":
/*!**********************************************************!*\
  !*** ./src/modules/components/button/dropdown-button.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownButton: () => (/* binding */ DropdownButton)
/* harmony export */ });
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ "./src/modules/components/button/button.js");


class DropdownButton extends _button__WEBPACK_IMPORTED_MODULE_0__.Button {
	parsedCallback() {
		const dropdown = this.querySelector("chip-dropdown");

		if (dropdown) {
			if ((this.buttonStyle === "icon" || !this.textContent?.trim()) && !this.description) {
				this.description = Localizer.TOGGLE_DROPDOWN;
			}

			if (!dropdown?.hasAttribute("icon")) { dropdown.icon = this.icon; }
			if (!dropdown?.hasAttribute("suffix-icon")) { dropdown.suffixIcon = this.suffixIcon; }
			if (!dropdown?.hasAttribute("size")) { dropdown.size = this.size; }
			if (!dropdown?.hasAttribute("description")) { dropdown.description = this.description; }
		}
	}

	click() {
		this.querySelector(":scope>chip-dropdown>div>.btn--base")?.click();
	}

	set textContent(value) {
		const button = this.querySelector("chip-dropdown>div>button");

		if (button) {
			button.textContent = value;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/button/splitbutton.js":
/*!******************************************************!*\
  !*** ./src/modules/components/button/splitbutton.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SplitButton: () => (/* binding */ SplitButton)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button */ "./src/modules/components/button/button.js");



class SplitButton extends _button__WEBPACK_IMPORTED_MODULE_1__.Button {
	constructor() {
		super();

		this.buttonID = this.getAttribute("button-id") ?? "";
	}

	parsedCallback() {
		const variationClass = _button__WEBPACK_IMPORTED_MODULE_1__.Button.ClassFromVariation(this.variation),
			dropdown = this.querySelector("chip-dropdown");

		const clickable = document.createElementWithContents(this.link ? "a" : "button", [...this.childNodes ?? []].filter(x => !x.matches?.("chip-dropdown")), {
			className: "btn--base split-button-primary",
			type: "button"
		});

		clickable.classList.add(variationClass);
		if (this.buttonClass) { clickable.classList.add(this.buttonClass); }

		if (this.size) { clickable.classList.add(`btn--${this.size.toLowerCase()}`); }
		if (this.buttonStyle) { clickable.classList.add(`btn--${this.buttonStyle.toLowerCase()}`); }
		if (this.icon) { clickable.prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon })); }

		this.prepend(clickable);

		dropdown.static = true;

		if (this.link) { this.querySelector("a").href = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link); }
		if (this.buttonID) { this.querySelector(".split-button-primary").id = this.buttonID; }

		const button = this.querySelector("chip-dropdown>div>button");

		if (button) {
			this.#InitDropdown(variationClass, button);
		} else {
			dropdown.onparsed = () => this.#InitDropdown(variationClass);
		}
	}

	#InitDropdown(variationClass, button) {
		button ??= this.querySelector("chip-dropdown>div>button");

		if (this.size) { button.classList.add(`btn--${this.size.toLowerCase()}`); }

		button.classList.add("btn--base", variationClass, "btn--icon");
		button.ariaLabel = Localizer.TOGGLE_DROPDOWN;
		button.appendChild(document.createElementWithContents("chip-icon", null, { icon: "fas fa-chevron-down" }));

		button.addEventListener("click", ev => ev.stopPropagation());
	}
}

/***/ }),

/***/ "./src/modules/components/callout/callout.js":
/*!***************************************************!*\
  !*** ./src/modules/components/callout/callout.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Callout: () => (/* binding */ Callout)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Callout extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["heading", "variation", "hide-icon"];

	constructor() {
		super();

		this.variation ??= this.getAttribute("variation") ?? "info";
		this.heading ??= this.getAttribute("heading") ?? "";
		this.hideIcon = this.hasAttribute("hide-icon");
	}

	parsedCallback() {
		if (this.innerHTML?.trim() === "") { this.classList.add("callout--header-only"); }
		else {
			this.appendChild(document.createElementWithContents("div", this.childNodes, { className: "callout-body" }));
		}

		if (this.heading) {
			this.prepend(document.createElementWithContents("div", this.heading, { className: "callout__header" }));
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "heading") {
			const existing = this.querySelector(".callout__header");

			if (existing) {
				existing.innerHTML = newValue;
			} else {
				this.prepend(document.createElementWithContents("div", newValue, { className: "callout__header" }));
			}
		}
	}
}

/***/ }),

/***/ "./src/modules/components/card/card.js":
/*!*********************************************!*\
  !*** ./src/modules/components/card/card.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Card: () => (/* binding */ Card)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dialog/dialog */ "./src/modules/dialog/dialog.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");




class Card extends _auxilium_component__WEBPACK_IMPORTED_MODULE_2__.AuxiliumComponent {
	static observedAttributes = ["scroll", "flush", "hoverable", "hide-blur"];

	constructor() {
		super();

		this.heading = {
			text: this.getAttribute("heading"),
			size: this.getAttribute("heading-size"),
			subtitle: this.getAttribute("subtitle")
		};

		this.scroll = this.hasAttribute("scroll");
		this.image = this.getAttribute("image");
		this.video = this.getAttribute("video");
		this.link = this.getAttribute("link");
		this.audio = this.getAttribute("audio");
		this.tableCard = this.hasAttribute("table-card"); ''
		this.allowPreview = this.hasAttribute("allow-preview");
		this.hideBlur = this.hasAttribute("hide-blur");
		this.flush = this.hasAttribute("flush");
		this.flushHeader = this.hasAttribute("flush-header");
		this.variation = this.getAttribute("variation");
		this.hoverable = this.hasAttribute("hoverable");
		this.size = this.getAttribute("size")?.toLowerCase();

		if (!this.heading.size) {
			this.heading.size = (() => {
				switch (this.size) {
					case "xs": return "5";
					case "sm": return "4";
					case "md": return "2";
					case "lg": return "1";
					case "body": return "body";
					default: return "3";
				}
			})();
		}
	}

	setBody(content) {
		const bodyElement = this.querySelector(".card-body") ?? this.appendChild(document.createElementWithContents("div", null, { className: "card-body" }));

		bodyElement.innerHTML = content;
	}

	parsedCallback() {
		this.classList.add("card-frame");

		if (this.flush) { this.classList.add("card--flush"); }
		if (this.variation) { this.classList.add(`card-${this.variation}`); }
		if (this.size) { this.classList.add(`card--${this.size}`); }

		if (this.image || this.video || this.audio) {
			this.querySelector(":scope>.card-header,:scope> chip-cardheader")?.remove();
		}

		if (this.image) {
			const loader = document.createElementWithContents("chip-loading", null, { type: "image", size: "xxxxl" });

			function imgLoaded(ev) {
				loader.remove();
				ev.target.classList.add("image--loaded");
			}

			const img = document.createElementWithContents("img", null, {
				loading: "lazy",
				src: this.image,
				onload: ev => imgLoaded(ev),
				alt: "Card Image Preview"
			}), visibleImg = !this.hideBlur ? img.cloneNode() : null;

			if (visibleImg) { visibleImg.onload = ev => imgLoaded(ev); }

			this.prepend(document.createElementWithContents("chip-cardheader", [loader, img, visibleImg], {
				onclick: () => this.allowPreview ? _dialog_dialog__WEBPACK_IMPORTED_MODULE_1__.Dialog.ShowImage(this.image) : null
			}));
		}

		if (this.video) {
			const vid = document.createElementWithContents("video", `<source src="${this.video}"></source>`, {
				controls: true
			});

			this.prepend(document.createElementWithContents("chip-cardheader", vid));
		}

		if (this.audio) {
			const ado = document.createElementWithContents("audio", null, {
				controls: true,
				src: this.audio
			});

			this.prepend(document.createElementWithContents("chip-cardheader", ado));
		}

		const card = document.createElementWithContents(this.link ? "a" : "div",
			this.heading.text ?
				`
				<div class="card-header">
					<chip-header>${this.heading.text}</chip-header>
					<div class="card-subtitle">${this.heading.subtitle}</div>
				</div>
			`.trim() : document.createElementWithContents("div", this.querySelector(":scope>chip-cardheader"), { className: "card-header" })
		), header = card.querySelector("chip-cardheader");

		if (this.link) { card.href = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link); }

		if (!header) {
			if (!this.heading.text) { card.querySelector(".card-title")?.remove(); }
			else { card.querySelector(".card-header>chip-header:first-child").size = this.heading.size; }

			if (!this.heading.subtitle) { card.querySelector(".card-subtitle")?.remove(); }

			if (!this.heading.text && !this.heading.subtitle) { card.querySelector(".card-header").remove(); }
		} else {
			header.addEventListener("click", () => this.raiseEvent("headerclick"));
		}

		if (this.innerHTML.trim() !== "") {
			card.appendChild(document.createElementWithContents("div", this.childNodes, { className: "card-body" }));
		}

		this.append(card);
	}
}

/***/ }),

/***/ "./src/modules/components/carousel/carousel-slide.js":
/*!***********************************************************!*\
  !*** ./src/modules/components/carousel/carousel-slide.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CarouselSlide: () => (/* binding */ CarouselSlide)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class CarouselSlide extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["active"];

	constructor() {
		super();

		this.active = this.hasAttribute("active");
	}

	attributeChanged(name, _, newValue) {
		if (name === "active") {
			if (this.IsAttributeValueTrue(newValue)) {
				[...this.closest("chip-carousel")?.querySelectorAll(":scope > div > ul > li > chip-carouselslide") ?? []]
					.forEach(x => x.active = x === this);
			}

			this.closest("chip-carousel")?.querySelector(".carousel__slide-list")?.scrollTo({ left: this.parentElement.offsetLeft, behavior: "smooth" });
		}
	}
}

/***/ }),

/***/ "./src/modules/components/carousel/carousel.js":
/*!*****************************************************!*\
  !*** ./src/modules/components/carousel/carousel.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Carousel: () => (/* binding */ Carousel)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Carousel extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.autoScrollInterval = parseInt(this.getAttribute("auto-scroll-interval")) || 0;
	}

	parsedCallback() {
		const slides = [...this.querySelectorAll(":scope > chip-carouselslide")];

		if (slides.length && !slides.some(x => x.active)) {
			slides.at(0).active = true;
		}

		const activeSlide = slides.find(x => x.active);

		this.appendChild(document.createElementWithContents("div", document.createElementWithContents("ul",
			slides.map(x => document.createElementWithContents("li", x)), {
			className: "carousel__slide-list"
		}), {
			className: "carousel__slide-container"
		}));

		this.append(document.createElementWithContents("chip-button", null, {
			buttonStyle: "icon",
			description: "Previous slide",
			variation: "none",
			onclick: () => this.#GoPrevious(),
			icon: "far fa-chevron-left",
			className: "carousel__action--previous"
		}),
			document.createElementWithContents("chip-button", null, {
				buttonStyle: "icon",
				description: "Next slide",
				variation: "none",
				onclick: () => this.#GoNext(),
				icon: "far fa-chevron-right",
				className: "carousel__action--next"
			}));

		if (activeSlide) {
			this.querySelector(".carousel__slide-list").scrollTo({ left: activeSlide.parentElement.offsetLeft });
		}

		if (this.autoScrollInterval) {
			setInterval(() => {
				this.#GoNext();
			}, this.autoScrollInterval);
		}
	}

	#GoNext() {
		let target = (this.querySelector("chip-carouselslide[active]") ?? this.querySelector("chip-carouselslide"))?.parentElement;

		if (target?.nextElementSibling) {
			target = target?.nextElementSibling.querySelector("chip-carouselslide");
		} else {
			target = this.querySelector("chip-carouselslide");
		}

		if (target) {
			target.active = true;
		}
	}

	#GoPrevious() {
		let target = (this.querySelector("chip-carouselslide[active]") ?? this.querySelector("chip-carouselslide"))?.parentElement;

		if (target?.previousElementSibling) {
			target = target?.previousElementSibling.querySelector("chip-carouselslide");
		} else {
			target = this.querySelector(":scope > div > ul > li:last-child chip-carouselslide");
		}

		if (target) {
			target.active = true;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/checkbox/checkbox.js":
/*!*****************************************************!*\
  !*** ./src/modules/components/checkbox/checkbox.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Checkbox: () => (/* binding */ Checkbox)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Checkbox extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["checked", "value", "helper-text"];
	#Mappers = {};

	constructor() {
		super();

		this.InitializeCheckboxProperties();

		this.type = this.getAttribute("type") ?? "";

		this.#Mappers = {
			name: this.name,
			required: this.required
		};

		if (this.closest("form") && !this.#Mappers.name) { this.#Mappers.name = this.id ?? this.identifier; }
	}

	parsedCallback() {
		this.classList.add("checkbox__wrapper");

		const checkbox = document.createElementWithContents("input", null, {
			id: this.identifier,
			className: `input-field${this.type === "switch" ? " switch" : ""}`.trim(),
			type: "checkbox",
			checked: this.checked,
			value: this.value
		});

		checkbox.addEventListener("change", () => this.checked = checkbox.checked);

		Object.keys(this.#Mappers).filter(x => this.#Mappers[x])
			.forEach(key => checkbox.setAttribute(key, this.#Mappers[key] === true ? "" : this.#Mappers[key]));

		if (this.helperText) {
			this.prepend(document.createElementWithContents("div", this.helperText, {
				className: "input-field__helper-text"
			}));
		}

		if (this.label) { this.prepend(document.createElementWithContents("label", this.label, { htmlFor: this.identifier })); }
		else if (this.innerHTML.trim()) { this.prepend(document.createElementWithContents("label", this.childNodes, { htmlFor: this.identifier })); }

		this.prepend(checkbox);
	}

	checkValidity() {
		const input = this.querySelector("input"),
			isValid = input?.checkValidity() ?? false;

		this.validationMessage = this.GetValidationMessage(input);

		return isValid;
	}

	setInvalid(message) {
		this.querySelector(".input-field__validation-error")?.remove();

		const input = this.querySelector("input"),
			msgElement = document.createElementWithContents("div", message, { className: "input-field__validation-error" });

		if (!this.disableMessages) {
			if (Browser.GetFlavour() === "gov") {
				this.querySelector("input").insertAdjacentElement("beforebegin", msgElement);
			} else {
				this.appendChild(msgElement);
			}
		}

		input.classList.add("input-field__invalid");

		this.querySelectorAll(".input__bound").forEach(x => x.classList.add("input-field__invalid"));
	}

	reportValidity() {
		const validity = this.checkValidity();

		this.querySelector(".input-field__validation-error")?.remove();
		this.querySelectorAll(".input-field__invalid").forEach(x => x.removeClass("input-field__invalid"));

		if (!validity) {
			this.setInvalid(this.validationMessage);
		}

		return validity;
	}

	attributeChanged(name, _, newValue) {
		switch (name) {
			case "checked":
				this.querySelector("input").checked = this.IsAttributeValueTrue(newValue);
				break;
			case "helper-text": {
				const existing = this.querySelector(".input-field__helper-text");

				if (existing) {
					existing.textContent = newValue;
				} else {
					this.appendChild(document.createElementWithContents("div", newValue, {
						className: "input-field__helper-text"
					}));
				}
			}
				break;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/code-block/code-block.js":
/*!*********************************************************!*\
  !*** ./src/modules/components/code-block/code-block.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CodeBlock: () => (/* binding */ CodeBlock)
/* harmony export */ });
/* harmony import */ var _dialog_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dialog/toast */ "./src/modules/dialog/toast.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class CodeBlock extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["autowrap", "language"];

	constructor() {
		super();

		this.language = this.getAttribute("language");
		this.autowrap = this.hasAttribute("autowrap");
		this.hideButton = this.hasAttribute("hide-button");
	}

	parsedCallback() {
		const codeElement = this.querySelector("code"),
			row = document.createElementWithContents("div", document.createElementWithContents("div", null, { className: "col" }), { className: "row" });

		if (codeElement) {
			if (!this.autowrap) {
				codeElement.trimBreaks();
			}

			codeElement.innerHTML = codeElement.innerHTML.trimEnd();

			if (this.language) {
				codeElement.classList.add(`language-${this.language}`);
			}
		}
		this.querySelector("code")?.trimBreaks();

		row.firstElementChild.appendChild(document.createElementWithContents("pre", this.childNodes));

		if (!this.hideButton) {
			const copyButton = document.createElementWithContents("chip-button", null, {
				buttonStyle: "icon",
				icon: "fal fa-copy",
				variation: "body",
				size: "sm",
				className: "btn--copy-code",
				tooltip: "Copy code"
			});

			copyButton.onclick = () => writeClipboardText(codeElement.textContent).then(() => _dialog_toast__WEBPACK_IMPORTED_MODULE_0__.Toast.ShowSuccess(Localizer.COPIED_VALUE));

			row.appendChild(document.createElementWithContents("div", copyButton, { className: "col-auto" }));
		}

		this.appendChild(row);
		this.repaint();
	}

	repaint() {
		const codeElement = this.querySelector("code");
		codeElement.removeAttribute("data-highlighted");

		CodeHighlight.highlightElement(codeElement);
	}

	attributeChanged(name, _, newValue) {
		if (name === "language") {
			const codeElement = this.querySelector("code");

			codeElement.className = "hljs";
			if (newValue) { codeElement.classList.add(`language-${newValue}`); }

			this.repaint();
		}
	}
}

/***/ }),

/***/ "./src/modules/components/colourpicker/colourpicker.js":
/*!*************************************************************!*\
  !*** ./src/modules/components/colourpicker/colourpicker.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColourPicker: () => (/* binding */ ColourPicker)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class ColourPicker extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["value"];

	#hue = 0;
	#saturation = 1;
	#lightness = .5;

	#availablePresets = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetThemeColours();

	#terminateValueSetter = false;
	#suppressInputMode = "";

	#ControlIndex = {
		SpectrumCursor: null,
		SpectrumCanvas: null,
		SpectrumDimensions: null,
		HueCursor: null,
		HueCanvas: null,
		HueDimensions: null,

		Inputs: {
			R: null,
			G: null,
			B: null,

			H: null,
			S: null,
			V: null,

			C: null,
			M: null,
			Y: null,
			K: null,

			Hex: null
		}
	};

	constructor() {
		super();

		let defaultColour = this.closest("[data-theme]")?.dataset.theme === "dark" ? "rgb(255,255,255)" : "rgb(0,0,0)";
		if (this.hasAttribute("presets")) { defaultColour = ""; }

		this.onchange = null;
		this.value = this.getAttribute("value") ?? defaultColour;
		this.size = this.getAttribute("size") ?? "";
		this.label = this.getAttribute("label") ?? "";
		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);
		this.hiddenName = this.getAttribute("hidden-name") ?? "";
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.presets = this.hasAttribute("presets") ? (this.getAttribute("presets") ?? "").toLowerCase().split(",").map(x => x.trim()).filter(x => this.#availablePresets.includes(x) || x === "all") : "";

		if (this.hasAttribute("include-corporate")) { this.#availablePresets.push("chipside", "oppidatim"); }
		if (this.hasAttribute("include-none")) { this.#availablePresets.unshift(""); }

		if (this.presets.includes("all")) {
			this.presets = this.#availablePresets;
		}

		if (this.closest("form") && !this.hiddenName) {
			this.hiddenName = this.id ?? "";
		}
	}

	parsedCallback() {
		if (!this.presets.length) {
			this.#BuildManualPicker();
		} else {
			this.#BuildPresetPicker();
		}
	}

	#BuildPresetPicker() {
		if (!this.#availablePresets.includes(this.value?.toLowerCase())) {
			this.value = "";
		}

		this.innerHTML = `<chip-dropdown button-id="${this.identifier}"></chip-dropdown>`;

		const dropdown = this.querySelector("chip-dropdown"),
			{ label, helperText, hiddenName } = this;

		Object.assign(dropdown, {
			label, helperText, hiddenName,
			value: this.value,
			icon: this.value ? "fas fa-square" : "fal fa-minus-square",
			text: this.value ? toTitleCase(this.value) : "None"
		});

		dropdown.dataset.colour = this.value.toLowerCase();

		if (this.size) { dropdown.size = this.size; }

		dropdown.onchange = () => {
			dropdown.text = toTitleCase(dropdown.value) || "None";
			dropdown.dataset.colour = dropdown.value.toLowerCase();

			dropdown.querySelector(".input-field>button>chip-icon").icon = dropdown.value !== "" ? "fas fa-square" : "fal fa-minus-square";

			this.value = dropdown.value;

			this.raiseEvent("change");
		}

		this.presets.forEach(colour => {
			const preset = document.createElementWithContents("chip-dropdownitem",
				`
					<div class="colour-picker__preset"></div>
				`.trim(), { value: colour.toLowerCase(), tooltip: toTitleCase(colour) || "None" }
			);

			preset.firstElementChild.dataset.colour = colour.toLowerCase();

			if (colour.trim() === "") {
				preset.firstElementChild.appendChild(document.createElementWithContents("chip-icon", null, { icon: "fas fa-ban" }));
			}

			dropdown.appendChild(preset);
		});
	}

	#BuildManualPicker() {
		this.innerHTML =
			`
				<chip-dropdown button-id="${this.identifier}" icon='fas fa-square'>
					<chip-dropdownitem detached>
						<div class="colour-picker--canvas-wrapper">
							<div class="colour-picker__canvas-container spectrum-container">
								<div class="spectrum-cursor"></div>
								<canvas class="spectrum-canvas"></canvas>
							</div>
							<div class="colour-picker__canvas-container hue-container">
								<div class="hue-cursor"></div>
								<canvas class="hue-canvas"></canvas>
							</div>

							<div class="colour-picker__values-wrapper">
								<div class="colour-picker__value-section">
									<chip-input class="colour-picker__rgb-r" orientation="horizontal" type="number" value="0" min="0" size="sm" max="255" label="R"></chip-input>
									<chip-input class="colour-picker__rgb-g" orientation="horizontal" type="number" value="0" min="0" max="255" size="sm" label="G"></chip-input>
									<chip-input class="colour-picker__rgb-b" orientation="horizontal" type="number" value="0" min="0" max="255" size="sm" label="B"></chip-input>
								</div>

								<div class="colour-picker__value-section">
									<chip-input orientation="horizontal" class="colour-picker__hsv-h" type="number" value="0" min="0" size="sm" max="360" label="H"></chip-input>
									<chip-input orientation="horizontal" class="colour-picker__hsv-s" type="number" value="0" min="0" max="100" size="sm" label="S"></chip-input>
									<chip-input orientation="horizontal" class="colour-picker__hsv-v" type="number" value="0" max="100" min="0" size="sm" label="V"></chip-input>
								</div>

								<div class="colour-picker__value-section">
									<chip-input orientation="horizontal" class="colour-picker__cmyk-c" type="number" value="0" min="0" max="100" size="sm" label="C"></chip-input>
									<chip-input orientation="horizontal" class="colour-picker__cmyk-m" type="number" value="0" max="100" min="0" size="sm" label="M"></chip-input>
									<chip-input orientation="horizontal" class="colour-picker__cmyk-y" type="number" value="0" max="100" min="0" size="sm" label="Y"></chip-input>
									<chip-input orientation="horizontal" class="colour-picker__cmyk-k" type="number" value="100" max="100" min="0" size="sm" label="K"></chip-input>
								</div>

								<div class="colour-picker__hex-wrapper">
									<chip-input
										label="Hex"
										value="000000"
										casing="uppercase"
										prefix-icon="fas fa-hashtag"
										size="sm"
										icon-style="integrated"
										maxlength="6">
									</chip-input>
								</div>
							</div>
						</div>
					</chip-dropdownitem>
				</chip-dropdown>
			`.trim();

		const dropdown = this.querySelector("chip-dropdown"),
			{ label, helperText, hiddenName } = this;

		Object.assign(dropdown, {
			text: this.#parseValue(),
			label, helperText, hiddenName
		});

		if (this.size) { dropdown.size = this.size; }

		Object.assign(this.#ControlIndex, {
			SpectrumCursor: dropdown.querySelector(".spectrum-cursor"),
			SpectrumCanvas: dropdown.querySelector(".spectrum-canvas"),
			HueCursor: dropdown.querySelector(".hue-cursor"),
			HueCanvas: dropdown.querySelector(".hue-canvas"),

			Inputs: {
				R: dropdown.querySelector(".colour-picker__rgb-r"),
				G: dropdown.querySelector(".colour-picker__rgb-g"),
				B: dropdown.querySelector(".colour-picker__rgb-b"),

				H: dropdown.querySelector(".colour-picker__hsv-h"),
				S: dropdown.querySelector(".colour-picker__hsv-s"),
				V: dropdown.querySelector(".colour-picker__hsv-v"),

				C: dropdown.querySelector(".colour-picker__cmyk-c"),
				M: dropdown.querySelector(".colour-picker__cmyk-m"),
				Y: dropdown.querySelector(".colour-picker__cmyk-y"),
				K: dropdown.querySelector(".colour-picker__cmyk-k"),

				Hex: dropdown.querySelector(".colour-picker__hex-wrapper chip-input")
			}
		});

		this.#createHueSpectrum();
		dropdown.querySelector(".spectrum-canvas").onmousedown = (event) => this.#OnSpectrumMousedown(event);

		[this.#ControlIndex.Inputs.R, this.#ControlIndex.Inputs.G, this.#ControlIndex.Inputs.B].forEach(x => x.oninput = () => {
			this.#suppressInputMode = "rgb";

			this.#colourToPos(`rgb(${this.#ControlIndex.Inputs.R.value},${this.#ControlIndex.Inputs.G.value},${this.#ControlIndex.Inputs.B.value})`);
		});

		[this.#ControlIndex.Inputs.H, this.#ControlIndex.Inputs.S, this.#ControlIndex.Inputs.V].forEach(x => x.oninput = () => {
			this.#suppressInputMode = "hsv";

			this.#colourToPos(`hsv ${this.#ControlIndex.Inputs.H.value} ${(parseFloat(this.#ControlIndex.Inputs.S.value) || 0) / 100} ${(parseFloat(this.#ControlIndex.Inputs.V.value) || 0) / 100}`);
		});

		[this.#ControlIndex.Inputs.C, this.#ControlIndex.Inputs.M, this.#ControlIndex.Inputs.Y, this.#ControlIndex.Inputs.K].forEach(x => x.oninput = () => {
			this.#suppressInputMode = "cmyk";

			this.#colourToPos(`cmyk ${this.#ControlIndex.Inputs.C.value} ${this.#ControlIndex.Inputs.M.value} ${this.#ControlIndex.Inputs.Y.value} ${this.#ControlIndex.Inputs.K.value}`);
		});

		this.#ControlIndex.Inputs.Hex.oninput = () => {
			this.#suppressInputMode = "hex";

			this.#colourToPos(`#${this.#ControlIndex.Inputs.Hex.value}`);
		}

		if (this.value) {
			const rgb = this.#valueToRGB(this.value);

			this.#hue = this.#rgbToHSL(rgb.r, rgb.g, rgb.b).h;
		}

		this.#UpdateValue(this.value);
		this.#colourToPos(this.value);
		this.#updateSpectrumCanvas(this.value);
	}

	#refreshDimensions() {
		this.#ControlIndex.SpectrumDimensions = this.#ControlIndex.SpectrumCanvas?.getBoundingClientRect();
		this.#ControlIndex.HueDimensions = this.#ControlIndex.HueCanvas?.getBoundingClientRect();
	}

	#createHueSpectrum() {
		const canvas = this.querySelector(".hue-canvas"),
			context = canvas.getContext("2d"),
			gradient = context.createLinearGradient(0, 0, 0, canvas.height);

		gradient.addColorStop(0.00, "hsl(0,100%,50%)");
		gradient.addColorStop(0.17, "hsl(298.8, 100%, 50%)");
		gradient.addColorStop(0.33, "hsl(241.2, 100%, 50%)");
		gradient.addColorStop(0.5, "hsl(180, 100%, 50%)");
		gradient.addColorStop(0.67, "hsl(118.8, 100%, 50%)");
		gradient.addColorStop(0.83, "hsl(61.2,100%,50%)");
		gradient.addColorStop(1, "hsl(360,100%,50%)");

		context.fillStyle = gradient;
		context.fillRect(0, 0, canvas.width, canvas.height);

		canvas.onmousedown = (event) => this.#OnHueMousedown(event);
	}

	#OnHueMousedown(event) {
		const self = this;
		this.#suppressInputMode = "";

		this.#refreshDimensions();

		function onmousemove(ev) {
			ev.preventDefault();

			self.#MoveHueCursor(ev.pageY - self.#ControlIndex.HueDimensions.top - (document.documentElement.scrollTop || document.body.scrollTop));
			self.#UpdateValue(`hsl ${self.#hue} ${self.#saturation} ${self.#lightness}`);
		}

		function onmouseup() {
			window.removeEventListener("mousemove", onmousemove);
			window.removeEventListener("mouseup", onmouseup);
		}

		window.addEventListener("mousemove", onmousemove);
		window.addEventListener("mouseup", onmouseup);

		self.#MoveHueCursor(event.pageY - self.#ControlIndex.HueDimensions.top - (document.documentElement.scrollTop || document.body.scrollTop));
		self.#UpdateValue(`hsl ${self.#hue} ${self.#saturation} ${self.#lightness}`);
	}

	#OnSpectrumMousedown(event) {
		const self = this;
		this.#suppressInputMode = "";

		this.#refreshDimensions();

		function onmousemove(ev) {
			ev.preventDefault();

			self.#MoveSpectrumCursor(ev.pageX - self.#ControlIndex.SpectrumDimensions.left, ev.pageY - self.#ControlIndex.SpectrumDimensions.top - (document.documentElement.scrollTop || document.body.scrollTop));
		}

		function onmouseup() {
			window.removeEventListener("mousemove", onmousemove);
			window.removeEventListener("mouseup", onmouseup);
		}

		window.addEventListener("mousemove", onmousemove);
		window.addEventListener("mouseup", onmouseup);

		self.#MoveSpectrumCursor(event.pageX - self.#ControlIndex.SpectrumDimensions.left, event.pageY - self.#ControlIndex.SpectrumDimensions.top - (document.documentElement.scrollTop || document.body.scrollTop));
	}

	#MoveHueCursor(yPos) {
		const y = Math.max(0, Math.min(this.#ControlIndex.HueDimensions.height, yPos)),
			percent = y / this.#ControlIndex.HueDimensions.height;

		this.#hue = 360 - (360 * percent);

		this.#updateSpectrumCanvas(`hsl ${this.#hue} 1 0.5`);

		Object.assign(this.#ControlIndex.HueCursor.style, {
			top: `${y}px`,
			backgroundColor: `hsl(${this.#hue}, 100%, 50%)`
		});

		this.#ControlIndex.SpectrumCursor.style.backgroundColor = `hsl(${this.#hue}, ${this.#saturation * 100}%, ${this.#lightness * 100}%)`;
		this.#UpdateValue(`hsl ${this.#hue} ${this.#saturation} ${this.#lightness}`);

		this.#terminateValueSetter = true;

		const rgb = this.#valueToRGB(`hsl ${this.#hue} ${this.#saturation} ${this.#lightness}`);
		this.value = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
	}

	#MoveSpectrumCursor(xPos, yPos) {
		let x = Math.min(Math.max(0, xPos - (document.documentElement.scrollLeft || document.body.scrollLeft)), this.#ControlIndex.SpectrumDimensions.width),
			y = Math.min(yPos, this.#ControlIndex.SpectrumDimensions.height);

		if (y < 0) { y = 0.1; }

		const xRatio = x / this.#ControlIndex.SpectrumDimensions.width * 100,
			yRatio = y / this.#ControlIndex.SpectrumDimensions.height * 100;

		const hsvValue = 1 - (yRatio / 100),
			hsvSaturation = xRatio / 100;

		this.#lightness = (hsvValue / 2) * (2 - hsvSaturation) || 0;
		this.#saturation = (hsvValue * hsvSaturation) / (1 - Math.abs(2 * this.#lightness - 1)) || 0;

		this.#UpdateValue(`hsl ${this.#hue} ${this.#saturation} ${this.#lightness}`);

		Object.assign(this.#ControlIndex.SpectrumCursor.style, {
			left: `${x}px`,
			top: `${y}px`,
			backgroundColor: `hsl(${this.#hue}, ${this.#saturation * 100}%, ${this.#lightness * 100}%)`
		});

		this.#terminateValueSetter = true;

		const rgb = this.#valueToRGB(`hsl ${this.#hue} ${this.#saturation} ${this.#lightness}`);
		this.value = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
	}

	#UpdateValue(value) {
		const rgb = this.#valueToRGB(value),
			icon = this.querySelector("chip-dropdown .input-field>button>chip-icon");

		if (this.value) {
			Object.assign(this.querySelector("chip-dropdown"), {
				iconColour: `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`,
				text: `${rgb.r}, ${rgb.g}, ${rgb.b}`,
				value: `${rgb.r}, ${rgb.g}, ${rgb.b}`
			});

			if (icon) {
				icon.icon = "fas fa-square";
			}

			if (this.#suppressInputMode !== "rgb") {
				this.#ControlIndex.Inputs.R.value = rgb.r;
				this.#ControlIndex.Inputs.G.value = rgb.g;
				this.#ControlIndex.Inputs.B.value = rgb.b;
			}

			if (this.#suppressInputMode !== "hsv") {
				const hsv = this.#rgbToHSV(rgb.r, rgb.g, rgb.b);

				this.#ControlIndex.Inputs.H.value = Math.round(hsv.h);
				this.#ControlIndex.Inputs.S.value = Math.round(hsv.s * 100);
				this.#ControlIndex.Inputs.V.value = Math.round(hsv.v * 100);
			}

			if (this.#suppressInputMode !== "hex") { this.#ControlIndex.Inputs.Hex.value = this.#rgbToHex(rgb.r, rgb.g, rgb.b); }

			if (this.#suppressInputMode !== "cmyk") {
				const cmyk = this.#rgbToCMYK(rgb.r, rgb.g, rgb.b);

				this.#ControlIndex.Inputs.C.value = Math.round(cmyk.c);
				this.#ControlIndex.Inputs.M.value = Math.round(cmyk.m);
				this.#ControlIndex.Inputs.Y.value = Math.round(cmyk.y);
				this.#ControlIndex.Inputs.K.value = Math.round(cmyk.k);
			}
		}
	}

	#hsvToHSL(h, s, v, l = v - v * s / 2, m = Math.min(l, 1 - l)) {
		return {
			h,
			s: m ? (v - l) / m : 0,
			l
		};
	}

	#cmykToHSV(c, m, y, k) {
		const rgb = this.#cmykToRGB(c, m, y, k);

		return this.#rgbToHSV(rgb.r, rgb.g, rgb.b);
	}

	#cmykToHSL(c, m, y, k) {
		return this.#rgbToHSL(this.#cmykToRGB(c, m, y, k));
	}

	#cmykToRGB(c, m, y, k) {
		c = (c / 100);
		m = (m / 100);
		y = (y / 100);
		k = (k / 100);

		c = c * (1 - k) + k;
		m = m * (1 - k) + k;
		y = y * (1 - k) + k;

		const r = Math.round((1 - c) * 255);
		const g = Math.round((1 - m) * 255);
		const b = Math.round((1 - y) * 255);

		return { r, g, b };
	}

	#hexToHSV(hex) {
		const rgb = this.#hexToRGB(hex);

		return this.#rgbToHSV(rgb.r, rgb.g, rgb.b);
	}

	#valueToHSV(value) {
		if (value.startsWith("hsv")) { return { h: parseFloat(value.split(" ").at(1)), s: parseFloat(value.split(" ").at(2)), v: parseFloat(value.split(" ").at(3)) } }
		if (value.startsWith("hsl")) { return this.#hslToHSV(parseFloat(value.split(" ").at(1)), parseFloat(value.split(" ").at(2)), parseFloat(value.split(" ").at(3))); }
		if (value.startsWith("#")) { return this.#hexToHSV(value); }
		if (value.startsWith("cmyk")) { return this.#cmykToHSV(parseFloat(value.split(" ").at(1)), parseFloat(value.split(" ").at(2)), parseFloat(value.split(" ").at(3)), parseFloat(value.split(" ").at(4))); }

		const fixed = value.replace("rgb(", "").replace(")", "").replace(/ /g, "").split(",").map(Number);

		return this.#rgbToHSV(fixed.at(0), fixed.at(1), fixed.at(2));
	}

	#valueToHSL(value) {
		if (value.startsWith("hsl")) { return { h: parseFloat(value.split(" ").at(1)), s: parseFloat(value.split(" ").at(2)), l: parseFloat(value.split(" ").at(3)) } }
		if (value.startsWith("hsv")) { return this.#hsvToHSL(parseFloat(value.split(" ").at(1)), parseFloat(value.split(" ").at(2)), parseFloat(value.split(" ").at(3))); }
		if (value.startsWith("#")) { return this.#rgbToHSL(this.#hexToRGB(value)); }
		if (value.startsWith("cmyk")) { return this.#cmykToHSL({ c: parseFloat(value.split(" ").at(1)), m: parseFloat(value.split(" ").at(2)), y: parseFloat(value.split(" ").at(3)), k: parseFloat(value.split(" ").at(3)) }); }

		const fixed = value.replace("rgb(", "").replace(")", "").replace(/ /g, "").split(",").map(Number);

		return this.#rgbToHSL(fixed.at(0), fixed.at(1), fixed.at(2));
	}

	#updateSpectrumCanvas(value) {
		const hsl = this.#valueToHSL(value);

		if (value) {
			const canvas = this.querySelector(".spectrum-canvas"),
				context = canvas.getContext("2d");

			context.clearRect(0, 0, canvas.width, canvas.height);
			context.fillStyle = `hsl(${hsl.h}, ${hsl.s * 100}%, ${hsl.l * 100}%)`;
			context.fillRect(0, 0, canvas.width, canvas.height);

			const whiteGradient = context.createLinearGradient(0, 0, canvas.width, 0);

			whiteGradient.addColorStop(0, "#ffffff");
			whiteGradient.addColorStop(1, "rgba(0, 0, 0, 0)");

			context.fillStyle = whiteGradient;
			context.fillRect(0, 0, canvas.width, canvas.height);

			const blackGradient = context.createLinearGradient(0, 0, 0, canvas.height);

			blackGradient.addColorStop(0, "rgba(0, 0, 0, 0)");
			blackGradient.addColorStop(1, "#000000");

			context.fillStyle = blackGradient;
			context.fillRect(0, 0, canvas.width, canvas.height);
		}
	}

	#colourToPos(colour) {
		this.#refreshDimensions();

		const hsv = this.#valueToHSV(colour);
		this.#hue = hsv.h;

		const x = this.#ControlIndex.SpectrumDimensions.width * hsv.s,
			y = this.#ControlIndex.SpectrumDimensions.height * (1 - hsv.v);

		this.#MoveHueCursor(this.#ControlIndex.HueDimensions.height - ((this.#hue / 360) * this.#ControlIndex.HueDimensions.height));
		this.#MoveSpectrumCursor(x, y);
	}

	#parseValue() {
		if (!this.value) { return "None"; }

		return this.value.toUpperCase().split(",").join(", ");
	}

	#hexToRGB(hex) {
		hex = hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (_, r, g, b) => r + r + g + g + b + b);

		const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

		return result ? {
			r: parseInt(result[1], 16),
			g: parseInt(result[2], 16),
			b: parseInt(result[3], 16)
		} : { r: 0, g: 0, b: 0 };
	}

	#hslToHSV(h, s, l, v = s * Math.min(l, 1 - l) + l) {
		return {
			h,
			s: v ? 2 - 2 * l / v : 0,
			v
		};
	}

	#rgbToHSL(r, g, b) {
		r = Math.min(255, Math.max(0, r)) / 255;
		g = Math.min(255, Math.max(0, g)) / 255;
		b = Math.min(255, Math.max(0, b)) / 255;

		const vmax = Math.max(r, g, b), vmin = Math.min(r, g, b);
		let h, s, l = (vmax + vmin) / 2;

		if (vmax === vmin) {
			return { h: 0, s: 0, l };
		}

		const d = vmax - vmin;
		s = l > 0.5 ? d / (2 - vmax - vmin) : d / (vmax + vmin);

		if (vmax === r) h = (g - b) / d + (g < b ? 6 : 0);
		if (vmax === g) h = (b - r) / d + 2;
		if (vmax === b) h = (r - g) / d + 4;

		h /= 6;
		h *= 360;

		return { h, s, l };
	}

	#rgbToHSV(r, g, b) {
		r = Math.min(255, Math.max(0, r)) / 255;
		g = Math.min(255, Math.max(0, g)) / 255;
		b = Math.min(255, Math.max(0, b)) / 255;

		const max = Math.max(r, g, b),
			min = Math.min(r, g, b);

		let h, s, v = max;
		const d = max - min;

		s = max == 0 ? 0 : d / max;

		if (max == min) {
			h = 0;
		} else {
			switch (max) {
				case r:
					h = (g - b) / d + (g < b ? 6 : 0);
					break;
				case g:
					h = (b - r) / d + 2;
					break;
				case b:
					h = (r - g) / d + 4;
					break;
			}

			h /= 6;
		}

		h *= 360;

		return {
			h, s, v
		};
	}

	#rgbToHex(r, g, b) {
		r = Math.min(255, Math.max(0, r));
		g = Math.min(255, Math.max(0, g));
		b = Math.min(255, Math.max(0, b));

		return [r, g, b].map(x => {
			const hex = x.toString(16)
			return hex.length === 1 ? '0' + hex : hex
		}).join('').toUpperCase();
	}

	#rgbToCMYK(r, g, b) {
		let computedC = 0;
		let computedM = 0;
		let computedY = 0;
		let computedK = 0;

		r = Math.min(255, Math.max(0, r));
		g = Math.min(255, Math.max(0, g));
		b = Math.min(255, Math.max(0, b));

		// Black
		if (r == 0 && g == 0 && b == 0) {
			return {
				c: 0,
				m: 0,
				y: 0,
				k: 100
			};
		}

		computedC = 1 - (r / 255);
		computedM = 1 - (g / 255);
		computedY = 1 - (b / 255);

		const minCMY = Math.min(computedC,
			Math.min(computedM, computedY));

		computedC = (computedC - minCMY) / (1 - minCMY);
		computedM = (computedM - minCMY) / (1 - minCMY);
		computedY = (computedY - minCMY) / (1 - minCMY);
		computedK = minCMY;

		return {
			c: computedC * 100,
			m: computedM * 100,
			y: computedY * 100,
			k: computedK * 100
		};
	}

	#hsvToRGB(value) {
		let hsv = value.split(" ").slice(1).map(x => parseFloat(x)),
			h = Math.min(360, Math.min(0, hsv.at(0))), s = hsv.at(1), v = hsv.at(2);

		let f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);

		return {
			r: Math.round(f(5) * 255),
			g: Math.round(f(3) * 255),
			b: Math.round(f(1) * 255)
		};
	}

	#hslToRGB(value) {
		let hsl = value.split(" ").slice(1).map(x => parseFloat(x)),
			h = hsl.at(0), s = hsl.at(1), l = hsl.at(2);

		let r, g, b;

		h /= 360;

		function hue2rgb(p, q, t) {
			if (t < 0) t += 1;
			if (t > 1) t -= 1;
			if (t < 1 / 6) return p + (q - p) * 6 * t;
			if (t < 1 / 2) return q;
			if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
			return p;
		}
		if (s === 0) {
			r = g = b = l; // Achromatic
		} else {
			const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
			const p = 2 * l - q;

			r = hue2rgb(p, q, h + 1 / 3);
			g = hue2rgb(p, q, h);
			b = hue2rgb(p, q, h - 1 / 3);
		}
		return {
			r: Math.round(r * 255),
			g: Math.round(g * 255),
			b: Math.round(b * 255)
		};
	}

	#valueToRGB(value) {
		if (!value) { return { r: 0, g: 0, b: 0 } };
		if (value.startsWith("#")) { return this.#hexToRGB(value); }
		if (value.startsWith("hsl")) { return this.#hslToRGB(value); }
		if (value.startsWith("hsv")) { return this.#hsvToRGB(value); }
		if (value.startsWith("cmyk")) { return this.#cmykToRGB({ c: parseFloat(value.split(" ").at(1)), m: parseFloat(value.split(" ").at(2)), y: parseFloat(value.split(" ").at(3)), k: parseFloat(value.split(" ").at(3)) }); }

		const fixedValue = value.replace("rgb(", "").replace(")", "").replace(/ /g, "").split(",");

		return {
			r: parseInt(fixedValue.at(0)) || 0,
			g: parseInt(fixedValue.at(1)) || 0,
			b: parseInt(fixedValue.at(2)) || 0
		};
	}

	attributeChanged(name, _, newValue) {
		if (name === "value" && !this.#terminateValueSetter && !this.presets.length) {
			this.#colourToPos(newValue);
			this.#UpdateValue(newValue);
		}

		this.#terminateValueSetter = false;
	}
}

/***/ }),

/***/ "./src/modules/components/contextmenu/context-menu.js":
/*!************************************************************!*\
  !*** ./src/modules/components/contextmenu/context-menu.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextMenu: () => (/* binding */ ContextMenu)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class ContextMenu extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.identifier = crypto.randomUUID();
		this.target = this.getAttribute("target");
		this.onopen = this.getAttribute("onopen");
		this.onopened = this.getAttribute("onopened");
		this.boundarySpacing = parseInt(this.getAttribute("boundary-spacing")) || 5;

		this.refreshTargets();
	}

	refreshTargets() {
		if (this.target) {
			document.querySelectorAll(this.target).forEach(element => {
				element.oncontextmenu = event => this.#OnTargetClick(event);
			});
		}
	}

	static refreshTargets = () => document.querySelectorAll("chip-contextmenu").forEach(menu => menu.refreshTargets());

	parsedCallback() {
		const list = document.createElementWithContents("ul", null, {
			className: "context-menu-items"
		});

		for (const item of [...this.children]) {
			this.addItem(item, false, list);
		}

		this.appendChild(list);
	}

	addItem(item, atStart, list) {
		const listItem = document.createElementWithContents("li", item, {
			className: "context-menu-item"
		}),
			mainList = list ?? this.querySelector(".context-menu-items");

		if (listItem.querySelector("chip-menuitem chip-menuitem")) {
			listItem.classList.add("context-sub-menu-item");
		}

		if (!atStart) {
			mainList.appendChild(listItem);
		} else {
			mainList.prepend(listItem);
		}
	}

	#OnTargetClick(event) {
		if (event.target?.closest("chip-contextmenu")) { return; }

		const attemptedCoords = {
			X: this.#GetXCoord(event),
			Y: this.#GetYCoord(event)
		};

		if (attemptedCoords) {
			this.relatedTarget = event.target;

			if (this.onopen?.(event) !== false) {
				event.preventDefault();
				this.OpenMenu(attemptedCoords.X, attemptedCoords.Y);
			}
		}
	}

	#GetXCoord(event) {
		if (event.pageX) {
			return event.pageX - (document.documentElement?.scrollLeft ?? document.body.scrollLeft);
		} else if (event.clientX) {
			return event.clientX + (document.documentElement?.scrollLeft ?? document.body.scrollLeft);
		}

		return null;
	}

	#GetYCoord(event) {
		if (event.pageY) {
			return event.pageY - (document.documentElement?.scrollTop ?? document.body.scrollTop);
		} else if (event.clientY) {
			return event.clientY + (document.documentElement?.scrollTop ?? document.body.scrollTop);
		}

		return null;
	}

	OpenMenu(x, y) {
		this.onopened?.(this);
		this.OpeningCallback?.(this);

		if (!this.disabled) {
			this.#PositionMenu(x, y);

			this.querySelector(".context-menu-items")?.classList.add("context-menu-shown");
		}
	}

	#GetWidth() {
		return Math.max(parseFloat(window.getComputedStyle(this.querySelector("ul")).width) || 0,
			...Array.from(this.querySelectorAll("ul")).map(x => parseFloat(window.getComputedStyle(x).width) || 0));
	}

	#PositionMenu(x, y) {
		const computed = window.getComputedStyle(this.querySelector("ul"));

		if (computed) {
			const position = {
				y: Math.min(y, document.body.clientHeight - (parseFloat(computed.height) || 0) - this.boundarySpacing),
				x: Math.min(x, document.body.clientWidth - this.#GetWidth() - this.boundarySpacing)
			};

			Object.assign(this.querySelector(".context-menu-items").style, {
				top: `${position.y}px`,
				left: `${position.x}px`
			});
		}
	}

	Close() {
		[...window.document.querySelectorAll(".context-menu-shown")]
			.forEach(x => x.classList.remove("context-menu-shown"));

		document.querySelectorAll(".context-sub-menu-item").forEach(x => x.classList.remove("show"));
	}

	HandleMenuBlurEvent(event) {
		if (event.button !== 2 && !event.target?.closest(".context-menu-item")) {
			this.Close();
		}
	}
}

/***/ }),

/***/ "./src/modules/components/contextmenu/menu-divider.js":
/*!************************************************************!*\
  !*** ./src/modules/components/contextmenu/menu-divider.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MenuDivider: () => (/* binding */ MenuDivider)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class MenuDivider extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	parsedCallback() {
		this.appendChild(document.createElement("hr"));
	}
}

/***/ }),

/***/ "./src/modules/components/contextmenu/menu-item.js":
/*!*********************************************************!*\
  !*** ./src/modules/components/contextmenu/menu-item.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MenuItem: () => (/* binding */ MenuItem)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class MenuItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["suffix-icon"];

	constructor() {
		super();

		this.icon = this.getAttribute("icon") ?? "";
		this.iconColour = this.getAttribute("icon-colour") ?? "";
		this.link = this.getAttribute("link") ?? "";
		this.detached = this.hasAttribute("detached");
		this.target = this.getAttribute("target");
		this.keepOpen = this.hasAttribute("keep-open");
		this.suffixIcon = this.getAttribute("suffix-icon") ?? "";
	}

	parsedCallback() {
		if (this.querySelector("chip-menuitem, chip-menudivider")) {
			this.appendChild(document.createElementWithContents("chip-contextmenu", [...this.children].filter(x => x.matches?.("chip-menuitem, chip-menudivider"))));
		}

		this.onmouseover = ev => {
			ev.stopPropagation();
			this.#HandleMouseOver(ev);
		}

		let elementName = this.link ? "a" : "button";
		if (this.detached) { elementName = "span"; }

		const button = document.createElementWithContents(elementName, [...this.childNodes].filter(x => !x.matches?.("chip-contextmenu")), {
			className: "context-menu-item-btn"
		});

		if (this.link) {
			button.href = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link);

			if (this.target) {
				button.target = this.target;
			}
		} else if (!this.detached) {
			button.type = "button";
		}

		if (this.icon) {
			button.prepend(document.createElementWithContents("chip-icon", null, {
				icon: this.icon,
				colour: this.iconColour
			}));
		}

		if (this.suffixIcon) { button.appendChild(document.createElementWithContents("chip-icon", null, { icon: this.suffixIcon, className: "menu-item__suffix-icon" })); }

		this.removeEventListener("click", this.#HandleClick);
		this.addEventListener("click", this.#HandleClick);

		this.prepend(button);
	}

	#HandleClick() {
		if (!this.keepOpen && !this.closest("li")?.classList.contains("context-sub-menu-item")) {
			this.closest("chip-contextmenu")?.Close();
		}
	}

	#HandleMouseOver(ev) {
		if (ev.target?.nodeName === "UL" || ev.target?.closest("chip-menudivider")) { return; }

		const menu = this.querySelector("ul"),
			subItem = this.closest(".context-sub-menu-item") ?? this;

		[...this.closest("ul").querySelectorAll(".context-sub-menu-item.show")].filter(x => !x.contains(subItem)).forEach(x => x.classList.remove("show"));

		if (menu && subItem && window.getComputedStyle(menu).opacity === "0") {
			Object.assign(menu.style, {
				top: "calc(var(--block-size-xs) * -1)",
				left: "99%"
			});

			const { width, right, bottom } = menu.getBoundingClientRect();

			//The +15 here is because we animate a translation of 15px when showing a menu
			const heightDiff = bottom - (document.body.clientHeight - 5 + 15);
			menu.style.top = heightDiff > 0 ? `-${heightDiff}px` : "calc(var(--block-size-xs) * -1)";

			if (right - (document.body.clientWidth - 5 + 15) > 0) {
				menu.style.left = `-${width}px`;
			}

			subItem.classList.add("show");
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "suffix-icon") {
			this.querySelector(":scope > *> .menu-item__suffix-icon")?.remove();

			if (newValue) {
				this.firstElementChild.appendChild(document.createElementWithContents("chip-icon", null, { icon: newValue, className: "menu-item__suffix-icon" }));
			}
		}
	}
}

/***/ }),

/***/ "./src/modules/components/dateformat/date-format.js":
/*!**********************************************************!*\
  !*** ./src/modules/components/dateformat/date-format.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateFormat: () => (/* binding */ DateFormat)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class DateFormat extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["date"];

	#defaultCulture = "en-GB";

	#presets = {
		longdate: {
			year: "numeric",
			month: "long",
			day: "numeric"
		},
		longtime: {
			hour: "numeric",
			minute: "numeric",
			second: "numeric"
		},
		shortdate: {
			year: "numeric",
			month: "numeric",
			day: "numeric"
		},
		shorttime: {
			hour: "numeric",
			minute: "numeric"
		},
		shortdatetime: {
			year: "numeric",
			month: "numeric",
			day: "numeric",
			hour: "numeric",
			minute: "numeric"
		},
		longdatetime: {
			year: "numeric",
			month: "long",
			day: "numeric",
			hour: "numeric",
			minute: "numeric"
		},
		fulldate: {
			weekday: "long",
			year: "numeric",
			month: "long",
			day: "numeric"
		}
	}

	#now = new Date();

	constructor() {
		super();

		this.date = new Date(this.getAttribute("date") ?? this.#now);
		this.preset = this.getAttribute("preset") ?? "";
		this.formal = this.hasAttribute("formal");
		this.culture = this.getAttribute("lang") || document.documentElement.dataset.culture || navigator.language;
		this.relative = this.hasAttribute("relative");
		this.capitalise = this.hasAttribute("capitalise");
		this.hint = this.getAttribute("hint") ?? "";
	}

	#GetOptions() {
		if (this.preset) { return this.#presets[this.preset.toLowerCase()]; }

		return {};
	}

	#Round(num, threshold = 0.001) {
		if (num > 0) {
			return (num - Math.floor(num)) < 1 - threshold ? Math.floor(num) : Math.ceil(num);
		} else {
			return (Math.ceil(num) - num) < threshold ? Math.floor(num) : Math.ceil(num);
		}
	}

	#GetRelative() {
		const formatter = new Intl.RelativeTimeFormat([this.culture, this.#defaultCulture], { numeric: "auto" }),
			timeDifference = this.date - this.#now;

		const baseUnit = 1000;

		const seconds = this.#Round(timeDifference / baseUnit),
			minutes = this.#Round(timeDifference / (baseUnit * 60)),
			hours = this.#Round(timeDifference / (baseUnit * 3600)),
			days = this.#Round(timeDifference / (baseUnit * 86400), 0.0001),
			weeks = this.#Round(timeDifference / (baseUnit * 604800), 0.00001),
			years = this.#Round(timeDifference / (baseUnit * 31536000), 0.0000001);

		const yearsDiff = this.date.getFullYear() - this.#now.getFullYear();
		const monthsDiff = this.date.getMonth() - this.#now.getMonth();

		const months = yearsDiff * 12 + monthsDiff;

		if (Math.abs(seconds) < 60) {
			return Math.abs(seconds) < 1 ? formatter.format(0, 'second') : formatter.format(seconds, "seconds");
		} else if (Math.abs(minutes) < 60) {
			return formatter.format(minutes, 'minutes');
		} else if (Math.abs(hours) < 24) {
			return formatter.format(hours, 'hours');
		} else if (Math.abs(days) < 7) {
			return formatter.format(days, 'days');
		} else if (Math.abs(weeks) < 5) {
			return formatter.format(weeks, 'weeks');
		} else if (Math.abs(months) < 12) {
			return formatter.format(months, 'months');
		} else {
			return formatter.format(years, 'years');
		}
	}

	#process() {
		if (!this.relative) { this.innerHTML = new Intl.DateTimeFormat([this.culture, this.#defaultCulture], this.#GetOptions()).format(this.date); }
		else { this.innerHTML = this.#GetRelative(); }

		if (this.capitalise) { this.innerHTML = capitalise(this.innerHTML.trim()); }
		if (this.hint) {
			const hint = new Intl.DateTimeFormat([this.culture, this.#defaultCulture], this.#presets[this.hint.toLowerCase()]).format(this.date);

			if (hint !== this.innerHTML.trim()) {
				this.tooltip = hint;
			}
		}
	}

	parsedCallback() {
		this.#process();
	}

	attributeChanged(name, _, __) {
		if (name === "date") {
			this.#process();
		}
	}
}

/***/ }),

/***/ "./src/modules/components/dropdown/dropdown-divider.js":
/*!*************************************************************!*\
  !*** ./src/modules/components/dropdown/dropdown-divider.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownDivider: () => (/* binding */ DropdownDivider)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class DropdownDivider extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	parsedCallback() {
		this.appendChild(document.createElementWithContents("hr", null, { className: "dropdown__divider" }));
	}
}

/***/ }),

/***/ "./src/modules/components/dropdown/dropdown-group.js":
/*!***********************************************************!*\
  !*** ./src/modules/components/dropdown/dropdown-group.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownGroup: () => (/* binding */ DropdownGroup)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class DropdownGroup extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.label = this.getAttribute("label") ?? "";
		this.size = this.getAttribute("size") ?? "5";
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("chip-header", this.label, { size: this.size }));
	}
}

/***/ }),

/***/ "./src/modules/components/dropdown/dropdown-header.js":
/*!************************************************************!*\
  !*** ./src/modules/components/dropdown/dropdown-header.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownHeader: () => (/* binding */ DropdownHeader)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class DropdownHeader extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.size = this.getAttribute("size") ?? "5";
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("chip-header", this.childNodes, { size: this.size }));
	}
}

/***/ }),

/***/ "./src/modules/components/dropdown/dropdown-item.js":
/*!**********************************************************!*\
  !*** ./src/modules/components/dropdown/dropdown-item.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownItem: () => (/* binding */ DropdownItem)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class DropdownItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["value", "disabled", "link", "group", "suffix-icon", "icon"];

	constructor() {
		super();

		this.value = this.getAttribute("value");
		this.icon = this.getAttribute("icon") ?? "";
		this.variation = this.getAttribute("variation");
		this.iconColour = this.getAttribute("icon-colour");
		this.identifier = this.getAttribute("identifier") ?? "";
		this.link = this.getAttribute("link") ?? "";
		this.target = this.getAttribute("target");
		this.group = this.getAttribute("group");
		this.detached = this.hasAttribute("detached");
		this.download = this.getAttribute("download");
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.suffixIcon = this.getAttribute("suffix-icon") ?? "";
	}

	parsedCallback() {
		if (this.icon) { this.prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon, className: "dropdown-item__icon", colour: this.iconColour })); }
		if (this.helperText) { this.appendChild(document.createElementWithContents("span", this.helperText, { className: "dropdown-item__helper-text" })); }
		if (this.suffixIcon) { this.appendChild(document.createElementWithContents("chip-icon", null, { icon: this.suffixIcon, className: "dropdown-item__suffix-icon" })); }
	}

	attributeChanged(name, _, newValue) {
		switch (name) {
			case "disabled":
				if (!this.IsAttributeValueTrue(newValue)) {
					this.parentElement.removeAttribute("disabled");
				} else {
					this.parentElement.setAttribute("disabled", "");
				}
				break;
			case "link":
				if (this.parentElement.nodeName === "A") {
					this.parentElement.href = newValue;
				}
				break;
			case "suffix-icon":
				this.querySelector(":scope > .dropdown-item__suffix-icon")?.remove();

				if (newValue) {
					this.appendChild(document.createElementWithContents("chip-icon", null, { icon: newValue, className: "dropdown-item__suffix-icon" }));
				}
				break;
			case "icon":
				this.querySelector(":scope > .dropdown-item__icon")?.remove();

				if (newValue) {
					this.prepend(document.createElementWithContents("chip-icon", null, { icon: newValue, className: "dropdown-item__icon", colour: this.iconColour }));
				}
				break;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/dropdown/dropdown.js":
/*!*****************************************************!*\
  !*** ./src/modules/components/dropdown/dropdown.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dropdown: () => (/* binding */ Dropdown)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _button_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../button/button */ "./src/modules/components/button/button.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");




class Dropdown extends _auxilium_component__WEBPACK_IMPORTED_MODULE_2__.AuxiliumComponent {
	static observedAttributes = ["value", "static", "icon-colour", "text", "icon", "size", "suffix-icon", "description", "label", "required"];

	#GetInitialItems = null;
	#GetSearchedItems = null;

	#stopReset = false;
	#stopSearch = false;

	#searchTimeout = 500;

	#preventClose = false;
	#invalid = false;

	#previousValue = "";

	constructor() {
		super();

		this.label = this.getAttribute("label") ?? "";
		this.secondaryLabel = this.getAttribute("secondary-label") ?? "";
		this.limitHeight = this.hasAttribute("limit-height");
		this.value = this.getAttribute("value") ?? "";
		this.searchable = this.hasAttribute("searchable");
		this.required = this.hasAttribute("required");
		this.initialValue = this.value;
		this.buttonID = this.getAttribute("button-id") ?? crypto.randomUUID().slice(0, 8);
		this.static = this.hasAttribute("static");
		this.default = this.getAttribute("default") ?? "";
		this.selectOnArrow = this.hasAttribute("select-on-arrow");
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.orientation = this.getAttribute("orientation");
		this.readonly = this.getAttribute("readonly") ?? false;
		this.icon = this.getAttribute("icon") ?? "";
		this.localSearch = this.hasAttribute("local-search");
		this.size = this.getAttribute("size");
		this.description = this.getAttribute("description");
		this.text = this.getAttribute("text") ?? "";
		this.searchableLabel = this.getAttribute("searchable-label") ?? "";
		this.hiddenId = this.getAttribute("hidden-id");
		this.hiddenName = this.getAttribute("hidden-name");
		this.open = this.hasAttribute("open");
		this.dropdownStyle = this.getAttribute("dropdown-style") ?? "";
		this.variation = this.getAttribute("variation") ?? "";

		this.selectedItem = null;

		if (this.closest("form") && !this.hiddenName) {
			this.hiddenName = this.id;
		}

		this.selectedText = "";

		this.classList.add("dropdown__wrapper");
	}

	get GetInitialItems() {
		return this.#GetInitialItems;
	}

	set GetInitialItems(val) {
		this.#GetInitialItems = val;

		if (this.localSearch) {
			Promise.resolve(val?.() ?? []).then(items => {
				this.#GetInitialItems = () => items;

				this.GetSearchedItems = value => SearchArray(items, value, "textContent", 0);
				this.#searchTimeout = 0;

				this.#ResetInitialSearch(true);
			});
		} else {
			this.#ResetInitialSearch(true);
		}
	}

	get GetSearchedItems() {
		return this.#GetSearchedItems;
	}

	set GetSearchedItems(val) {
		this.#GetSearchedItems = val;
		this.#searchTimeout = 500;
	}

	async parsedCallback() {
		if (!this.static) {
			this.static = this.closest("chip-dropdownbutton, chip-splitbutton")?.querySelector("chip-dropdown") === this || this.parentElement?.nodeName === "CHIP-DROPDOWNITEM";
		}

		const wrapper = document.createElementWithContents("div", null, { className: this.static ? "" : "input-field" });

		if (this.static) {
			wrapper.classList.add("dropdown__static");
		}

		const button = document.createElementWithContents("button", null, {
			type: "button",
			className: "btn--dropdown-trigger",
			id: this.buttonID,
			ariaExpanded: false,
			onclick: this.#OnButtonClick
		});

		if (!this.static && !this.closest("chip-splitbutton")) {
			if (!this.text && !this.value && !this.default && this.parentElement?.nodeName !== "CHIP-INPUT") {
				this.value = this.querySelector("chip-dropdownitem")?.value;
			}

			let buttonContent = this.text;
			if (!buttonContent || this.value) { buttonContent = this.querySelector(`chip-dropdownitem[value='${this.value}']`)?.innerHTML.trim() ?? (this.default || this.text); }

			button.appendChild(document.createElementWithContents("span", buttonContent || "&nbsp;"));
		}

		if (this.description && !button.textContent?.trim() && !document.querySelector(`[for='${this.buttonID}']`)) { button.ariaLabel = this.description; }

		if (this.icon) { button.prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon })); }
		if (this.size) { button.classList.add(`btn--${this.size.toLowerCase()}`); }

		let items = [...this.children].map(x => x.cloneNode(true));

		if (this.children.length) {
			this.#GetInitialItems = () => items;

			if (!this.GetSearchedItems) {
				this.GetSearchedItems = value => SearchArray(items, value, "textContent", 0);
				this.#searchTimeout = 0;
			}
		}

		if (this.label || this.secondaryLabel) {
			const label = document.createElementWithContents("label", this.label, {
				htmlFor: this.buttonID,
				className: "input-field__label"
			});

			if (this.secondaryLabel) { label.appendChild(document.createElementWithContents("span", this.secondaryLabel, { className: "input-field__label--secondary" })); }

			this.appendChild(label);
		}

		if (this.hiddenId || this.hiddenName) {
			const hiddenInput = document.createElementWithContents("input", null, {
				type: "hidden",
				value: this.value
			});

			if (this.hiddenId) { hiddenInput.id = this.hiddenId; }
			if (this.hiddenName) { hiddenInput.name = this.hiddenName; }

			wrapper.appendChild(hiddenInput);
		}

		if (!["CHIP-INPUT", "CHIP-DROPDOWNITEM"].includes(this.parentElement?.nodeName)) {
			wrapper.appendChild(button);
		}

		const list = document.createElementWithContents("ul", null, {
			className: "dropdown__list"
		});

		if (this.limitHeight) { list.classList.add("limit-height"); }

		list.setAttribute("aria-labelledby", this.buttonID);
		list.onclick = ev => ev.halt();

		this.#InitializeItemSet([...this.querySelectorAll(":scope > chip-dropdownitem, :scope > chip-dropdowndivider, :scope > chip-dropdowngroup, :scope > chip-dropdownheader")], list);

		let keys = "",
			timeout;

		if (this.searchable) {
			this.#BuildSearchableDropdown(list);
		}

		wrapper.appendChild(list);
		this.appendChild(wrapper);

		if (this.helperText) {
			const helperTextMethod = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() === "gov" ? "beforebegin" : "afterend";

			wrapper.insertAdjacentElement(helperTextMethod, document.createElementWithContents("div", this.helperText, {
				className: "input-field__helper-text"
			}));
		}

		if (this.closest("chip-dropdownbutton")?.querySelector("chip-dropdown") === this) {
			this.#InitDropdownButton();
		}

		this.onkeydown = ev => {
			if (this.readonly) { return; }
			if (!["Enter", "Tab", "Shift"].includes(ev.key) && !this.classList.contains("dropdown--open")) { this.Open(); }

			switch (ev.key) {
				case "Escape":
					this.Close();
					this.closest("chip-input")?.focus();

					keys = "";
					break;
				case "ArrowDown":
					this.ArrowDown(ev);
					break;
				case "ArrowUp":
					this.ArrowUp(ev);
					break;
				default:
					if (timeout) {
						clearTimeout(timeout);
					}

					timeout = setTimeout(() => keys = "", 1000);

					keys += ev.key.toLowerCase();

					[...list.querySelectorAll("chip-dropdownitem")].find(x => x.textContent.trim().toLowerCase().indexOf(keys) === 0)?.parentElement.focus();

					if (ev.code === "Space") {
						ev.preventDefault();
					}
					break;
			}
		}
	}

	ArrowDown(ev) {
		ev.preventDefault();
		ev.stopPropagation();

		const items = [...this.querySelectorAll(".dropdown__list > li")].filter(x => !!x.querySelector("chip-dropdownitem")),
			currentIndex = items.indexOf(document.activeElement?.closest("li")),
			item = (items.at(currentIndex + 1) ?? items.at(0)).querySelector(":scope > button, :scope > a");

		if (item && this.selectOnArrow) {
			this.#SelectItem(item, true);
		}

		item?.focus();
	}

	ArrowUp(ev) {
		ev.preventDefault();
		ev.stopPropagation();

		const items = [...this.querySelectorAll(".dropdown__list > li")].filter(x => !!x.querySelector("chip-dropdownitem")),
			currentIndex = items.indexOf(document.activeElement?.closest("li")),
			item = items.at(currentIndex - 1)?.querySelector(":scope > button, :scope > a");

		if (item && this.selectOnArrow) {
			this.#SelectItem(item, true);
		}

		item?.focus();
	}

	#InitializeItemSet(set, list) {
		list ??= this.querySelector(".dropdown__list");

		if (list) {
			list.querySelectorAll(":scope > li:not(.dropdown--static-search)").forEach(x => x.remove());

			const groups = GroupBy(set, x => x.group != null ? x.group : "None"),
				keys = Object.keys(groups).sort(SortCaseInsensitive);

			if (keys.find(x => x !== "None") != null) {
				// Move the ungrouped section to the end
				if (keys.includes("None")) { keys.splice(keys.length - 1, 0, ...keys.splice(keys.indexOf("None"), 1)); }

				for (const key of keys) {
					if (key) {
						this.AddItem(document.createElementWithContents("chip-dropdowngroup", null, { label: key }), list);
					}

					for (const item of groups[key]) {
						this.AddItem(item, list);
					}
				}
			} else {
				for (const item of set) {
					this.AddItem(item, list);
				}
			}

			this.Reposition(list);
		}
	}

	#BuildDropdownButton(item) {
		let element = document.createElement("div"),
			hasDropdown = !!item.querySelector("chip-dropdown");

		if (!item.detached) {
			if (item.link) {
				element = document.createElementWithContents("a", null, { href: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(item.link) });
			} else {
				element = !hasDropdown
					? document.createElementWithContents("button", null, { type: "button" })
					: document.createElementWithContents("span");
			}

			if (item.link && item.download) { element.download = item.download; }
		}

		if (item.disabled) { element.setAttribute("disabled", ""); }
		if (item.target) { element.target = item.target; }
		if (item.identifier) { element.id = item.identifier; }

		element.appendChild(item);

		return element;
	}

	AddItem(item, list) {
		list ??= this.querySelector(".dropdown__list");

		if (list) {
			let listItem = document.createElement("li");

			switch (item.nodeName) {
				case "CHIP-DROPDOWNITEM":
					{
						let element = this.#BuildDropdownButton(item);
						listItem.appendChild(element);

						if (!item.detached) {
							const nestedDropdown = element.querySelector("chip-dropdown");

							if (!this.static && item.getAttribute("value") === this.value) {
								element.classList.add("active");

								this.selectedItem = item;
								this.selectedText = item.textContent.trim();
							}

							element.onmouseover = ev => {
								ev.stopPropagation();

								[...element.closest("chip-dropdown").querySelectorAll("chip-dropdown.dropdown--open")].filter(x => !x.contains(element)).forEach(x => x.Close());

								nestedDropdown?.Open();
							}

							if (!nestedDropdown) {
								element.onclick = ev => {
									ev.stopPropagation();

									if (this.static && !ev.target?.closest("chip-dropdownitem")) {
										element.querySelector("chip-dropdownitem")?.raiseEvent("click");
									}

									if (!this.readonly) {
										if (this.value === item.getAttribute("value") || !item.hasAttribute("value")) {
											this.raiseEvent("selectionchange");
										}

										this.value = item.getAttribute("value") ?? "";

										element.closest("chip-dropdown:not(chip-dropdownitem>chip-dropdown)")?.Close();
									}
								}
							}
						}
						break;
					}
				case "CHIP-DROPDOWNHEADER":
				case "CHIP-DROPDOWNDIVIDER":
					listItem.appendChild(item);
					break;
				case "CHIP-DROPDOWNGROUP":
					listItem.classList.add("dropdown__group-header");
					listItem.appendChild(item);
					break;
			}

			list.appendChild(listItem);
		}
	}

	async #ResetInitialSearch(showPrompt, list) {
		list ??= this.querySelector(".dropdown__list");

		if (list) {
			list.querySelectorAll(":scope > li:not(.dropdown--static-search)").forEach(x => x.remove());
			list.querySelector(".dropdown--searchable__prompt--initial")?.remove();

			list.querySelector(".pv-loading-container")?.classList.remove("d-none");
			list.querySelectorAll("chip-emptyprompt").forEach(x => x.classList.add("d-none"));

			const initialResults = this.GetInitialItems ? await this.GetInitialItems() : [];

			list.querySelector(".pv-loading-container")?.classList.add("d-none");

			if (this.#stopReset) {
				this.#stopReset = false;
				return;
			}

			if (initialResults.length) {
				this.#InitializeItemSet(initialResults, list);

				if (this.value) {
					this.#SelectValue(this.value, true);
				}
			} else if (showPrompt) {
				list.querySelector(".dropdown--searchable__prompt--empty")?.remove();
				this.#AddNoSearchPrompt(list);
			}
		}
	}

	#CancelReset() {
		this.#stopReset = true;
		this.#stopSearch = false;
	}

	#CancelSearch() {
		this.#stopSearch = true;
		this.#stopReset = false;
	}

	RefreshItems(list) {
		list ??= this.querySelector(".dropdown__list");

		if (list) {
			this.#CancelSearch();
			this.#ResetInitialSearch(true, list);
		}
	}

	#AddEmptySearchPrompt(list) {
		list ??= this.querySelector(".dropdown__list");

		list?.querySelector(".dropdown--searchable__wrapper")?.appendChild(document.createElementWithContents("chip-emptyprompt", "Try adjusting your search and we'll have another look", {
			size: "sm",
			heading: "No results found",
			icon: "fas fa-file-alt",
			className: "dropdown--searchable__prompt--empty"
		}));
	}

	#AddNoSearchPrompt(list) {
		list ??= this.querySelector(".dropdown__list");

		list?.querySelector(".dropdown--searchable__wrapper")?.appendChild(document.createElementWithContents("chip-emptyprompt", "Before we can show you anything, try making a search", {
			size: "sm",
			heading: "Make a search",
			icon: "far fa-search",
			className: "dropdown--searchable__prompt--initial"
		}));
	}

	async Search(value, list) {
		list ??= this.querySelector(".dropdown__list");

		if (list) {
			list.querySelectorAll(":scope > li:not(.dropdown--static-search)").forEach(x => x.remove());

			if (value.trim() !== "") {
				list.querySelector(".dropdown--searchable__prompt--initial")?.remove();
				this.#CancelReset();

				list.querySelector(".pv-loading-container")?.classList.remove("d-none");
				list.querySelectorAll("chip-emptyprompt").forEach(x => x.classList.add("d-none"));

				const results = this.GetSearchedItems ? await this.GetSearchedItems(value) : [];

				list.querySelector(".pv-loading-container")?.classList.add("d-none");

				if (this.#stopSearch) {
					this.#stopSearch = false;
					return;
				}

				this.#InitializeItemSet(results, list);

				if (this.value && this.#GetItemFromValue(this.value)) {
					this.#SelectValue(this.value, true);
				}

				list.querySelector(".dropdown--searchable__prompt--empty")?.remove();

				if (!results.length) {
					this.#ResetInitialSearch(false, list);

					if (list.children.length === 1) {
						this.#AddEmptySearchPrompt(list);
					}
				}
			} else {
				this.#AddNoSearchPrompt(list);
				this.RefreshItems(list);
			}
		} else {
			this.addEventListener("parsed", () => {
				this.Search(value, list);
			});
		}
	}

	#BuildSearchableDropdown(list) {
		let timeout;

		list.prepend(document.createElementWithContents("li",
			`
				<div class="dropdown--searchable__wrapper">
					<chip-input description="Search dropdown" placeholder="Search" icon-style="integrated" prefix-icon="far fa-search"></chip-input>

					<div class="pv-loading-container d-none mt-xxl mb-xl"><div class="pv-loading-icon"></div></div>
				</div>
			`.trim(), { className: "dropdown--static-search" }));

		this.#ResetInitialSearch(true, list);

		const input = list.querySelector("chip-input");

		input.onparsed = () => this.Reposition();

		input.onkeydown = ev => {
			ev.stopImmediatePropagation();
			ev.stopPropagation();

			switch (ev.key) {
				case "Enter":
					clearTimeout(timeout);

					this.Search(input.value, list);
					break;
				case "Escape":
					this.Close();
					break;
				case "ArrowDown":
					this.ArrowDown(ev);
					break;
				case "ArrowUp":
					this.ArrowUp(ev);
					break;
			}
		}

		input.oninput = () => {
			if (timeout) {
				clearTimeout(timeout);
			}

			timeout = setTimeout(() => {
				this.Search(input.value, list);
			}, this.#searchTimeout);
		}
	}

	#InitDropdownButton() {
		const button = this.querySelector(":scope > div > button"),
			dropdownButton = this.closest("chip-dropdownbutton");

		button.append(...[...dropdownButton.childNodes ?? []].filter(x => !x.matches?.("chip-dropdown")));
		button.classList.add("btn--base", _button_button__WEBPACK_IMPORTED_MODULE_1__.Button.ClassFromVariation(dropdownButton.variation));

		if (dropdownButton.buttonStyle) {
			button.classList.add(`btn--${dropdownButton.buttonStyle.toLowerCase()}`);
		}
	}

	#OnButtonClick(event) {
		event.preventDefault();

		const dropdown = event.target?.closest("chip-dropdown");

		if (dropdown.open || !dropdown.querySelector(".dropdown__list > *")) {
			dropdown?.Close();
		} else {
			dropdown?.Open();
		}
	}

	Reposition(list) {
		list ??= this.querySelector(".dropdown__list");

		if (list?.parentElement) {
			list.removeAttribute("style");
			this.classList.add("dropdown--open");

			const containerDimensions = list.parentElement.getBoundingClientRect(),
				parent = getScrollParent(list);

			const comparatorDimensions = document.body !== parent ? parent.getBoundingClientRect() : {
				bottom: window.innerHeight,
				right: window.innerWidth,
				top: 0,
				left: 0
			},
				{ height, top, width, left } = list.getBoundingClientRect();

			if (height + top > comparatorDimensions.bottom && comparatorDimensions.top <= containerDimensions.top - height - containerDimensions.height) {
				list.style.top = `calc(-${height}px - ((var(--dropdown-spacing) * 2) + var(--input-border-width)))`;
			}

			if (width + left > comparatorDimensions.right) {
				list.style.left = `-${width - containerDimensions.width}px`;
			}

			const newLeft = list.getBoundingClientRect().left;

			if (!this.open) {
				this.classList.remove("dropdown--open");
			}

			if (newLeft < comparatorDimensions.left) {
				list.style.left = `${parseInt(window.getComputedStyle(list).left) + (Math.abs(newLeft - comparatorDimensions.left))}px`;
			}
		}
	}

	Open() {
		this.Reposition();
		this.classList.add("dropdown--open");

		this.querySelector(".dropdown__list chip-input")?.select();
		this.raiseEvent("opened");

		this.open = true;
	}

	Close() {
		const list = this.querySelector(".dropdown__list");

		if (list) {
			this.removeClass("dropdown--open");
			list.removeAttribute("style");
		}

		this.open = false;
	}

	#SelectItem(item, preventClose) {
		const isIconPicker = !!this.closest("chip-iconpicker"),
			button = this.querySelector(":scope > div > button > span");

		if (item) {
			this.#preventClose = preventClose;

			const valueChanged = this.#previousValue?.toString() !== item.firstElementChild?.value?.toString() && this.selectedItem !== item.firstElementChild;

			this.selectedItem = item.firstElementChild;
			this.selectedText = item.textContent.trim();

			this.value = item.firstElementChild?.value?.toString();

			if (this.hiddenId || this.hiddenName) {
				this.querySelector("input[type='hidden']").value = this.value;
			}

			if (!isIconPicker && !this.static && button) {
				const dropdownItem = item.querySelector(":scope > chip-dropdownitem");

				if (dropdownItem?.childNodes.length) {
					button.innerHTML = "";

					button.append(...[...dropdownItem.childNodes].filter(x => !x.matches?.(".dropdown-item__helper-text, .dropdown-item__suffix-icon")).map(x => x.cloneNode()));
				} else {
					button.innerHTML = this.default;
				}
			}

			if (!this.static || isIconPicker) {
				this.querySelector(".active")?.removeClass("active");
				item.classList.add("active");
			}

			this.raiseEvent("selectionchange");
			if (!preventClose) { this.Close(); }
			if (valueChanged) { this.raiseEvent("change"); }
		} else if (!isIconPicker && !this.static && button) {
			button.textContent = this.default;
		}

		if (this.#invalid) {
			this.reportValidity();
			this.closest("chip-form")?.checkValidity();
		}
	}

	attributeChanged(name, oldValue, newValue) {
		switch (name) {
			case "value":
				this.#previousValue = oldValue;

				this.#SelectValue(newValue, this.#preventClose);
				this.#preventClose = false;
				break;
			case "label":
				{
					const label = this.querySelector(".input-field__label");

					if (label) {
						label.textContent = newValue;
					}
				}
				break;
			case "static":
				{
					const container = this.querySelector("div");

					if (!this.IsAttributeValueTrue(newValue)) {
						container.classList.remove("dropdown__static");
						container.classList.add("input-field");

						if (!this.querySelector(":scope > div > button > span")) {
							this.querySelector(":scope > div > button")?.appendChild(document.createElementWithContents("span", "&nbsp"));
						}
					} else {
						container.classList.add("dropdown__static");
						container.classList.remove("input-field");

						this.querySelector(":scope > div > button > span")?.remove();

						this.querySelectorAll(".active").forEach(x => x.removeClass("active"));
					}
				}
				break;
			case "description":
				{
					const button = this.querySelector(":scope > div > button");

					if (button && !button.textContent?.trim() && !document.querySelector(`[for='${button.id}']`)) {
						button.ariaLabel = newValue;
					}
				}
				break;
			case "icon-colour":
				if (!newValue) {
					this.querySelector(".input-field > button > chip-icon").removeAttribute("style");
				} else {
					this.querySelector(".input-field > button > chip-icon").style.color = newValue;
				}
				break;
			case "text":
				this.querySelector(":scope > div > button > span").textContent = newValue;
				break;
			case "size":
				{
					const button = this.querySelector(":scope > div > button");

					button?.classList.remove(`btn--${this.size?.toLowerCase()}`);
					button?.classList.add(`btn--${newValue.toLowerCase()}`);
				}
				break;
			case "icon": {
				const icon = this.querySelector(":scope > div > button > chip-icon");

				if (icon) {
					icon.icon = newValue;
				} else {
					this.querySelector(":scope > div > button")?.prepend(document.createElementWithContents("chip-icon", null, { icon: newValue }));
				}
			}
				break;
			case "suffix-icon": {
				const icon = this.querySelector(":scope > div > button > chip-icon:last-child:not(:first-child)");

				if (icon) {
					icon.icon = newValue;
				} else {
					this.querySelector(":scope > div > button")?.appendChild(document.createElementWithContents("chip-icon", null, { icon: newValue }));
				}
			}
				break;
		}
	}

	checkValidity() {
		if (this.required && ["", undefined, null].includes(this.value)) {
			this.validationMessage = Localizer.DROPDOWN_REQUIRED;
			return false;
		} else {
			return true;
		}
	}

	setInvalid(message) {
		const msgElement = document.createElementWithContents("div", message, { className: "input-field__validation-error" });
		this.querySelector(".input-field")?.classList.add("input-field__invalid");

		if (_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() === "gov") {
			this.querySelector(":scope > div").insertAdjacentElement("beforebegin", msgElement);
		} else {
			this.appendChild(msgElement);
		}
	}

	reportValidity() {
		const valid = this.checkValidity();

		this.querySelector(".input-field__validation-error")?.remove();
		this.querySelector(".input-field")?.classList.remove("input-field__invalid");

		if (!valid) {
			this.setInvalid(this.validationMessage);
		}

		this.#invalid = !valid;

		return valid;
	}

	#GetItemFromValue(value) {
		value ??= "";

		return this.querySelector(`chip-dropdownitem[value='${value}']`)
			?? [...this.querySelectorAll("chip-dropdownitem")].find(x => x.value?.toString() === value.toString() || x.getAttribute("value")?.toString() === value?.toString());
	}

	SelectText(text) {
		const target = [...this.querySelectorAll("chip-dropdownitem")].find(x => x.textContent?.trim() === text.trim());

		if (target) {
			this.#SelectValue(target.value ?? target.getAttribute("value"));
		}
	}

	#SelectValue(value, preventClose) {
		const target = this.#GetItemFromValue(value);

		if (target) {
			this.#SelectItem(target.closest("button, a"), preventClose);
		} else if (!this.static && this.default) {
			this.querySelector(":scope > div > button > span").textContent = this.default;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/emptyprompt/prompt.js":
/*!******************************************************!*\
  !*** ./src/modules/components/emptyprompt/prompt.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Prompt: () => (/* binding */ Prompt)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Prompt extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["size", "icon"];

	constructor() {
		super();

		this.icon = this.getAttribute("icon") ?? "";
		this.heading = this.getAttribute("heading") ?? "";
		this.size = this.getAttribute("size") ?? "";
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("div", this.childNodes, { className: "prompt__description" }));

		if (this.heading) { this.prepend(document.createElementWithContents("div", this.heading, { className: "prompt__title" })); }
		if (this.icon) { this.prepend(document.createElementWithContents("div", document.createElementWithContents("chip-icon", null, { icon: this.icon }), { className: "prompt__icon" })); }
	}

	attributeChanged(name, _, newValue) {
		if (name === "icon") {
			let element = this.querySelector(".prompt__icon");

			if (!element) {
				element = document.createElementWithContents("div", document.createElementWithContents("div", document.createElementWithContents("chip-icon", null, { icon: this.icon }), { className: "prompt__icon" }));
			}

			element.querySelector("chip-icon").icon = newValue;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/form/form-section.js":
/*!*****************************************************!*\
  !*** ./src/modules/components/form/form-section.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FormSection: () => (/* binding */ FormSection)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class FormSection extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.heading = this.getAttribute("heading");
		this.description = this.getAttribute("description") ?? "";
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("div", this.childNodes, { className: "form-group__column-fields" }));

		const descriptionColumn = document.createElementWithContents("div",
			document.createElementWithContents("div", this.description, { className: "form-group__section-description" }), { className: "form-group__column-description" });

		if (this.heading) {
			descriptionColumn.prepend(document.createElementWithContents("chip-header", this.heading, { size: "4" }));
		}

		this.prepend(descriptionColumn);
	}
}

/***/ }),

/***/ "./src/modules/components/form/form.js":
/*!*********************************************!*\
  !*** ./src/modules/components/form/form.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Form: () => (/* binding */ Form)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Form extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["readonly"];

	constructor() {
		super();

		this.readonly = this.hasAttribute("readonly");
		this.centreRows = this.hasAttribute("centre-rows");
	}

	#DefaultOptions = {
		ProcessCheckboxes: true,
		AllowUncheckedBoxes: false
	}

	#getAllControls() {
		return [...this.querySelectorAll("chip-input, chip-textarea, chip-dropdown, chip-select, chip-checkbox") ?? []];
	}

	parsedCallback() {
		this.#refreshReadonly();
	}

	reportValidity() {
		const validity = this.#getAllControls().filter(x => !x.reportValidity()).length === 0,
			tab = this.closest(".tab-group__tab");

		if (tab) {
			const index = [...tab.parentElement.children].indexOf(tab),
				group = tab.closest("chip-tabgroup");

			if (!validity) {
				group.querySelector(`:scope > .tab-group__tabs > .tab__wrapper > chip-tab:nth-child(${index + 1})>button`)?.classList.add("step__invalid");
			} else if (!tab.querySelector(".input-field__invalid")) {
				group.querySelector(`:scope > .tab-group__tabs > .tab__wrapper > chip-tab:nth-child(${index + 1})>button`)?.classList.remove("step__invalid");
			}
		}

		return validity;
	}

	#refreshReadonly() {
		this.#getAllControls().forEach(control => control.toggleReadonly(this.readonly));
	}

	checkValidity() {
		const validity = this.#getAllControls().filter(x => !x.checkValidity()).length === 0,
			tab = this.closest(".tab-group__tab");

		if (tab) {
			const index = [...tab.parentElement.children].indexOf(tab),
				group = tab.closest("chip-tabgroup");

			if (validity) {
				group.querySelector(`:scope > .tab-group__tabs > .tab__wrapper > chip-tab:nth-child(${index + 1})>button`)?.classList.remove("step__invalid");
			}
		}

		return validity;
	}

	attributeChanged(name) {
		if (name === "readonly") {
			this.#refreshReadonly();
		}
	}

	getData(options = this.#DefaultOptions) {
		const elements = this.querySelectorAll(`chip-input[name], chip-textarea[name], chip-dropdown[name], chip-select[name], chip-radio[name]${options.AllowUncheckedBoxes ? "" : "[checked]"}, chip-checkbox[name]${options.AllowUncheckedBoxes ? "" : "[checked]"}`) ?? [];

		if (!elements.length) {
			return {};
		}

		return Object.assign(...[...elements].
			map(x => {
				let value = x.value;
				if (x.nodeName === "CHIP-CHECKBOX" && options.ProcessCheckboxes) { value = x.checked; }
				if (x.nodeName === "CHIP-INPUT" && x.type === "number") { value = parseFloat(value); }

				return { [x.name]: value };
			}));
	}
}

/***/ }),

/***/ "./src/modules/components/grid/grid.js":
/*!*********************************************!*\
  !*** ./src/modules/components/grid/grid.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Grid: () => (/* binding */ Grid)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Grid extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.gap = this.getAttribute("gap") ?? "";
		this.alignment = this.getAttribute("alignment");

		this.columns = parseInt(this.getAttribute("columns")) || 0;
		this.columnsSmall = parseInt(this.getAttribute("columns-sm")) || 0;
		this.columnsMedium = parseInt(this.getAttribute("columns-md")) || 0;
		this.columnsLarge = parseInt(this.getAttribute("columns-lg")) || 0;
		this.columnsExtraLarge = parseInt(this.getAttribute("columns-xl")) || 0;
		this.columnsExtraExtraLarge = parseInt(this.getAttribute("columns-xxl")) || 0;

		if (!this.id) { this.id = `cg${crypto.randomUUID().slice(0, 8)}`; }
	}

	parsedCallback() {
		if ([this.columns, this.columnsSmall, this.columnsMedium].some(x => x)) {
			let sheet = (document.getElementById("stAuxilium") ?? document.head.appendChild(document.createElementWithContents("style", null, { id: "stAuxilium" }))).sheet,
				rule = `#${this.id} {`;

			if (this.columns) { rule += `--grid-columns: ${this.columns};`; };
			if (this.columnsSmall) { rule += `--grid-columns-sm: ${this.columnsSmall};`; };
			if (this.columnsMedium) { rule += `--grid-columns-md: ${this.columnsMedium};`; };
			if (this.columnsLarge) { rule += `--grid-columns-lg: ${this.columnsLarge};`; };
			if (this.columnsExtraLarge) { rule += `--grid-columns-xl: ${this.columnsExtraLarge};`; };
			if (this.columnsExtraExtraLarge) { rule += `--grid-columns-xxl: ${this.columnsExtraExtraLarge};`; };

			sheet.insertRule(rule + "}", sheet.cssRules.length);
		}

		const list = document.createElementWithContents("ul", [...this.childNodes ?? []].filter(x => x.nodeType !== Node.TEXT_NODE || x.textContent.trim())
			.map(child => document.createElementWithContents("li", child)));

		this.appendChild(list);
	}
}

/***/ }),

/***/ "./src/modules/components/header/header.js":
/*!*************************************************!*\
  !*** ./src/modules/components/header/header.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Header: () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class Header extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["size"];

	constructor() {
		super();

		this.size = this.getAttribute("size") ?? "1";
		this.link = this.getAttribute("link") ?? "";
		this.icon = this.getAttribute("icon") ?? "";
		this.casing = this.getAttribute("casing") ?? "";
		this.element = this.getAttribute("element") ?? "div";
	}

	parsedCallback() {
		const element = document.createElementWithContents(this.link ? "chip-link" : this.element, this.childNodes, {
			className: `heading--size${this.size} heading--core`
		}), actionBar = element.querySelector("chip-actionbar");

		if (this.link) { element.href = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.link); }
		if (this.icon) { element.prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon })); }

		this.appendChild(element);

		if (actionBar) {
			this.appendChild(actionBar);
		}
	}

	get textContent() { return this.querySelector(".heading--core")?.textContent ?? super.textContent; }

	set textContent(value) {
		const target = this.querySelector(".heading--core");

		if (target) {
			target.textContent = value;
		}
	}

	attributeChanged(name, oldValue, newValue) {
		if (name === "size") {
			this.firstElementChild.classList.remove(`heading--size${oldValue}`);
			this.firstElementChild.classList.add(`heading--size${newValue}`);
		}
	}

	SetText(text) {
		if (this.firstElementChild) {
			this.firstElementChild.textContent = text;
		} else {
			this.textContent = text;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/icon/icon.js":
/*!*********************************************!*\
  !*** ./src/modules/components/icon/icon.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Icon: () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Icon extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["icon", "colour", "size"];

	constructor() {
		super();

		this.icon = this.getAttribute("icon")?.trim() ?? "fas fa-icons";
		this.colour = this.getAttribute("colour");
	}

	parsedCallback() {
		if (this.colour) { this.dataset.colour = this.colour; }
		this.classList.add(...this.icon.split(" "));
	}

	attributeChanged(name, oldValue, newValue) {
		switch (name) {
			case "icon":
				if (oldValue) { this.classList.remove(...oldValue.split(" ")); }
				if (newValue) { this.classList.add(...newValue.split(" ")); }
				break;
			case "colour":
				if (newValue) { this.dataset.colour = this.colour; }
				else { this.removeAttribute("data-colour"); }
				break;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/iconpicker/iconpicker.js":
/*!*********************************************************!*\
  !*** ./src/modules/components/iconpicker/iconpicker.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IconPicker: () => (/* binding */ IconPicker)
/* harmony export */ });
/* harmony import */ var _button_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../button/button */ "./src/modules/components/button/button.js");
/* harmony import */ var _icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icons */ "./src/modules/components/iconpicker/icons.js");



class IconPicker extends _button_button__WEBPACK_IMPORTED_MODULE_0__.Button {
	constructor() {
		super();

		this.label = this.getAttribute("label") ?? "";
		this.hiddenName = this.getAttribute("hidden-id");
		this.description = this.getAttribute("description") ?? "";
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.icon = this.getAttribute("icon")?.toLowerCase() ?? "fas fa-icons";

		if (!this.icon.includes(" ")) { this.icon = `fas ${this.icon.trim()}`; }
		if (!this.icon.includes("fa-")) { this.icon = `${this.icon.split(" ").at(0)} fa-${this.icon.split(" ").at(-1)}`; }
		if (!this.IconExists(this.icon)) { this.icon = "fas fa-icons"; }
		if (this.closest("form") && !this.hiddenName) { this.hiddenName = this.id; }
	}

	IconExists(icon) {
		return !!_icons__WEBPACK_IMPORTED_MODULE_1__.ICON_DATASET.find(x => x.toLowerCase() === icon?.toLowerCase());
	}

	parsedCallback() {
		const { size, variation, buttonStyle } = this,
			buttonID = crypto.randomUUID().slice(0, 8);

		const container = document.createElementWithContents("chip-dropdownbutton",
			`
				<div class="icon-picker__display"><chip-icon></chip-icon><chip-icon icon="fas fa-caret-down"></chip-icon></div>

				<chip-dropdown searchable></chip-dropdown>
			`.trim(), {
			variation, size, buttonStyle
		}), dropdown = container.querySelector("chip-dropdown");

		container.querySelector("chip-icon").icon = this.icon;

		Object.assign(dropdown, {
			GetSearchedItems: query => this.#GetIcons(query),
			onchange: () => this.icon = dropdown.value,
			hiddenName: this.hiddenName,
			buttonID: buttonID,
			value: this.icon
		});

		if (this.description) { dropdown.description = this.description; }

		if (this.label) {
			this.appendChild(document.createElementWithContents("label", this.label, {
				className: "input-field__label",
				htmlFor: buttonID
			}));
		}

		this.appendChild(container);

		if (this.helperText) {
			this.appendChild(document.createElementWithContents("div", this.helperText, { className: "input-field__helper-text" }));
		}
	}

	#GetIcons(query) {
		return SearchArray(_icons__WEBPACK_IMPORTED_MODULE_1__.ICON_DATASET, query).map(icon => document.createElementWithContents("chip-dropdownitem",
			`
					<div>
						<chip-icon icon='${icon}'></chip-icon>
					</div>
					<div>
						${toTitleCase(icon.replaceAll('-', ' ').split(" ").slice(2).join(" "))}
					</div>
				`.trim(), { value: icon })).sort(x => x.textContent);
	}

	attributeChanged(name, _, newValue) {
		if (name === "icon") {
			this.querySelector(".icon-picker__display>chip-icon:not(:last-child)").icon = newValue;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/iconpicker/icons.js":
/*!****************************************************!*\
  !*** ./src/modules/components/iconpicker/icons.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ICON_DATASET: () => (/* binding */ ICON_DATASET)
/* harmony export */ });
const ICON_DATASET = ["s yin-yang", "s yen-sign", "s x-ray", "s wrench", "s wreath", "s won-sign", "s wine-glass-alt", "s wine-glass", "s wine-bottle", "s windsock", "s window-restore", "s window-minimize", "s window-maximize", "s window-frame-open", "s window-frame", "s window-close", "s window-alt", "s window", "s wind-warning", "s wind-turbine", "s wind", "s wifi-slash", "s wifi-2", "s wifi-1", "s wifi", "s whistle", "s wheelchair", "s wheat", "s whale", "s weight-hanging", "s weight", "s webcam-slash", "s webcam", "s waveform-path", "s waveform", "s wave-triangle", "s wave-square", "s wave-sine", "s water-rise", "s water-lower", "s water", "s watch-fitness", "s watch-calculator", "s watch", "s washer", "s warehouse-alt", "s warehouse", "s wand-magic", "s wand", "s wallet", "s walking", "s walkie-talkie", "s walker", "s wagon-covered", "s vr-cardboard", "s vote-yea", "s vote-nay", "s volume-up", "s volume-slash", "s volume-off", "s volume-mute", "s volume-down", "s volume", "s volleyball-ball", "s volcano", "s voicemail", "s viruses", "s virus-slash", "s virus", "s violin", "s vihara", "s video-slash", "s video-plus", "s video", "s vials", "s vial", "s vhs", "s vest-patches", "s vest", "s venus-mars", "s venus-double", "s venus", "s vector-square", "s value-absolute", "s vacuum-robot", "s vacuum", "s utensils-alt", "s utensils", "s utensil-spoon", "s utensil-knife", "s utensil-fork", "s users-slash", "s users-medical", "s users-crown", "s users-cog", "s users-class", "s users", "s user-visor", "s user-unlock", "s user-times", "s user-tie", "s user-tag", "s user-slash", "s user-shield", "s user-secret", "s user-robot", "s user-plus", "s user-nurse", "s user-ninja", "s user-music", "s user-minus", "s user-md-chat", "s user-md", "s user-lock", "s user-injured", "s user-headset", "s user-hard-hat", "s user-graduate", "s user-friends", "s user-edit", "s user-crown", "s user-cowboy", "s user-cog", "s user-clock", "s user-circle", "s user-check", "s user-chart", "s user-astronaut", "s user-alt-slash", "s user-alt", "s user-alien", "s user", "s usd-square", "s usd-circle", "s usb-drive", "s upload", "s unlock-alt", "s unlock", "s unlink", "s university", "s universal-access", "s union", "s unicorn", "s undo-alt", "s undo", "s underline", "s umbrella-beach", "s umbrella", "s ufo-beam", "s ufo", "s typewriter", "s tv-retro", "s tv-music", "s tv-alt", "s tv", "s turtle", "s turntable", "s turkey", "s tty", "s tshirt", "s trumpet", "s truck-ramp", "s truck-plow", "s truck-pickup", "s truck-moving", "s truck-monster", "s truck-loading", "s truck-couch", "s truck-container", "s truck", "s trophy-alt", "s trophy", "s triangle-music", "s triangle", "s trees", "s tree-palm", "s tree-large", "s tree-decorated", "s tree-christmas", "s tree-alt", "s tree", "s treasure-chest", "s trash-undo-alt", "s trash-undo", "s trash-restore-alt", "s trash-restore", "s trash-alt", "s trash", "s transporter-empty", "s transporter-3", "s transporter-2", "s transporter-1", "s transporter", "s transgender-alt", "s transgender", "s tram", "s train", "s trailer", "s traffic-light-stop", "s traffic-light-slow", "s traffic-light-go", "s traffic-light", "s traffic-cone", "s trademark", "s tractor", "s tornado", "s torii-gate", "s torah", "s toothbrush", "s tooth", "s tools", "s toolbox", "s tombstone-alt", "s tombstone", "s toilet-paper-slash", "s toilet-paper-alt", "s toilet-paper", "s toilet", "s toggle-on", "s toggle-off", "s tired", "s tire-rugged", "s tire-pressure-warning", "s tire-flat", "s tire", "s tint-slash", "s tint", "s times-square", "s times-octagon", "s times-hexagon", "s times-circle", "s times", "s tilde", "s ticket-alt", "s ticket", "s thunderstorm-sun", "s thunderstorm-moon", "s thunderstorm", "s thumbtack", "s thumbs-up", "s thumbs-down", "s theta", "s thermometer-three-quarters", "s thermometer-quarter", "s thermometer-half", "s thermometer-full", "s thermometer-empty", "s thermometer", "s theater-masks", "s th-list", "s th-large", "s th", "s text-width", "s text-size", "s text-height", "s text", "s terminal", "s tennis-ball", "s tenge", "s temperature-up", "s temperature-low", "s temperature-hot", "s temperature-high", "s temperature-frigid", "s temperature-down", "s telescope", "s teeth-open", "s teeth", "s taxi", "s tasks-alt", "s tasks", "s tape", "s tanakh", "s tally", "s tags", "s tag", "s taco", "s tachometer-slowest", "s tachometer-slow", "s tachometer-fastest", "s tachometer-fast", "s tachometer-average", "s tachometer-alt-slowest", "s tachometer-alt-slow", "s tachometer-alt-fastest", "s tachometer-alt-fast", "s tachometer-alt-average", "s tachometer-alt", "s tachometer", "s tablets", "s tablet-rugged", "s tablet-android-alt", "s tablet-android", "s tablet-alt", "s tablet", "s table-tennis", "s table", "s syringe", "s sync-alt", "s sync", "s synagogue", "s swords-laser", "s swords", "s sword-laser-alt", "s sword-laser", "s sword", "s swimming-pool", "s swimmer", "s swatchbook", "s surprise", "s superscript", "s sunset", "s sunrise", "s sunglasses", "s sun-haze", "s sun-dust", "s sun-cloud", "s sun", "s suitcase-rolling", "s suitcase", "s subway", "s subscript", "s stroopwafel", "s strikethrough", "s stretcher", "s street-view", "s stream", "s store-slash", "s store-alt-slash", "s store-alt", "s store", "s stopwatch-20", "s stopwatch", "s stop-circle", "s stop", "s stomach", "s stocking", "s sticky-note", "s stethoscope", "s step-forward", "s step-backward", "s steering-wheel", "s steak", "s starship-freighter", "s starship", "s stars", "s starfighter-alt", "s starfighter", "s star-shooting", "s star-of-life", "s star-of-david", "s star-half-alt", "s star-half", "s star-exclamation", "s star-christmas", "s star-and-crescent", "s star", "s stamp", "s staff", "s squirrel", "s square-root-alt", "s square-root", "s square-full", "s square", "s sprinkler", "s spray-can", "s splotch", "s spinner-third", "s spinner", "s spider-web", "s spider-black-widow", "s spider", "s spell-check", "s speakers", "s speaker", "s sparkles", "s spade", "s space-station-moon-alt", "s space-station-moon", "s space-shuttle", "s spa", "s soup", "s sort-up", "s sort-size-up-alt", "s sort-size-up", "s sort-size-down-alt", "s sort-size-down", "s sort-shapes-up-alt", "s sort-shapes-up", "s sort-shapes-down-alt", "s sort-shapes-down", "s sort-numeric-up-alt", "s sort-numeric-up", "s sort-numeric-down-alt", "s sort-numeric-down", "s sort-down", "s sort-circle-up", "s sort-circle-down", "s sort-circle", "s sort-amount-up-alt", "s sort-amount-up", "s sort-amount-down-alt", "s sort-amount-down", "s sort-alt", "s sort-alpha-up-alt", "s sort-alpha-up", "s sort-alpha-down-alt", "s sort-alpha-down", "s sort", "s solar-system", "s solar-panel", "s socks", "s soap", "s snowplow", "s snowmobile", "s snowman", "s snowflakes", "s snowflake", "s snowboarding", "s snow-blowing", "s snooze", "s snake", "s sms", "s smoking-ban", "s smoking", "s smoke", "s smog", "s smile-wink", "s smile-plus", "s smile-beam", "s smile", "s sliders-v-square", "s sliders-v", "s sliders-h-square", "s sliders-h", "s sleigh", "s sledding", "s slash", "s skull-crossbones", "s skull-cow", "s skull", "s skiing-nordic", "s skiing", "s ski-lift", "s ski-jump", "s skeleton", "s skating", "s sitemap", "s siren-on", "s siren", "s sink", "s sim-card", "s signature", "s signal-stream", "s signal-slash", "s signal-alt-slash", "s signal-alt-3", "s signal-alt-2", "s signal-alt-1", "s signal-alt", "s signal-4", "s signal-3", "s signal-2", "s signal-1", "s signal", "s sign-out-alt", "s sign-out", "s sign-language", "s sign-in-alt", "s sign-in", "s sign", "s sigma", "s sickle", "s shuttlecock", "s shuttle-van", "s shredder", "s shower", "s shovel-snow", "s shovel", "s shopping-cart", "s shopping-basket", "s shopping-bag", "s shoe-prints", "s shish-kebab", "s shipping-timed", "s shipping-fast", "s ship", "s shield-virus", "s shield-cross", "s shield-check", "s shield-alt", "s shield", "s shekel-sign", "s sheep", "s share-square", "s share-alt-square", "s share-alt", "s share-all", "s share", "s shapes", "s server", "s sensor-smoke", "s sensor-on", "s sensor-fire", "s sensor-alert", "s sensor", "s send-backward", "s send-back", "s seedling", "s search-plus", "s search-minus", "s search-location", "s search-dollar", "s search", "s sd-card", "s scythe", "s scrubber", "s scroll-old", "s scroll", "s screwdriver", "s school", "s scarf", "s scarecrow", "s scanner-touchscreen", "s scanner-keyboard", "s scanner-image", "s scanner", "s scalpel-path", "s scalpel", "s saxophone", "s sax-hot", "s save", "s sausage", "s satellite-dish", "s satellite", "s sandwich", "s salad", "s sad-tear", "s sad-cry", "s sack-dollar", "s sack", "s rv", "s rupee-sign", "s running", "s ruler-vertical", "s ruler-triangle", "s ruler-horizontal", "s ruler-combined", "s ruler", "s ruble-sign", "s rss-square", "s rss", "s router", "s route-interstate", "s route-highway", "s route", "s rocket-launch", "s rocket", "s robot", "s road", "s rings-wedding", "s ring", "s ribbon", "s retweet-alt", "s retweet", "s restroom", "s republican", "s reply-all", "s reply", "s repeat-alt", "s repeat-1-alt", "s repeat-1", "s repeat", "s remove-format", "s registered", "s refrigerator", "s redo-alt", "s redo", "s recycle", "s rectangle-wide", "s rectangle-portrait", "s rectangle-landscape", "s record-vinyl", "s receipt", "s raygun", "s random", "s ramp-loading", "s ram", "s raindrops", "s rainbow", "s radio-alt", "s radio", "s radiation-alt", "s radiation", "s radar", "s racquet", "s rabbit-fast", "s rabbit", "s quran", "s quote-right", "s quote-left", "s quidditch", "s question-square", "s question-circle", "s question", "s qrcode", "s puzzle-piece", "s pumpkin", "s pump-soap", "s pump-medical", "s projector", "s project-diagram", "s procedures", "s print-slash", "s print-search", "s print", "s presentation", "s prescription-bottle-alt", "s prescription-bottle", "s prescription", "s praying-hands", "s pray", "s power-off", "s pound-sign", "s portrait", "s portal-exit", "s portal-enter", "s popcorn", "s poop", "s poo-storm", "s poo", "s poll-people", "s poll-h", "s poll", "s police-box", "s podium-star", "s podium", "s podcast", "s plus-square", "s plus-octagon", "s plus-hexagon", "s plus-circle", "s plus", "s plug", "s play-circle", "s play", "s planet-ringed", "s planet-moon", "s plane-slash", "s plane-departure", "s plane-arrival", "s plane-alt", "s plane", "s place-of-worship", "s pizza-slice", "s pizza", "s pills", "s piggy-bank", "s pig", "s pie", "s piano-keyboard", "s piano", "s pi", "s photo-video", "s phone-volume", "s phone-square-alt", "s phone-square", "s phone-slash", "s phone-rotary", "s phone-plus", "s phone-office", "s phone-laptop", "s phone-alt", "s phone", "s person-sign", "s person-dolly-empty", "s person-dolly", "s person-carry", "s person-booth", "s percentage", "s percent", "s pepper-hot", "s people-carry", "s people-arrows", "s pennant", "s pencil-ruler", "s pencil-paintbrush", "s pencil-alt", "s pencil", "s pen-square", "s pen-nib", "s pen-fancy", "s pen-alt", "s pen", "s pegasus", "s peace", "s paw-claws", "s paw-alt", "s paw", "s pause-circle", "s pause", "s paste", "s pastafarianism", "s passport", "s parking-slash", "s parking-circle-slash", "s parking-circle", "s parking", "s paragraph-rtl", "s paragraph", "s parachute-box", "s paperclip", "s paper-plane", "s pallet-alt", "s pallet", "s palette", "s paint-roller", "s paint-brush-alt", "s paint-brush", "s pager", "s page-break", "s overline", "s oven", "s outlet", "s outdent", "s otter", "s ornament", "s omega", "s om", "s oil-temp", "s oil-can", "s octagon", "s object-ungroup", "s object-group", "s notes-medical", "s not-equal", "s newspaper", "s neuter", "s network-wired", "s narwhal", "s music-slash", "s music-alt-slash", "s music-alt", "s music", "s mug-tea", "s mug-marshmallows", "s mug-hot", "s mug", "s mp3-player", "s mouse-pointer", "s mouse-alt", "s mouse", "s mountains", "s mountain", "s motorcycle", "s mosque", "s mortar-pestle", "s moon-stars", "s moon-cloud", "s moon", "s monument", "s monkey", "s monitor-heart-rate", "s money-check-edit-alt", "s money-check-edit", "s money-check-alt", "s money-check", "s money-bill-wave-alt", "s money-bill-wave", "s money-bill-alt", "s money-bill", "s mobile-android-alt", "s mobile-android", "s mobile-alt", "s mobile", "s mitten", "s mistletoe", "s minus-square", "s minus-octagon", "s minus-hexagon", "s minus-circle", "s minus", "s mind-share", "s microwave", "s microscope", "s microphone-stand", "s microphone-slash", "s microphone-alt-slash", "s microphone-alt", "s microphone", "s microchip", "s meteor", "s mercury", "s menorah", "s memory", "s meh-rolling-eyes", "s meh-blank", "s meh", "s megaphone", "s medkit", "s medal", "s meat", "s mask", "s mars-stroke-v", "s mars-stroke-h", "s mars-stroke", "s mars-double", "s mars", "s marker", "s map-signs", "s map-pin", "s map-marker-times", "s map-marker-smile", "s map-marker-slash", "s map-marker-question", "s map-marker-plus", "s map-marker-minus", "s map-marker-exclamation", "s map-marker-edit", "s map-marker-check", "s map-marker-alt-slash", "s map-marker-alt", "s map-marker", "s map-marked-alt", "s map-marked", "s map", "s mandolin", "s male", "s mailbox", "s mail-bulk", "s magnet", "s magic", "s mace", "s lungs-virus", "s lungs", "s luggage-cart", "s luchador", "s low-vision", "s loveseat", "s long-arrow-up", "s long-arrow-right", "s long-arrow-left", "s long-arrow-down", "s long-arrow-alt-up", "s long-arrow-alt-right", "s long-arrow-alt-left", "s long-arrow-alt-down", "s lock-open-alt", "s lock-open", "s lock-alt", "s lock", "s location-slash", "s location-circle", "s location-arrow", "s location", "s list-ul", "s list-ol", "s list-music", "s list-alt", "s list", "s lira-sign", "s lips", "s link", "s line-height", "s line-columns", "s lights-holiday", "s lightbulb-slash", "s lightbulb-on", "s lightbulb-exclamation", "s lightbulb-dollar", "s lightbulb", "s light-switch-on", "s light-switch-off", "s light-switch", "s light-ceiling", "s life-ring", "s level-up-alt", "s level-up", "s level-down-alt", "s level-down", "s less-than-equal", "s less-than", "s lemon", "s leaf-oak", "s leaf-maple", "s leaf-heart", "s leaf", "s layer-plus", "s layer-minus", "s layer-group", "s laugh-wink", "s laugh-squint", "s laugh-beam", "s laugh", "s lasso", "s laptop-medical", "s laptop-house", "s laptop-code", "s laptop", "s language", "s landmark-alt", "s landmark", "s lamp-floor", "s lamp-desk", "s lamp", "s lambda", "s knife-kitchen", "s kiwi-bird", "s kite", "s kiss-wink-heart", "s kiss-beam", "s kiss", "s kidneys", "s khanda", "s keynote", "s keyboard", "s key-skeleton", "s key", "s kerning", "s kazoo", "s kaaba", "s jug", "s joystick", "s journal-whills", "s joint", "s jedi", "s jack-o-lantern", "s italic", "s island-tropical", "s inventory", "s intersection", "s integral", "s inhaler", "s info-square", "s info-circle", "s info", "s infinity", "s industry-alt", "s industry", "s indent", "s inbox-out", "s inbox-in", "s inbox", "s images", "s image-polaroid", "s image", "s igloo", "s id-card-alt", "s id-card", "s id-badge", "s icons-alt", "s icons", "s icicles", "s ice-skate", "s ice-cream", "s i-cursor", "s hurricane", "s humidity", "s hryvnia", "s house-user", "s house-signal", "s house-return", "s house-night", "s house-leave", "s house-flood", "s house-day", "s house-damage", "s house", "s hourglass-start", "s hourglass-half", "s hourglass-end", "s hourglass", "s hotel", "s hotdog", "s hot-tub", "s hospitals", "s hospital-user", "s hospital-symbol", "s hospital-alt", "s hospital", "s horse-saddle", "s horse-head", "s horse", "s horizontal-rule", "s hood-cloak", "s home-lg-alt", "s home-lg", "s home-heart", "s home-alt", "s home", "s holly-berry", "s hockey-sticks", "s hockey-puck", "s hockey-mask", "s history", "s hippo", "s hiking", "s highlighter", "s hexagon", "s helmet-battle", "s helicopter", "s heat", "s heartbeat", "s heart-square", "s heart-rate", "s heart-circle", "s heart-broken", "s heart", "s headset", "s headphones-alt", "s headphones", "s heading", "s head-vr", "s head-side-virus", "s head-side-medical", "s head-side-mask", "s head-side-headphones", "s head-side-cough-slash", "s head-side-cough", "s head-side-brain", "s head-side", "s hdd", "s hat-wizard", "s hat-witch", "s hat-winter", "s hat-santa", "s hat-cowboy-side", "s hat-cowboy", "s hat-chef", "s hashtag", "s hard-hat", "s hanukiah", "s handshake-slash", "s handshake-alt-slash", "s handshake-alt", "s handshake", "s hands-wash", "s hands-usd", "s hands-helping", "s hands-heart", "s hands", "s hand-spock", "s hand-sparkles", "s hand-scissors", "s hand-rock", "s hand-receiving", "s hand-pointer", "s hand-point-up", "s hand-point-right", "s hand-point-left", "s hand-point-down", "s hand-peace", "s hand-paper", "s hand-middle-finger", "s hand-lizard", "s hand-holding-water", "s hand-holding-usd", "s hand-holding-seedling", "s hand-holding-medical", "s hand-holding-magic", "s hand-holding-heart", "s hand-holding-box", "s hand-holding", "s hand-heart", "s hamsa", "s hammer-war", "s hammer", "s hamburger", "s h4", "s h3", "s h2", "s h1", "s h-square", "s guitars", "s guitar-electric", "s guitar", "s grip-vertical", "s grip-lines-vertical", "s grip-lines", "s grip-horizontal", "s grin-wink", "s grin-tongue-wink", "s grin-tongue-squint", "s grin-tongue", "s grin-tears", "s grin-stars", "s grin-squint-tears", "s grin-squint", "s grin-hearts", "s grin-beam-sweat", "s grin-beam", "s grin-alt", "s grin", "s grimace", "s greater-than-equal", "s greater-than", "s gramophone", "s graduation-cap", "s gopuram", "s golf-club", "s golf-ball", "s globe-stand", "s globe-snow", "s globe-europe", "s globe-asia", "s globe-americas", "s globe-africa", "s globe", "s glasses-alt", "s glasses", "s glass-whiskey-rocks", "s glass-whiskey", "s glass-martini-alt", "s glass-martini", "s glass-citrus", "s glass-cheers", "s glass-champagne", "s glass", "s gingerbread-man", "s gifts", "s gift-card", "s gift", "s ghost", "s genderless", "s gem", "s gavel", "s gas-pump-slash", "s gas-pump", "s garage-open", "s garage-car", "s garage", "s gamepad-alt", "s gamepad", "s game-console-handheld", "s game-board-alt", "s game-board", "s galaxy", "s futbol", "s funnel-dollar", "s function", "s frown-open", "s frown", "s frosty-head", "s frog", "s french-fries", "s fragile", "s forward", "s forklift", "s football-helmet", "s football-ball", "s font-case", "s font", "s folders", "s folder-upload", "s folder-tree", "s folder-times", "s folder-plus", "s folder-open", "s folder-minus", "s folder-download", "s folder", "s fog", "s flux-capacitor", "s flute", "s flushed", "s flower-tulip", "s flower-daffodil", "s flower", "s flask-potion", "s flask-poison", "s flask", "s flashlight", "s flame", "s flag-usa", "s flag-checkered", "s flag-alt", "s flag", "s fist-raised", "s fish-cooked", "s fish", "s first-aid", "s fireplace", "s fire-smoke", "s fire-extinguisher", "s fire-alt", "s fire", "s fingerprint", "s filter", "s film-canister", "s film-alt", "s film", "s fill-drip", "s fill", "s files-medical", "s file-word", "s file-video", "s file-user", "s file-upload", "s file-times", "s file-spreadsheet", "s file-signature", "s file-search", "s file-prescription", "s file-powerpoint", "s file-plus", "s file-pdf", "s file-music", "s file-minus", "s file-medical-alt", "s file-medical", "s file-invoice-dollar", "s file-invoice", "s file-import", "s file-image", "s file-export", "s file-exclamation", "s file-excel", "s file-edit", "s file-download", "s file-csv", "s file-contract", "s file-code", "s file-check", "s file-chart-pie", "s file-chart-line", "s file-certificate", "s file-audio", "s file-archive", "s file-alt", "s file", "s fighter-jet", "s field-hockey", "s female", "s feather-alt", "s feather", "s fax", "s faucet-drip", "s faucet", "s fast-forward", "s fast-backward", "s farm", "s fan-table", "s fan", "s eye-slash", "s eye-evil", "s eye-dropper", "s eye", "s external-link-square-alt", "s external-link-square", "s external-link-alt", "s external-link", "s expand-wide", "s expand-arrows-alt", "s expand-arrows", "s expand-alt", "s expand", "s exclamation-triangle", "s exclamation-square", "s exclamation-circle", "s exclamation", "s exchange-alt", "s exchange", "s euro-sign", "s ethernet", "s eraser", "s equals", "s envelope-square", "s envelope-open-text", "s envelope-open-dollar", "s envelope-open", "s envelope", "s engine-warning", "s empty-set", "s ellipsis-v-alt", "s ellipsis-v", "s ellipsis-h-alt", "s ellipsis-h", "s elephant", "s eject", "s egg-fried", "s egg", "s edit", "s eclipse-alt", "s eclipse", "s ear-muffs", "s ear", "s dungeon", "s dumpster-fire", "s dumpster", "s dumbbell", "s duck", "s dryer-alt", "s dryer", "s drumstick-bite", "s drumstick", "s drum-steelpan", "s drum", "s drone-alt", "s drone", "s dreidel", "s draw-square", "s draw-polygon", "s draw-circle", "s dragon", "s drafting-compass", "s download", "s dove", "s dot-circle", "s door-open", "s door-closed", "s donate", "s dolly-flatbed-empty", "s dolly-flatbed-alt", "s dolly-flatbed", "s dolly-empty", "s dolly", "s dollar-sign", "s dog-leashed", "s dog", "s do-not-enter", "s dna", "s dizzy", "s divide", "s disease", "s disc-drive", "s directions", "s diploma", "s digital-tachograph", "s digging", "s dice-two", "s dice-three", "s dice-six", "s dice-one", "s dice-four", "s dice-five", "s dice-d8", "s dice-d6", "s dice-d4", "s dice-d20", "s dice-d12", "s dice-d10", "s dice", "s diamond", "s diagnoses", "s dharmachakra", "s dewpoint", "s desktop-alt", "s desktop", "s democrat", "s deer-rudolph", "s deer", "s debug", "s deaf", "s database", "s dagger", "s cut", "s curling", "s cubes", "s cube", "s crutches", "s crutch", "s crown", "s crow", "s crosshairs", "s cross", "s crop-alt", "s crop", "s croissant", "s cricket", "s credit-card-front", "s credit-card-blank", "s credit-card", "s cowbell-more", "s cowbell", "s cow", "s couch", "s corn", "s copyright", "s copy", "s cookie-bite", "s cookie", "s conveyor-belt-alt", "s conveyor-belt", "s container-storage", "s construction", "s concierge-bell", "s computer-speaker", "s computer-classic", "s compress-wide", "s compress-arrows-alt", "s compress-alt", "s compress", "s compass-slash", "s compass", "s compact-disc", "s comments-dollar", "s comments-alt-dollar", "s comments-alt", "s comments", "s comment-times", "s comment-smile", "s comment-slash", "s comment-plus", "s comment-music", "s comment-minus", "s comment-medical", "s comment-lines", "s comment-exclamation", "s comment-edit", "s comment-dots", "s comment-dollar", "s comment-check", "s comment-alt-times", "s comment-alt-smile", "s comment-alt-slash", "s comment-alt-plus", "s comment-alt-music", "s comment-alt-minus", "s comment-alt-medical", "s comment-alt-lines", "s comment-alt-exclamation", "s comment-alt-edit", "s comment-alt-dots", "s comment-alt-dollar", "s comment-alt-check", "s comment-alt", "s comment", "s comet", "s columns", "s coins", "s coin", "s cogs", "s cog", "s coffin-cross", "s coffin", "s coffee-togo", "s coffee-pot", "s coffee", "s code-merge", "s code-commit", "s code-branch", "s code", "s cocktail", "s club", "s clouds-sun", "s clouds-moon", "s clouds", "s cloud-upload-alt", "s cloud-upload", "s cloud-sun-rain", "s cloud-sun", "s cloud-snow", "s cloud-sleet", "s cloud-showers-heavy", "s cloud-showers", "s cloud-rainbow", "s cloud-rain", "s cloud-music", "s cloud-moon-rain", "s cloud-moon", "s cloud-meatball", "s cloud-hail-mixed", "s cloud-hail", "s cloud-drizzle", "s cloud-download-alt", "s cloud-download", "s cloud", "s closed-captioning", "s clone", "s clock", "s clipboard-user", "s clipboard-prescription", "s clipboard-list-check", "s clipboard-list", "s clipboard-check", "s clipboard", "s clinic-medical", "s claw-marks", "s clarinet", "s city", "s circle-notch", "s circle", "s church", "s chimney", "s child", "s chevron-up", "s chevron-square-up", "s chevron-square-right", "s chevron-square-left", "s chevron-square-down", "s chevron-right", "s chevron-left", "s chevron-down", "s chevron-double-up", "s chevron-double-right", "s chevron-double-left", "s chevron-double-down", "s chevron-circle-up", "s chevron-circle-right", "s chevron-circle-left", "s chevron-circle-down", "s chess-rook-alt", "s chess-rook", "s chess-queen-alt", "s chess-queen", "s chess-pawn-alt", "s chess-pawn", "s chess-knight-alt", "s chess-knight", "s chess-king-alt", "s chess-king", "s chess-clock-alt", "s chess-clock", "s chess-board", "s chess-bishop-alt", "s chess-bishop", "s chess", "s cheeseburger", "s cheese-swiss", "s cheese", "s check-square", "s check-double", "s check-circle", "s check", "s chart-scatter", "s chart-pie-alt", "s chart-pie", "s chart-network", "s chart-line-down", "s chart-line", "s chart-bar", "s chart-area", "s charging-station", "s chalkboard-teacher", "s chalkboard", "s chair-office", "s chair", "s certificate", "s cctv", "s cauldron", "s cat-space", "s cat", "s cassette-tape", "s cash-register", "s cart-plus", "s cart-arrow-down", "s cars", "s carrot", "s caret-up", "s caret-square-up", "s caret-square-right", "s caret-square-left", "s caret-square-down", "s caret-right", "s caret-left", "s caret-down", "s caret-circle-up", "s caret-circle-right", "s caret-circle-left", "s caret-circle-down", "s caravan-alt", "s caravan", "s car-wash", "s car-tilt", "s car-side", "s car-mechanic", "s car-garage", "s car-crash", "s car-bus", "s car-bump", "s car-building", "s car-battery", "s car-alt", "s car", "s capsules", "s cannabis", "s candy-corn", "s candy-cane", "s candle-holder", "s campground", "s campfire", "s camera-retro", "s camera-polaroid", "s camera-movie", "s camera-home", "s camera-alt", "s camera", "s camcorder", "s calendar-week", "s calendar-times", "s calendar-star", "s calendar-plus", "s calendar-minus", "s calendar-exclamation", "s calendar-edit", "s calendar-day", "s calendar-check", "s calendar-alt", "s calendar", "s calculator-alt", "s calculator", "s cactus", "s cabinet-filing", "s business-time", "s bus-school", "s bus-alt", "s bus", "s burrito", "s burn", "s burger-soda", "s bullseye-pointer", "s bullseye-arrow", "s bullseye", "s bullhorn", "s building", "s bug", "s brush", "s browser", "s broom", "s broadcast-tower", "s bring-front", "s bring-forward", "s briefcase-medical", "s briefcase", "s bread-slice", "s bread-loaf", "s brain", "s braille", "s brackets-curly", "s brackets", "s boxing-glove", "s boxes-alt", "s boxes", "s box-usd", "s box-up", "s box-tissue", "s box-open", "s box-heart", "s box-full", "s box-fragile", "s box-check", "s box-ballot", "s box-alt", "s box", "s bowling-pins", "s bowling-ball", "s bow-arrow", "s border-top", "s border-style-alt", "s border-style", "s border-right", "s border-outer", "s border-none", "s border-left", "s border-inner", "s border-center-v", "s border-center-h", "s border-bottom", "s border-all", "s booth-curtain", "s boot", "s boombox", "s books-medical", "s books", "s bookmark", "s book-user", "s book-spells", "s book-reader", "s book-open", "s book-medical", "s book-heart", "s book-dead", "s book-alt", "s book", "s bong", "s bone-break", "s bone", "s bomb", "s bolt", "s bold", "s blog", "s blinds-raised", "s blinds-open", "s blinds", "s blind", "s blender-phone", "s blender", "s blanket", "s birthday-cake", "s biohazard", "s binoculars", "s biking-mountain", "s biking", "s bicycle", "s bible", "s bezier-curve", "s betamax", "s bells", "s bell-slash", "s bell-school-slash", "s bell-school", "s bell-plus", "s bell-on", "s bell-exclamation", "s bell", "s beer", "s bed-empty", "s bed-bunk", "s bed-alt", "s bed", "s battery-three-quarters", "s battery-slash", "s battery-quarter", "s battery-half", "s battery-full", "s battery-empty", "s battery-bolt", "s bath", "s bat", "s basketball-hoop", "s basketball-ball", "s baseball-ball", "s baseball", "s bars", "s barcode-scan", "s barcode-read", "s barcode-alt", "s barcode", "s banjo", "s band-aid", "s ban", "s ballot-check", "s ballot", "s ball-pile", "s balance-scale-right", "s balance-scale-left", "s balance-scale", "s bahai", "s bags-shopping", "s badger-honey", "s badge-sheriff", "s badge-percent", "s badge-dollar", "s badge-check", "s badge", "s bacterium", "s bacteria", "s bacon", "s backward", "s backspace", "s backpack", "s baby-carriage", "s baby", "s axe-battle", "s axe", "s award", "s audio-description", "s atom-alt", "s atom", "s atlas", "s at", "s asterisk", "s assistive-listening-systems", "s arrows-v", "s arrows-h", "s arrows-alt-v", "s arrows-alt-h", "s arrows-alt", "s arrows", "s arrow-up", "s arrow-to-top", "s arrow-to-right", "s arrow-to-left", "s arrow-to-bottom", "s arrow-square-up", "s arrow-square-right", "s arrow-square-left", "s arrow-square-down", "s arrow-right", "s arrow-left", "s arrow-from-top", "s arrow-from-right", "s arrow-from-left", "s arrow-from-bottom", "s arrow-down", "s arrow-circle-up", "s arrow-circle-right", "s arrow-circle-left", "s arrow-circle-down", "s arrow-alt-up", "s arrow-alt-to-top", "s arrow-alt-to-right", "s arrow-alt-to-left", "s arrow-alt-to-bottom", "s arrow-alt-square-up", "s arrow-alt-square-right", "s arrow-alt-square-left", "s arrow-alt-square-down", "s arrow-alt-right", "s arrow-alt-left", "s arrow-alt-from-top", "s arrow-alt-from-right", "s arrow-alt-from-left", "s arrow-alt-from-bottom", "s arrow-alt-down", "s arrow-alt-circle-up", "s arrow-alt-circle-right", "s arrow-alt-circle-left", "s arrow-alt-circle-down", "s archway", "s archive", "s apple-crate", "s apple-alt", "s ankh", "s angry", "s angle-up", "s angle-right", "s angle-left", "s angle-down", "s angle-double-up", "s angle-double-right", "s angle-double-left", "s angle-double-down", "s angel", "s anchor", "s analytics", "s amp-guitar", "s american-sign-language-interpreting", "s ambulance", "s allergies", "s align-slash", "s align-right", "s align-left", "s align-justify", "s align-center", "s alien-monster", "s alien", "s alicorn", "s album-collection", "s album", "s alarm-snooze", "s alarm-plus", "s alarm-exclamation", "s alarm-clock", "s air-freshener", "s air-conditioner", "s adjust", "s address-card", "s address-book", "s ad", "s acorn", "s abacus", "r yin-yang", "r yen-sign", "r x-ray", "r wrench", "r wreath", "r won-sign", "r wine-glass-alt", "r wine-glass", "r wine-bottle", "r windsock", "r window-restore", "r window-minimize", "r window-maximize", "r window-frame-open", "r window-frame", "r window-close", "r window-alt", "r window", "r wind-warning", "r wind-turbine", "r wind", "r wifi-slash", "r wifi-2", "r wifi-1", "r wifi", "r whistle", "r wheelchair", "r wheat", "r whale", "r weight-hanging", "r weight", "r webcam-slash", "r webcam", "r waveform-path", "r waveform", "r wave-triangle", "r wave-square", "r wave-sine", "r water-rise", "r water-lower", "r water", "r watch-fitness", "r watch-calculator", "r watch", "r washer", "r warehouse-alt", "r warehouse", "r wand-magic", "r wand", "r wallet", "r walking", "r walkie-talkie", "r walker", "r wagon-covered", "r vr-cardboard", "r vote-yea", "r vote-nay", "r volume-up", "r volume-slash", "r volume-off", "r volume-mute", "r volume-down", "r volume", "r volleyball-ball", "r volcano", "r voicemail", "r viruses", "r virus-slash", "r virus", "r violin", "r vihara", "r video-slash", "r video-plus", "r video", "r vials", "r vial", "r vhs", "r vest-patches", "r vest", "r venus-mars", "r venus-double", "r venus", "r vector-square", "r value-absolute", "r vacuum-robot", "r vacuum", "r utensils-alt", "r utensils", "r utensil-spoon", "r utensil-knife", "r utensil-fork", "r users-slash", "r users-medical", "r users-crown", "r users-cog", "r users-class", "r users", "r user-visor", "r user-unlock", "r user-times", "r user-tie", "r user-tag", "r user-slash", "r user-shield", "r user-secret", "r user-robot", "r user-plus", "r user-nurse", "r user-ninja", "r user-music", "r user-minus", "r user-md-chat", "r user-md", "r user-lock", "r user-injured", "r user-headset", "r user-hard-hat", "r user-graduate", "r user-friends", "r user-edit", "r user-crown", "r user-cowboy", "r user-cog", "r user-clock", "r user-circle", "r user-check", "r user-chart", "r user-astronaut", "r user-alt-slash", "r user-alt", "r user-alien", "r user", "r usd-square", "r usd-circle", "r usb-drive", "r upload", "r unlock-alt", "r unlock", "r unlink", "r university", "r universal-access", "r union", "r unicorn", "r undo-alt", "r undo", "r underline", "r umbrella-beach", "r umbrella", "r ufo-beam", "r ufo", "r typewriter", "r tv-retro", "r tv-music", "r tv-alt", "r tv", "r turtle", "r turntable", "r turkey", "r tty", "r tshirt", "r trumpet", "r truck-ramp", "r truck-plow", "r truck-pickup", "r truck-moving", "r truck-monster", "r truck-loading", "r truck-couch", "r truck-container", "r truck", "r trophy-alt", "r trophy", "r triangle-music", "r triangle", "r trees", "r tree-palm", "r tree-large", "r tree-decorated", "r tree-christmas", "r tree-alt", "r tree", "r treasure-chest", "r trash-undo-alt", "r trash-undo", "r trash-restore-alt", "r trash-restore", "r trash-alt", "r trash", "r transporter-empty", "r transporter-3", "r transporter-2", "r transporter-1", "r transporter", "r transgender-alt", "r transgender", "r tram", "r train", "r trailer", "r traffic-light-stop", "r traffic-light-slow", "r traffic-light-go", "r traffic-light", "r traffic-cone", "r trademark", "r tractor", "r tornado", "r torii-gate", "r torah", "r toothbrush", "r tooth", "r tools", "r toolbox", "r tombstone-alt", "r tombstone", "r toilet-paper-slash", "r toilet-paper-alt", "r toilet-paper", "r toilet", "r toggle-on", "r toggle-off", "r tired", "r tire-rugged", "r tire-pressure-warning", "r tire-flat", "r tire", "r tint-slash", "r tint", "r times-square", "r times-octagon", "r times-hexagon", "r times-circle", "r times", "r tilde", "r ticket-alt", "r ticket", "r thunderstorm-sun", "r thunderstorm-moon", "r thunderstorm", "r thumbtack", "r thumbs-up", "r thumbs-down", "r theta", "r thermometer-three-quarters", "r thermometer-quarter", "r thermometer-half", "r thermometer-full", "r thermometer-empty", "r thermometer", "r theater-masks", "r th-list", "r th-large", "r th", "r text-width", "r text-size", "r text-height", "r text", "r terminal", "r tennis-ball", "r tenge", "r temperature-up", "r temperature-low", "r temperature-hot", "r temperature-high", "r temperature-frigid", "r temperature-down", "r telescope", "r teeth-open", "r teeth", "r taxi", "r tasks-alt", "r tasks", "r tape", "r tanakh", "r tally", "r tags", "r tag", "r taco", "r tachometer-slowest", "r tachometer-slow", "r tachometer-fastest", "r tachometer-fast", "r tachometer-average", "r tachometer-alt-slowest", "r tachometer-alt-slow", "r tachometer-alt-fastest", "r tachometer-alt-fast", "r tachometer-alt-average", "r tachometer-alt", "r tachometer", "r tablets", "r tablet-rugged", "r tablet-android-alt", "r tablet-android", "r tablet-alt", "r tablet", "r table-tennis", "r table", "r syringe", "r sync-alt", "r sync", "r synagogue", "r swords-laser", "r swords", "r sword-laser-alt", "r sword-laser", "r sword", "r swimming-pool", "r swimmer", "r swatchbook", "r surprise", "r superscript", "r sunset", "r sunrise", "r sunglasses", "r sun-haze", "r sun-dust", "r sun-cloud", "r sun", "r suitcase-rolling", "r suitcase", "r subway", "r subscript", "r stroopwafel", "r strikethrough", "r stretcher", "r street-view", "r stream", "r store-slash", "r store-alt-slash", "r store-alt", "r store", "r stopwatch-20", "r stopwatch", "r stop-circle", "r stop", "r stomach", "r stocking", "r sticky-note", "r stethoscope", "r step-forward", "r step-backward", "r steering-wheel", "r steak", "r starship-freighter", "r starship", "r stars", "r starfighter-alt", "r starfighter", "r star-shooting", "r star-of-life", "r star-of-david", "r star-half-alt", "r star-half", "r star-exclamation", "r star-christmas", "r star-and-crescent", "r star", "r stamp", "r staff", "r squirrel", "r square-root-alt", "r square-root", "r square-full", "r square", "r sprinkler", "r spray-can", "r splotch", "r spinner-third", "r spinner", "r spider-web", "r spider-black-widow", "r spider", "r spell-check", "r speakers", "r speaker", "r sparkles", "r spade", "r space-station-moon-alt", "r space-station-moon", "r space-shuttle", "r spa", "r soup", "r sort-up", "r sort-size-up-alt", "r sort-size-up", "r sort-size-down-alt", "r sort-size-down", "r sort-shapes-up-alt", "r sort-shapes-up", "r sort-shapes-down-alt", "r sort-shapes-down", "r sort-numeric-up-alt", "r sort-numeric-up", "r sort-numeric-down-alt", "r sort-numeric-down", "r sort-down", "r sort-circle-up", "r sort-circle-down", "r sort-circle", "r sort-amount-up-alt", "r sort-amount-up", "r sort-amount-down-alt", "r sort-amount-down", "r sort-alt", "r sort-alpha-up-alt", "r sort-alpha-up", "r sort-alpha-down-alt", "r sort-alpha-down", "r sort", "r solar-system", "r solar-panel", "r socks", "r soap", "r snowplow", "r snowmobile", "r snowman", "r snowflakes", "r snowflake", "r snowboarding", "r snow-blowing", "r snooze", "r snake", "r sms", "r smoking-ban", "r smoking", "r smoke", "r smog", "r smile-wink", "r smile-plus", "r smile-beam", "r smile", "r sliders-v-square", "r sliders-v", "r sliders-h-square", "r sliders-h", "r sleigh", "r sledding", "r slash", "r skull-crossbones", "r skull-cow", "r skull", "r skiing-nordic", "r skiing", "r ski-lift", "r ski-jump", "r skeleton", "r skating", "r sitemap", "r siren-on", "r siren", "r sink", "r sim-card", "r signature", "r signal-stream", "r signal-slash", "r signal-alt-slash", "r signal-alt-3", "r signal-alt-2", "r signal-alt-1", "r signal-alt", "r signal-4", "r signal-3", "r signal-2", "r signal-1", "r signal", "r sign-out-alt", "r sign-out", "r sign-language", "r sign-in-alt", "r sign-in", "r sign", "r sigma", "r sickle", "r shuttlecock", "r shuttle-van", "r shredder", "r shower", "r shovel-snow", "r shovel", "r shopping-cart", "r shopping-basket", "r shopping-bag", "r shoe-prints", "r shish-kebab", "r shipping-timed", "r shipping-fast", "r ship", "r shield-virus", "r shield-cross", "r shield-check", "r shield-alt", "r shield", "r shekel-sign", "r sheep", "r share-square", "r share-alt-square", "r share-alt", "r share-all", "r share", "r shapes", "r server", "r sensor-smoke", "r sensor-on", "r sensor-fire", "r sensor-alert", "r sensor", "r send-backward", "r send-back", "r seedling", "r search-plus", "r search-minus", "r search-location", "r search-dollar", "r search", "r sd-card", "r scythe", "r scrubber", "r scroll-old", "r scroll", "r screwdriver", "r school", "r scarf", "r scarecrow", "r scanner-touchscreen", "r scanner-keyboard", "r scanner-image", "r scanner", "r scalpel-path", "r scalpel", "r saxophone", "r sax-hot", "r save", "r sausage", "r satellite-dish", "r satellite", "r sandwich", "r salad", "r sad-tear", "r sad-cry", "r sack-dollar", "r sack", "r rv", "r rupee-sign", "r running", "r ruler-vertical", "r ruler-triangle", "r ruler-horizontal", "r ruler-combined", "r ruler", "r ruble-sign", "r rss-square", "r rss", "r router", "r route-interstate", "r route-highway", "r route", "r rocket-launch", "r rocket", "r robot", "r road", "r rings-wedding", "r ring", "r ribbon", "r retweet-alt", "r retweet", "r restroom", "r republican", "r reply-all", "r reply", "r repeat-alt", "r repeat-1-alt", "r repeat-1", "r repeat", "r remove-format", "r registered", "r refrigerator", "r redo-alt", "r redo", "r recycle", "r rectangle-wide", "r rectangle-portrait", "r rectangle-landscape", "r record-vinyl", "r receipt", "r raygun", "r random", "r ramp-loading", "r ram", "r raindrops", "r rainbow", "r radio-alt", "r radio", "r radiation-alt", "r radiation", "r radar", "r racquet", "r rabbit-fast", "r rabbit", "r quran", "r quote-right", "r quote-left", "r quidditch", "r question-square", "r question-circle", "r question", "r qrcode", "r puzzle-piece", "r pumpkin", "r pump-soap", "r pump-medical", "r projector", "r project-diagram", "r procedures", "r print-slash", "r print-search", "r print", "r presentation", "r prescription-bottle-alt", "r prescription-bottle", "r prescription", "r praying-hands", "r pray", "r power-off", "r pound-sign", "r portrait", "r portal-exit", "r portal-enter", "r popcorn", "r poop", "r poo-storm", "r poo", "r poll-people", "r poll-h", "r poll", "r police-box", "r podium-star", "r podium", "r podcast", "r plus-square", "r plus-octagon", "r plus-hexagon", "r plus-circle", "r plus", "r plug", "r play-circle", "r play", "r planet-ringed", "r planet-moon", "r plane-slash", "r plane-departure", "r plane-arrival", "r plane-alt", "r plane", "r place-of-worship", "r pizza-slice", "r pizza", "r pills", "r piggy-bank", "r pig", "r pie", "r piano-keyboard", "r piano", "r pi", "r photo-video", "r phone-volume", "r phone-square-alt", "r phone-square", "r phone-slash", "r phone-rotary", "r phone-plus", "r phone-office", "r phone-laptop", "r phone-alt", "r phone", "r person-sign", "r person-dolly-empty", "r person-dolly", "r person-carry", "r person-booth", "r percentage", "r percent", "r pepper-hot", "r people-carry", "r people-arrows", "r pennant", "r pencil-ruler", "r pencil-paintbrush", "r pencil-alt", "r pencil", "r pen-square", "r pen-nib", "r pen-fancy", "r pen-alt", "r pen", "r pegasus", "r peace", "r paw-claws", "r paw-alt", "r paw", "r pause-circle", "r pause", "r paste", "r pastafarianism", "r passport", "r parking-slash", "r parking-circle-slash", "r parking-circle", "r parking", "r paragraph-rtl", "r paragraph", "r parachute-box", "r paperclip", "r paper-plane", "r pallet-alt", "r pallet", "r palette", "r paint-roller", "r paint-brush-alt", "r paint-brush", "r pager", "r page-break", "r overline", "r oven", "r outlet", "r outdent", "r otter", "r ornament", "r omega", "r om", "r oil-temp", "r oil-can", "r octagon", "r object-ungroup", "r object-group", "r notes-medical", "r not-equal", "r newspaper", "r neuter", "r network-wired", "r narwhal", "r music-slash", "r music-alt-slash", "r music-alt", "r music", "r mug-tea", "r mug-marshmallows", "r mug-hot", "r mug", "r mp3-player", "r mouse-pointer", "r mouse-alt", "r mouse", "r mountains", "r mountain", "r motorcycle", "r mosque", "r mortar-pestle", "r moon-stars", "r moon-cloud", "r moon", "r monument", "r monkey", "r monitor-heart-rate", "r money-check-edit-alt", "r money-check-edit", "r money-check-alt", "r money-check", "r money-bill-wave-alt", "r money-bill-wave", "r money-bill-alt", "r money-bill", "r mobile-android-alt", "r mobile-android", "r mobile-alt", "r mobile", "r mitten", "r mistletoe", "r minus-square", "r minus-octagon", "r minus-hexagon", "r minus-circle", "r minus", "r mind-share", "r microwave", "r microscope", "r microphone-stand", "r microphone-slash", "r microphone-alt-slash", "r microphone-alt", "r microphone", "r microchip", "r meteor", "r mercury", "r menorah", "r memory", "r meh-rolling-eyes", "r meh-blank", "r meh", "r megaphone", "r medkit", "r medal", "r meat", "r mask", "r mars-stroke-v", "r mars-stroke-h", "r mars-stroke", "r mars-double", "r mars", "r marker", "r map-signs", "r map-pin", "r map-marker-times", "r map-marker-smile", "r map-marker-slash", "r map-marker-question", "r map-marker-plus", "r map-marker-minus", "r map-marker-exclamation", "r map-marker-edit", "r map-marker-check", "r map-marker-alt-slash", "r map-marker-alt", "r map-marker", "r map-marked-alt", "r map-marked", "r map", "r mandolin", "r male", "r mailbox", "r mail-bulk", "r magnet", "r magic", "r mace", "r lungs-virus", "r lungs", "r luggage-cart", "r luchador", "r low-vision", "r loveseat", "r long-arrow-up", "r long-arrow-right", "r long-arrow-left", "r long-arrow-down", "r long-arrow-alt-up", "r long-arrow-alt-right", "r long-arrow-alt-left", "r long-arrow-alt-down", "r lock-open-alt", "r lock-open", "r lock-alt", "r lock", "r location-slash", "r location-circle", "r location-arrow", "r location", "r list-ul", "r list-ol", "r list-music", "r list-alt", "r list", "r lira-sign", "r lips", "r link", "r line-height", "r line-columns", "r lights-holiday", "r lightbulb-slash", "r lightbulb-on", "r lightbulb-exclamation", "r lightbulb-dollar", "r lightbulb", "r light-switch-on", "r light-switch-off", "r light-switch", "r light-ceiling", "r life-ring", "r level-up-alt", "r level-up", "r level-down-alt", "r level-down", "r less-than-equal", "r less-than", "r lemon", "r leaf-oak", "r leaf-maple", "r leaf-heart", "r leaf", "r layer-plus", "r layer-minus", "r layer-group", "r laugh-wink", "r laugh-squint", "r laugh-beam", "r laugh", "r lasso", "r laptop-medical", "r laptop-house", "r laptop-code", "r laptop", "r language", "r landmark-alt", "r landmark", "r lamp-floor", "r lamp-desk", "r lamp", "r lambda", "r knife-kitchen", "r kiwi-bird", "r kite", "r kiss-wink-heart", "r kiss-beam", "r kiss", "r kidneys", "r khanda", "r keynote", "r keyboard", "r key-skeleton", "r key", "r kerning", "r kazoo", "r kaaba", "r jug", "r joystick", "r journal-whills", "r joint", "r jedi", "r jack-o-lantern", "r italic", "r island-tropical", "r inventory", "r intersection", "r integral", "r inhaler", "r info-square", "r info-circle", "r info", "r infinity", "r industry-alt", "r industry", "r indent", "r inbox-out", "r inbox-in", "r inbox", "r images", "r image-polaroid", "r image", "r igloo", "r id-card-alt", "r id-card", "r id-badge", "r icons-alt", "r icons", "r icicles", "r ice-skate", "r ice-cream", "r i-cursor", "r hurricane", "r humidity", "r hryvnia", "r house-user", "r house-signal", "r house-return", "r house-night", "r house-leave", "r house-flood", "r house-day", "r house-damage", "r house", "r hourglass-start", "r hourglass-half", "r hourglass-end", "r hourglass", "r hotel", "r hotdog", "r hot-tub", "r hospitals", "r hospital-user", "r hospital-symbol", "r hospital-alt", "r hospital", "r horse-saddle", "r horse-head", "r horse", "r horizontal-rule", "r hood-cloak", "r home-lg-alt", "r home-lg", "r home-heart", "r home-alt", "r home", "r holly-berry", "r hockey-sticks", "r hockey-puck", "r hockey-mask", "r history", "r hippo", "r hiking", "r highlighter", "r hexagon", "r helmet-battle", "r helicopter", "r heat", "r heartbeat", "r heart-square", "r heart-rate", "r heart-circle", "r heart-broken", "r heart", "r headset", "r headphones-alt", "r headphones", "r heading", "r head-vr", "r head-side-virus", "r head-side-medical", "r head-side-mask", "r head-side-headphones", "r head-side-cough-slash", "r head-side-cough", "r head-side-brain", "r head-side", "r hdd", "r hat-wizard", "r hat-witch", "r hat-winter", "r hat-santa", "r hat-cowboy-side", "r hat-cowboy", "r hat-chef", "r hashtag", "r hard-hat", "r hanukiah", "r handshake-slash", "r handshake-alt-slash", "r handshake-alt", "r handshake", "r hands-wash", "r hands-usd", "r hands-helping", "r hands-heart", "r hands", "r hand-spock", "r hand-sparkles", "r hand-scissors", "r hand-rock", "r hand-receiving", "r hand-pointer", "r hand-point-up", "r hand-point-right", "r hand-point-left", "r hand-point-down", "r hand-peace", "r hand-paper", "r hand-middle-finger", "r hand-lizard", "r hand-holding-water", "r hand-holding-usd", "r hand-holding-seedling", "r hand-holding-medical", "r hand-holding-magic", "r hand-holding-heart", "r hand-holding-box", "r hand-holding", "r hand-heart", "r hamsa", "r hammer-war", "r hammer", "r hamburger", "r h4", "r h3", "r h2", "r h1", "r h-square", "r guitars", "r guitar-electric", "r guitar", "r grip-vertical", "r grip-lines-vertical", "r grip-lines", "r grip-horizontal", "r grin-wink", "r grin-tongue-wink", "r grin-tongue-squint", "r grin-tongue", "r grin-tears", "r grin-stars", "r grin-squint-tears", "r grin-squint", "r grin-hearts", "r grin-beam-sweat", "r grin-beam", "r grin-alt", "r grin", "r grimace", "r greater-than-equal", "r greater-than", "r gramophone", "r graduation-cap", "r gopuram", "r golf-club", "r golf-ball", "r globe-stand", "r globe-snow", "r globe-europe", "r globe-asia", "r globe-americas", "r globe-africa", "r globe", "r glasses-alt", "r glasses", "r glass-whiskey-rocks", "r glass-whiskey", "r glass-martini-alt", "r glass-martini", "r glass-citrus", "r glass-cheers", "r glass-champagne", "r glass", "r gingerbread-man", "r gifts", "r gift-card", "r gift", "r ghost", "r genderless", "r gem", "r gavel", "r gas-pump-slash", "r gas-pump", "r garage-open", "r garage-car", "r garage", "r gamepad-alt", "r gamepad", "r game-console-handheld", "r game-board-alt", "r game-board", "r galaxy", "r futbol", "r funnel-dollar", "r function", "r frown-open", "r frown", "r frosty-head", "r frog", "r french-fries", "r fragile", "r forward", "r forklift", "r football-helmet", "r football-ball", "r font-case", "r font", "r folders", "r folder-upload", "r folder-tree", "r folder-times", "r folder-plus", "r folder-open", "r folder-minus", "r folder-download", "r folder", "r fog", "r flux-capacitor", "r flute", "r flushed", "r flower-tulip", "r flower-daffodil", "r flower", "r flask-potion", "r flask-poison", "r flask", "r flashlight", "r flame", "r flag-usa", "r flag-checkered", "r flag-alt", "r flag", "r fist-raised", "r fish-cooked", "r fish", "r first-aid", "r fireplace", "r fire-smoke", "r fire-extinguisher", "r fire-alt", "r fire", "r fingerprint", "r filter", "r film-canister", "r film-alt", "r film", "r fill-drip", "r fill", "r files-medical", "r file-word", "r file-video", "r file-user", "r file-upload", "r file-times", "r file-spreadsheet", "r file-signature", "r file-search", "r file-prescription", "r file-powerpoint", "r file-plus", "r file-pdf", "r file-music", "r file-minus", "r file-medical-alt", "r file-medical", "r file-invoice-dollar", "r file-invoice", "r file-import", "r file-image", "r file-export", "r file-exclamation", "r file-excel", "r file-edit", "r file-download", "r file-csv", "r file-contract", "r file-code", "r file-check", "r file-chart-pie", "r file-chart-line", "r file-certificate", "r file-audio", "r file-archive", "r file-alt", "r file", "r fighter-jet", "r field-hockey", "r female", "r feather-alt", "r feather", "r fax", "r faucet-drip", "r faucet", "r fast-forward", "r fast-backward", "r farm", "r fan-table", "r fan", "r eye-slash", "r eye-evil", "r eye-dropper", "r eye", "r external-link-square-alt", "r external-link-square", "r external-link-alt", "r external-link", "r expand-wide", "r expand-arrows-alt", "r expand-arrows", "r expand-alt", "r expand", "r exclamation-triangle", "r exclamation-square", "r exclamation-circle", "r exclamation", "r exchange-alt", "r exchange", "r euro-sign", "r ethernet", "r eraser", "r equals", "r envelope-square", "r envelope-open-text", "r envelope-open-dollar", "r envelope-open", "r envelope", "r engine-warning", "r empty-set", "r ellipsis-v-alt", "r ellipsis-v", "r ellipsis-h-alt", "r ellipsis-h", "r elephant", "r eject", "r egg-fried", "r egg", "r edit", "r eclipse-alt", "r eclipse", "r ear-muffs", "r ear", "r dungeon", "r dumpster-fire", "r dumpster", "r dumbbell", "r duck", "r dryer-alt", "r dryer", "r drumstick-bite", "r drumstick", "r drum-steelpan", "r drum", "r drone-alt", "r drone", "r dreidel", "r draw-square", "r draw-polygon", "r draw-circle", "r dragon", "r drafting-compass", "r download", "r dove", "r dot-circle", "r door-open", "r door-closed", "r donate", "r dolly-flatbed-empty", "r dolly-flatbed-alt", "r dolly-flatbed", "r dolly-empty", "r dolly", "r dollar-sign", "r dog-leashed", "r dog", "r do-not-enter", "r dna", "r dizzy", "r divide", "r disease", "r disc-drive", "r directions", "r diploma", "r digital-tachograph", "r digging", "r dice-two", "r dice-three", "r dice-six", "r dice-one", "r dice-four", "r dice-five", "r dice-d8", "r dice-d6", "r dice-d4", "r dice-d20", "r dice-d12", "r dice-d10", "r dice", "r diamond", "r diagnoses", "r dharmachakra", "r dewpoint", "r desktop-alt", "r desktop", "r democrat", "r deer-rudolph", "r deer", "r debug", "r deaf", "r database", "r dagger", "r cut", "r curling", "r cubes", "r cube", "r crutches", "r crutch", "r crown", "r crow", "r crosshairs", "r cross", "r crop-alt", "r crop", "r croissant", "r cricket", "r credit-card-front", "r credit-card-blank", "r credit-card", "r cowbell-more", "r cowbell", "r cow", "r couch", "r corn", "r copyright", "r copy", "r cookie-bite", "r cookie", "r conveyor-belt-alt", "r conveyor-belt", "r container-storage", "r construction", "r concierge-bell", "r computer-speaker", "r computer-classic", "r compress-wide", "r compress-arrows-alt", "r compress-alt", "r compress", "r compass-slash", "r compass", "r compact-disc", "r comments-dollar", "r comments-alt-dollar", "r comments-alt", "r comments", "r comment-times", "r comment-smile", "r comment-slash", "r comment-plus", "r comment-music", "r comment-minus", "r comment-medical", "r comment-lines", "r comment-exclamation", "r comment-edit", "r comment-dots", "r comment-dollar", "r comment-check", "r comment-alt-times", "r comment-alt-smile", "r comment-alt-slash", "r comment-alt-plus", "r comment-alt-music", "r comment-alt-minus", "r comment-alt-medical", "r comment-alt-lines", "r comment-alt-exclamation", "r comment-alt-edit", "r comment-alt-dots", "r comment-alt-dollar", "r comment-alt-check", "r comment-alt", "r comment", "r comet", "r columns", "r coins", "r coin", "r cogs", "r cog", "r coffin-cross", "r coffin", "r coffee-togo", "r coffee-pot", "r coffee", "r code-merge", "r code-commit", "r code-branch", "r code", "r cocktail", "r club", "r clouds-sun", "r clouds-moon", "r clouds", "r cloud-upload-alt", "r cloud-upload", "r cloud-sun-rain", "r cloud-sun", "r cloud-snow", "r cloud-sleet", "r cloud-showers-heavy", "r cloud-showers", "r cloud-rainbow", "r cloud-rain", "r cloud-music", "r cloud-moon-rain", "r cloud-moon", "r cloud-meatball", "r cloud-hail-mixed", "r cloud-hail", "r cloud-drizzle", "r cloud-download-alt", "r cloud-download", "r cloud", "r closed-captioning", "r clone", "r clock", "r clipboard-user", "r clipboard-prescription", "r clipboard-list-check", "r clipboard-list", "r clipboard-check", "r clipboard", "r clinic-medical", "r claw-marks", "r clarinet", "r city", "r circle-notch", "r circle", "r church", "r chimney", "r child", "r chevron-up", "r chevron-square-up", "r chevron-square-right", "r chevron-square-left", "r chevron-square-down", "r chevron-right", "r chevron-left", "r chevron-down", "r chevron-double-up", "r chevron-double-right", "r chevron-double-left", "r chevron-double-down", "r chevron-circle-up", "r chevron-circle-right", "r chevron-circle-left", "r chevron-circle-down", "r chess-rook-alt", "r chess-rook", "r chess-queen-alt", "r chess-queen", "r chess-pawn-alt", "r chess-pawn", "r chess-knight-alt", "r chess-knight", "r chess-king-alt", "r chess-king", "r chess-clock-alt", "r chess-clock", "r chess-board", "r chess-bishop-alt", "r chess-bishop", "r chess", "r cheeseburger", "r cheese-swiss", "r cheese", "r check-square", "r check-double", "r check-circle", "r check", "r chart-scatter", "r chart-pie-alt", "r chart-pie", "r chart-network", "r chart-line-down", "r chart-line", "r chart-bar", "r chart-area", "r charging-station", "r chalkboard-teacher", "r chalkboard", "r chair-office", "r chair", "r certificate", "r cctv", "r cauldron", "r cat-space", "r cat", "r cassette-tape", "r cash-register", "r cart-plus", "r cart-arrow-down", "r cars", "r carrot", "r caret-up", "r caret-square-up", "r caret-square-right", "r caret-square-left", "r caret-square-down", "r caret-right", "r caret-left", "r caret-down", "r caret-circle-up", "r caret-circle-right", "r caret-circle-left", "r caret-circle-down", "r caravan-alt", "r caravan", "r car-wash", "r car-tilt", "r car-side", "r car-mechanic", "r car-garage", "r car-crash", "r car-bus", "r car-bump", "r car-building", "r car-battery", "r car-alt", "r car", "r capsules", "r cannabis", "r candy-corn", "r candy-cane", "r candle-holder", "r campground", "r campfire", "r camera-retro", "r camera-polaroid", "r camera-movie", "r camera-home", "r camera-alt", "r camera", "r camcorder", "r calendar-week", "r calendar-times", "r calendar-star", "r calendar-plus", "r calendar-minus", "r calendar-exclamation", "r calendar-edit", "r calendar-day", "r calendar-check", "r calendar-alt", "r calendar", "r calculator-alt", "r calculator", "r cactus", "r cabinet-filing", "r business-time", "r bus-school", "r bus-alt", "r bus", "r burrito", "r burn", "r burger-soda", "r bullseye-pointer", "r bullseye-arrow", "r bullseye", "r bullhorn", "r building", "r bug", "r brush", "r browser", "r broom", "r broadcast-tower", "r bring-front", "r bring-forward", "r briefcase-medical", "r briefcase", "r bread-slice", "r bread-loaf", "r brain", "r braille", "r brackets-curly", "r brackets", "r boxing-glove", "r boxes-alt", "r boxes", "r box-usd", "r box-up", "r box-tissue", "r box-open", "r box-heart", "r box-full", "r box-fragile", "r box-check", "r box-ballot", "r box-alt", "r box", "r bowling-pins", "r bowling-ball", "r bow-arrow", "r border-top", "r border-style-alt", "r border-style", "r border-right", "r border-outer", "r border-none", "r border-left", "r border-inner", "r border-center-v", "r border-center-h", "r border-bottom", "r border-all", "r booth-curtain", "r boot", "r boombox", "r books-medical", "r books", "r bookmark", "r book-user", "r book-spells", "r book-reader", "r book-open", "r book-medical", "r book-heart", "r book-dead", "r book-alt", "r book", "r bong", "r bone-break", "r bone", "r bomb", "r bolt", "r bold", "r blog", "r blinds-raised", "r blinds-open", "r blinds", "r blind", "r blender-phone", "r blender", "r blanket", "r birthday-cake", "r biohazard", "r binoculars", "r biking-mountain", "r biking", "r bicycle", "r bible", "r bezier-curve", "r betamax", "r bells", "r bell-slash", "r bell-school-slash", "r bell-school", "r bell-plus", "r bell-on", "r bell-exclamation", "r bell", "r beer", "r bed-empty", "r bed-bunk", "r bed-alt", "r bed", "r battery-three-quarters", "r battery-slash", "r battery-quarter", "r battery-half", "r battery-full", "r battery-empty", "r battery-bolt", "r bath", "r bat", "r basketball-hoop", "r basketball-ball", "r baseball-ball", "r baseball", "r bars", "r barcode-scan", "r barcode-read", "r barcode-alt", "r barcode", "r banjo", "r band-aid", "r ban", "r ballot-check", "r ballot", "r ball-pile", "r balance-scale-right", "r balance-scale-left", "r balance-scale", "r bahai", "r bags-shopping", "r badger-honey", "r badge-sheriff", "r badge-percent", "r badge-dollar", "r badge-check", "r badge", "r bacterium", "r bacteria", "r bacon", "r backward", "r backspace", "r backpack", "r baby-carriage", "r baby", "r axe-battle", "r axe", "r award", "r audio-description", "r atom-alt", "r atom", "r atlas", "r at", "r asterisk", "r assistive-listening-systems", "r arrows-v", "r arrows-h", "r arrows-alt-v", "r arrows-alt-h", "r arrows-alt", "r arrows", "r arrow-up", "r arrow-to-top", "r arrow-to-right", "r arrow-to-left", "r arrow-to-bottom", "r arrow-square-up", "r arrow-square-right", "r arrow-square-left", "r arrow-square-down", "r arrow-right", "r arrow-left", "r arrow-from-top", "r arrow-from-right", "r arrow-from-left", "r arrow-from-bottom", "r arrow-down", "r arrow-circle-up", "r arrow-circle-right", "r arrow-circle-left", "r arrow-circle-down", "r arrow-alt-up", "r arrow-alt-to-top", "r arrow-alt-to-right", "r arrow-alt-to-left", "r arrow-alt-to-bottom", "r arrow-alt-square-up", "r arrow-alt-square-right", "r arrow-alt-square-left", "r arrow-alt-square-down", "r arrow-alt-right", "r arrow-alt-left", "r arrow-alt-from-top", "r arrow-alt-from-right", "r arrow-alt-from-left", "r arrow-alt-from-bottom", "r arrow-alt-down", "r arrow-alt-circle-up", "r arrow-alt-circle-right", "r arrow-alt-circle-left", "r arrow-alt-circle-down", "r archway", "r archive", "r apple-crate", "r apple-alt", "r ankh", "r angry", "r angle-up", "r angle-right", "r angle-left", "r angle-down", "r angle-double-up", "r angle-double-right", "r angle-double-left", "r angle-double-down", "r angel", "r anchor", "r analytics", "r amp-guitar", "r american-sign-language-interpreting", "r ambulance", "r allergies", "r align-slash", "r align-right", "r align-left", "r align-justify", "r align-center", "r alien-monster", "r alien", "r alicorn", "r album-collection", "r album", "r alarm-snooze", "r alarm-plus", "r alarm-exclamation", "r alarm-clock", "r air-freshener", "r air-conditioner", "r adjust", "r address-card", "r address-book", "r ad", "r acorn", "r abacus", "l yin-yang", "l yen-sign", "l x-ray", "l wrench", "l wreath", "l won-sign", "l wine-glass-alt", "l wine-glass", "l wine-bottle", "l windsock", "l window-restore", "l window-minimize", "l window-maximize", "l window-frame-open", "l window-frame", "l window-close", "l window-alt", "l window", "l wind-warning", "l wind-turbine", "l wind", "l wifi-slash", "l wifi-2", "l wifi-1", "l wifi", "l whistle", "l wheelchair", "l wheat", "l whale", "l weight-hanging", "l weight", "l webcam-slash", "l webcam", "l waveform-path", "l waveform", "l wave-triangle", "l wave-square", "l wave-sine", "l water-rise", "l water-lower", "l water", "l watch-fitness", "l watch-calculator", "l watch", "l washer", "l warehouse-alt", "l warehouse", "l wand-magic", "l wand", "l wallet", "l walking", "l walkie-talkie", "l walker", "l wagon-covered", "l vr-cardboard", "l vote-yea", "l vote-nay", "l volume-up", "l volume-slash", "l volume-off", "l volume-mute", "l volume-down", "l volume", "l volleyball-ball", "l volcano", "l voicemail", "l viruses", "l virus-slash", "l virus", "l violin", "l vihara", "l video-slash", "l video-plus", "l video", "l vials", "l vial", "l vhs", "l vest-patches", "l vest", "l venus-mars", "l venus-double", "l venus", "l vector-square", "l value-absolute", "l vacuum-robot", "l vacuum", "l utensils-alt", "l utensils", "l utensil-spoon", "l utensil-knife", "l utensil-fork", "l users-slash", "l users-medical", "l users-crown", "l users-cog", "l users-class", "l users", "l user-visor", "l user-unlock", "l user-times", "l user-tie", "l user-tag", "l user-slash", "l user-shield", "l user-secret", "l user-robot", "l user-plus", "l user-nurse", "l user-ninja", "l user-music", "l user-minus", "l user-md-chat", "l user-md", "l user-lock", "l user-injured", "l user-headset", "l user-hard-hat", "l user-graduate", "l user-friends", "l user-edit", "l user-crown", "l user-cowboy", "l user-cog", "l user-clock", "l user-circle", "l user-check", "l user-chart", "l user-astronaut", "l user-alt-slash", "l user-alt", "l user-alien", "l user", "l usd-square", "l usd-circle", "l usb-drive", "l upload", "l unlock-alt", "l unlock", "l unlink", "l university", "l universal-access", "l union", "l unicorn", "l undo-alt", "l undo", "l underline", "l umbrella-beach", "l umbrella", "l ufo-beam", "l ufo", "l typewriter", "l tv-retro", "l tv-music", "l tv-alt", "l tv", "l turtle", "l turntable", "l turkey", "l tty", "l tshirt", "l trumpet", "l truck-ramp", "l truck-plow", "l truck-pickup", "l truck-moving", "l truck-monster", "l truck-loading", "l truck-couch", "l truck-container", "l truck", "l trophy-alt", "l trophy", "l triangle-music", "l triangle", "l trees", "l tree-palm", "l tree-large", "l tree-decorated", "l tree-christmas", "l tree-alt", "l tree", "l treasure-chest", "l trash-undo-alt", "l trash-undo", "l trash-restore-alt", "l trash-restore", "l trash-alt", "l trash", "l transporter-empty", "l transporter-3", "l transporter-2", "l transporter-1", "l transporter", "l transgender-alt", "l transgender", "l tram", "l train", "l trailer", "l traffic-light-stop", "l traffic-light-slow", "l traffic-light-go", "l traffic-light", "l traffic-cone", "l trademark", "l tractor", "l tornado", "l torii-gate", "l torah", "l toothbrush", "l tooth", "l tools", "l toolbox", "l tombstone-alt", "l tombstone", "l toilet-paper-slash", "l toilet-paper-alt", "l toilet-paper", "l toilet", "l toggle-on", "l toggle-off", "l tired", "l tire-rugged", "l tire-pressure-warning", "l tire-flat", "l tire", "l tint-slash", "l tint", "l times-square", "l times-octagon", "l times-hexagon", "l times-circle", "l times", "l tilde", "l ticket-alt", "l ticket", "l thunderstorm-sun", "l thunderstorm-moon", "l thunderstorm", "l thumbtack", "l thumbs-up", "l thumbs-down", "l theta", "l thermometer-three-quarters", "l thermometer-quarter", "l thermometer-half", "l thermometer-full", "l thermometer-empty", "l thermometer", "l theater-masks", "l th-list", "l th-large", "l th", "l text-width", "l text-size", "l text-height", "l text", "l terminal", "l tennis-ball", "l tenge", "l temperature-up", "l temperature-low", "l temperature-hot", "l temperature-high", "l temperature-frigid", "l temperature-down", "l telescope", "l teeth-open", "l teeth", "l taxi", "l tasks-alt", "l tasks", "l tape", "l tanakh", "l tally", "l tags", "l tag", "l taco", "l tachometer-slowest", "l tachometer-slow", "l tachometer-fastest", "l tachometer-fast", "l tachometer-average", "l tachometer-alt-slowest", "l tachometer-alt-slow", "l tachometer-alt-fastest", "l tachometer-alt-fast", "l tachometer-alt-average", "l tachometer-alt", "l tachometer", "l tablets", "l tablet-rugged", "l tablet-android-alt", "l tablet-android", "l tablet-alt", "l tablet", "l table-tennis", "l table", "l syringe", "l sync-alt", "l sync", "l synagogue", "l swords-laser", "l swords", "l sword-laser-alt", "l sword-laser", "l sword", "l swimming-pool", "l swimmer", "l swatchbook", "l surprise", "l superscript", "l sunset", "l sunrise", "l sunglasses", "l sun-haze", "l sun-dust", "l sun-cloud", "l sun", "l suitcase-rolling", "l suitcase", "l subway", "l subscript", "l stroopwafel", "l strikethrough", "l stretcher", "l street-view", "l stream", "l store-slash", "l store-alt-slash", "l store-alt", "l store", "l stopwatch-20", "l stopwatch", "l stop-circle", "l stop", "l stomach", "l stocking", "l sticky-note", "l stethoscope", "l step-forward", "l step-backward", "l steering-wheel", "l steak", "l starship-freighter", "l starship", "l stars", "l starfighter-alt", "l starfighter", "l star-shooting", "l star-of-life", "l star-of-david", "l star-half-alt", "l star-half", "l star-exclamation", "l star-christmas", "l star-and-crescent", "l star", "l stamp", "l staff", "l squirrel", "l square-root-alt", "l square-root", "l square-full", "l square", "l sprinkler", "l spray-can", "l splotch", "l spinner-third", "l spinner", "l spider-web", "l spider-black-widow", "l spider", "l spell-check", "l speakers", "l speaker", "l sparkles", "l spade", "l space-station-moon-alt", "l space-station-moon", "l space-shuttle", "l spa", "l soup", "l sort-up", "l sort-size-up-alt", "l sort-size-up", "l sort-size-down-alt", "l sort-size-down", "l sort-shapes-up-alt", "l sort-shapes-up", "l sort-shapes-down-alt", "l sort-shapes-down", "l sort-numeric-up-alt", "l sort-numeric-up", "l sort-numeric-down-alt", "l sort-numeric-down", "l sort-down", "l sort-circle-up", "l sort-circle-down", "l sort-circle", "l sort-amount-up-alt", "l sort-amount-up", "l sort-amount-down-alt", "l sort-amount-down", "l sort-alt", "l sort-alpha-up-alt", "l sort-alpha-up", "l sort-alpha-down-alt", "l sort-alpha-down", "l sort", "l solar-system", "l solar-panel", "l socks", "l soap", "l snowplow", "l snowmobile", "l snowman", "l snowflakes", "l snowflake", "l snowboarding", "l snow-blowing", "l snooze", "l snake", "l sms", "l smoking-ban", "l smoking", "l smoke", "l smog", "l smile-wink", "l smile-plus", "l smile-beam", "l smile", "l sliders-v-square", "l sliders-v", "l sliders-h-square", "l sliders-h", "l sleigh", "l sledding", "l slash", "l skull-crossbones", "l skull-cow", "l skull", "l skiing-nordic", "l skiing", "l ski-lift", "l ski-jump", "l skeleton", "l skating", "l sitemap", "l siren-on", "l siren", "l sink", "l sim-card", "l signature", "l signal-stream", "l signal-slash", "l signal-alt-slash", "l signal-alt-3", "l signal-alt-2", "l signal-alt-1", "l signal-alt", "l signal-4", "l signal-3", "l signal-2", "l signal-1", "l signal", "l sign-out-alt", "l sign-out", "l sign-language", "l sign-in-alt", "l sign-in", "l sign", "l sigma", "l sickle", "l shuttlecock", "l shuttle-van", "l shredder", "l shower", "l shovel-snow", "l shovel", "l shopping-cart", "l shopping-basket", "l shopping-bag", "l shoe-prints", "l shish-kebab", "l shipping-timed", "l shipping-fast", "l ship", "l shield-virus", "l shield-cross", "l shield-check", "l shield-alt", "l shield", "l shekel-sign", "l sheep", "l share-square", "l share-alt-square", "l share-alt", "l share-all", "l share", "l shapes", "l server", "l sensor-smoke", "l sensor-on", "l sensor-fire", "l sensor-alert", "l sensor", "l send-backward", "l send-back", "l seedling", "l search-plus", "l search-minus", "l search-location", "l search-dollar", "l search", "l sd-card", "l scythe", "l scrubber", "l scroll-old", "l scroll", "l screwdriver", "l school", "l scarf", "l scarecrow", "l scanner-touchscreen", "l scanner-keyboard", "l scanner-image", "l scanner", "l scalpel-path", "l scalpel", "l saxophone", "l sax-hot", "l save", "l sausage", "l satellite-dish", "l satellite", "l sandwich", "l salad", "l sad-tear", "l sad-cry", "l sack-dollar", "l sack", "l rv", "l rupee-sign", "l running", "l ruler-vertical", "l ruler-triangle", "l ruler-horizontal", "l ruler-combined", "l ruler", "l ruble-sign", "l rss-square", "l rss", "l router", "l route-interstate", "l route-highway", "l route", "l rocket-launch", "l rocket", "l robot", "l road", "l rings-wedding", "l ring", "l ribbon", "l retweet-alt", "l retweet", "l restroom", "l republican", "l reply-all", "l reply", "l repeat-alt", "l repeat-1-alt", "l repeat-1", "l repeat", "l remove-format", "l registered", "l refrigerator", "l redo-alt", "l redo", "l recycle", "l rectangle-wide", "l rectangle-portrait", "l rectangle-landscape", "l record-vinyl", "l receipt", "l raygun", "l random", "l ramp-loading", "l ram", "l raindrops", "l rainbow", "l radio-alt", "l radio", "l radiation-alt", "l radiation", "l radar", "l racquet", "l rabbit-fast", "l rabbit", "l quran", "l quote-right", "l quote-left", "l quidditch", "l question-square", "l question-circle", "l question", "l qrcode", "l puzzle-piece", "l pumpkin", "l pump-soap", "l pump-medical", "l projector", "l project-diagram", "l procedures", "l print-slash", "l print-search", "l print", "l presentation", "l prescription-bottle-alt", "l prescription-bottle", "l prescription", "l praying-hands", "l pray", "l power-off", "l pound-sign", "l portrait", "l portal-exit", "l portal-enter", "l popcorn", "l poop", "l poo-storm", "l poo", "l poll-people", "l poll-h", "l poll", "l police-box", "l podium-star", "l podium", "l podcast", "l plus-square", "l plus-octagon", "l plus-hexagon", "l plus-circle", "l plus", "l plug", "l play-circle", "l play", "l planet-ringed", "l planet-moon", "l plane-slash", "l plane-departure", "l plane-arrival", "l plane-alt", "l plane", "l place-of-worship", "l pizza-slice", "l pizza", "l pills", "l piggy-bank", "l pig", "l pie", "l piano-keyboard", "l piano", "l pi", "l photo-video", "l phone-volume", "l phone-square-alt", "l phone-square", "l phone-slash", "l phone-rotary", "l phone-plus", "l phone-office", "l phone-laptop", "l phone-alt", "l phone", "l person-sign", "l person-dolly-empty", "l person-dolly", "l person-carry", "l person-booth", "l percentage", "l percent", "l pepper-hot", "l people-carry", "l people-arrows", "l pennant", "l pencil-ruler", "l pencil-paintbrush", "l pencil-alt", "l pencil", "l pen-square", "l pen-nib", "l pen-fancy", "l pen-alt", "l pen", "l pegasus", "l peace", "l paw-claws", "l paw-alt", "l paw", "l pause-circle", "l pause", "l paste", "l pastafarianism", "l passport", "l parking-slash", "l parking-circle-slash", "l parking-circle", "l parking", "l paragraph-rtl", "l paragraph", "l parachute-box", "l paperclip", "l paper-plane", "l pallet-alt", "l pallet", "l palette", "l paint-roller", "l paint-brush-alt", "l paint-brush", "l pager", "l page-break", "l overline", "l oven", "l outlet", "l outdent", "l otter", "l ornament", "l omega", "l om", "l oil-temp", "l oil-can", "l octagon", "l object-ungroup", "l object-group", "l notes-medical", "l not-equal", "l newspaper", "l neuter", "l network-wired", "l narwhal", "l music-slash", "l music-alt-slash", "l music-alt", "l music", "l mug-tea", "l mug-marshmallows", "l mug-hot", "l mug", "l mp3-player", "l mouse-pointer", "l mouse-alt", "l mouse", "l mountains", "l mountain", "l motorcycle", "l mosque", "l mortar-pestle", "l moon-stars", "l moon-cloud", "l moon", "l monument", "l monkey", "l monitor-heart-rate", "l money-check-edit-alt", "l money-check-edit", "l money-check-alt", "l money-check", "l money-bill-wave-alt", "l money-bill-wave", "l money-bill-alt", "l money-bill", "l mobile-android-alt", "l mobile-android", "l mobile-alt", "l mobile", "l mitten", "l mistletoe", "l minus-square", "l minus-octagon", "l minus-hexagon", "l minus-circle", "l minus", "l mind-share", "l microwave", "l microscope", "l microphone-stand", "l microphone-slash", "l microphone-alt-slash", "l microphone-alt", "l microphone", "l microchip", "l meteor", "l mercury", "l menorah", "l memory", "l meh-rolling-eyes", "l meh-blank", "l meh", "l megaphone", "l medkit", "l medal", "l meat", "l mask", "l mars-stroke-v", "l mars-stroke-h", "l mars-stroke", "l mars-double", "l mars", "l marker", "l map-signs", "l map-pin", "l map-marker-times", "l map-marker-smile", "l map-marker-slash", "l map-marker-question", "l map-marker-plus", "l map-marker-minus", "l map-marker-exclamation", "l map-marker-edit", "l map-marker-check", "l map-marker-alt-slash", "l map-marker-alt", "l map-marker", "l map-marked-alt", "l map-marked", "l map", "l mandolin", "l male", "l mailbox", "l mail-bulk", "l magnet", "l magic", "l mace", "l lungs-virus", "l lungs", "l luggage-cart", "l luchador", "l low-vision", "l loveseat", "l long-arrow-up", "l long-arrow-right", "l long-arrow-left", "l long-arrow-down", "l long-arrow-alt-up", "l long-arrow-alt-right", "l long-arrow-alt-left", "l long-arrow-alt-down", "l lock-open-alt", "l lock-open", "l lock-alt", "l lock", "l location-slash", "l location-circle", "l location-arrow", "l location", "l list-ul", "l list-ol", "l list-music", "l list-alt", "l list", "l lira-sign", "l lips", "l link", "l line-height", "l line-columns", "l lights-holiday", "l lightbulb-slash", "l lightbulb-on", "l lightbulb-exclamation", "l lightbulb-dollar", "l lightbulb", "l light-switch-on", "l light-switch-off", "l light-switch", "l light-ceiling", "l life-ring", "l level-up-alt", "l level-up", "l level-down-alt", "l level-down", "l less-than-equal", "l less-than", "l lemon", "l leaf-oak", "l leaf-maple", "l leaf-heart", "l leaf", "l layer-plus", "l layer-minus", "l layer-group", "l laugh-wink", "l laugh-squint", "l laugh-beam", "l laugh", "l lasso", "l laptop-medical", "l laptop-house", "l laptop-code", "l laptop", "l language", "l landmark-alt", "l landmark", "l lamp-floor", "l lamp-desk", "l lamp", "l lambda", "l knife-kitchen", "l kiwi-bird", "l kite", "l kiss-wink-heart", "l kiss-beam", "l kiss", "l kidneys", "l khanda", "l keynote", "l keyboard", "l key-skeleton", "l key", "l kerning", "l kazoo", "l kaaba", "l jug", "l joystick", "l journal-whills", "l joint", "l jedi", "l jack-o-lantern", "l italic", "l island-tropical", "l inventory", "l intersection", "l integral", "l inhaler", "l info-square", "l info-circle", "l info", "l infinity", "l industry-alt", "l industry", "l indent", "l inbox-out", "l inbox-in", "l inbox", "l images", "l image-polaroid", "l image", "l igloo", "l id-card-alt", "l id-card", "l id-badge", "l icons-alt", "l icons", "l icicles", "l ice-skate", "l ice-cream", "l i-cursor", "l hurricane", "l humidity", "l hryvnia", "l house-user", "l house-signal", "l house-return", "l house-night", "l house-leave", "l house-flood", "l house-day", "l house-damage", "l house", "l hourglass-start", "l hourglass-half", "l hourglass-end", "l hourglass", "l hotel", "l hotdog", "l hot-tub", "l hospitals", "l hospital-user", "l hospital-symbol", "l hospital-alt", "l hospital", "l horse-saddle", "l horse-head", "l horse", "l horizontal-rule", "l hood-cloak", "l home-lg-alt", "l home-lg", "l home-heart", "l home-alt", "l home", "l holly-berry", "l hockey-sticks", "l hockey-puck", "l hockey-mask", "l history", "l hippo", "l hiking", "l highlighter", "l hexagon", "l helmet-battle", "l helicopter", "l heat", "l heartbeat", "l heart-square", "l heart-rate", "l heart-circle", "l heart-broken", "l heart", "l headset", "l headphones-alt", "l headphones", "l heading", "l head-vr", "l head-side-virus", "l head-side-medical", "l head-side-mask", "l head-side-headphones", "l head-side-cough-slash", "l head-side-cough", "l head-side-brain", "l head-side", "l hdd", "l hat-wizard", "l hat-witch", "l hat-winter", "l hat-santa", "l hat-cowboy-side", "l hat-cowboy", "l hat-chef", "l hashtag", "l hard-hat", "l hanukiah", "l handshake-slash", "l handshake-alt-slash", "l handshake-alt", "l handshake", "l hands-wash", "l hands-usd", "l hands-helping", "l hands-heart", "l hands", "l hand-spock", "l hand-sparkles", "l hand-scissors", "l hand-rock", "l hand-receiving", "l hand-pointer", "l hand-point-up", "l hand-point-right", "l hand-point-left", "l hand-point-down", "l hand-peace", "l hand-paper", "l hand-middle-finger", "l hand-lizard", "l hand-holding-water", "l hand-holding-usd", "l hand-holding-seedling", "l hand-holding-medical", "l hand-holding-magic", "l hand-holding-heart", "l hand-holding-box", "l hand-holding", "l hand-heart", "l hamsa", "l hammer-war", "l hammer", "l hamburger", "l h4", "l h3", "l h2", "l h1", "l h-square", "l guitars", "l guitar-electric", "l guitar", "l grip-vertical", "l grip-lines-vertical", "l grip-lines", "l grip-horizontal", "l grin-wink", "l grin-tongue-wink", "l grin-tongue-squint", "l grin-tongue", "l grin-tears", "l grin-stars", "l grin-squint-tears", "l grin-squint", "l grin-hearts", "l grin-beam-sweat", "l grin-beam", "l grin-alt", "l grin", "l grimace", "l greater-than-equal", "l greater-than", "l gramophone", "l graduation-cap", "l gopuram", "l golf-club", "l golf-ball", "l globe-stand", "l globe-snow", "l globe-europe", "l globe-asia", "l globe-americas", "l globe-africa", "l globe", "l glasses-alt", "l glasses", "l glass-whiskey-rocks", "l glass-whiskey", "l glass-martini-alt", "l glass-martini", "l glass-citrus", "l glass-cheers", "l glass-champagne", "l glass", "l gingerbread-man", "l gifts", "l gift-card", "l gift", "l ghost", "l genderless", "l gem", "l gavel", "l gas-pump-slash", "l gas-pump", "l garage-open", "l garage-car", "l garage", "l gamepad-alt", "l gamepad", "l game-console-handheld", "l game-board-alt", "l game-board", "l galaxy", "l futbol", "l funnel-dollar", "l function", "l frown-open", "l frown", "l frosty-head", "l frog", "l french-fries", "l fragile", "l forward", "l forklift", "l football-helmet", "l football-ball", "l font-case", "l font", "l folders", "l folder-upload", "l folder-tree", "l folder-times", "l folder-plus", "l folder-open", "l folder-minus", "l folder-download", "l folder", "l fog", "l flux-capacitor", "l flute", "l flushed", "l flower-tulip", "l flower-daffodil", "l flower", "l flask-potion", "l flask-poison", "l flask", "l flashlight", "l flame", "l flag-usa", "l flag-checkered", "l flag-alt", "l flag", "l fist-raised", "l fish-cooked", "l fish", "l first-aid", "l fireplace", "l fire-smoke", "l fire-extinguisher", "l fire-alt", "l fire", "l fingerprint", "l filter", "l film-canister", "l film-alt", "l film", "l fill-drip", "l fill", "l files-medical", "l file-word", "l file-video", "l file-user", "l file-upload", "l file-times", "l file-spreadsheet", "l file-signature", "l file-search", "l file-prescription", "l file-powerpoint", "l file-plus", "l file-pdf", "l file-music", "l file-minus", "l file-medical-alt", "l file-medical", "l file-invoice-dollar", "l file-invoice", "l file-import", "l file-image", "l file-export", "l file-exclamation", "l file-excel", "l file-edit", "l file-download", "l file-csv", "l file-contract", "l file-code", "l file-check", "l file-chart-pie", "l file-chart-line", "l file-certificate", "l file-audio", "l file-archive", "l file-alt", "l file", "l fighter-jet", "l field-hockey", "l female", "l feather-alt", "l feather", "l fax", "l faucet-drip", "l faucet", "l fast-forward", "l fast-backward", "l farm", "l fan-table", "l fan", "l eye-slash", "l eye-evil", "l eye-dropper", "l eye", "l external-link-square-alt", "l external-link-square", "l external-link-alt", "l external-link", "l expand-wide", "l expand-arrows-alt", "l expand-arrows", "l expand-alt", "l expand", "l exclamation-triangle", "l exclamation-square", "l exclamation-circle", "l exclamation", "l exchange-alt", "l exchange", "l euro-sign", "l ethernet", "l eraser", "l equals", "l envelope-square", "l envelope-open-text", "l envelope-open-dollar", "l envelope-open", "l envelope", "l engine-warning", "l empty-set", "l ellipsis-v-alt", "l ellipsis-v", "l ellipsis-h-alt", "l ellipsis-h", "l elephant", "l eject", "l egg-fried", "l egg", "l edit", "l eclipse-alt", "l eclipse", "l ear-muffs", "l ear", "l dungeon", "l dumpster-fire", "l dumpster", "l dumbbell", "l duck", "l dryer-alt", "l dryer", "l drumstick-bite", "l drumstick", "l drum-steelpan", "l drum", "l drone-alt", "l drone", "l dreidel", "l draw-square", "l draw-polygon", "l draw-circle", "l dragon", "l drafting-compass", "l download", "l dove", "l dot-circle", "l door-open", "l door-closed", "l donate", "l dolly-flatbed-empty", "l dolly-flatbed-alt", "l dolly-flatbed", "l dolly-empty", "l dolly", "l dollar-sign", "l dog-leashed", "l dog", "l do-not-enter", "l dna", "l dizzy", "l divide", "l disease", "l disc-drive", "l directions", "l diploma", "l digital-tachograph", "l digging", "l dice-two", "l dice-three", "l dice-six", "l dice-one", "l dice-four", "l dice-five", "l dice-d8", "l dice-d6", "l dice-d4", "l dice-d20", "l dice-d12", "l dice-d10", "l dice", "l diamond", "l diagnoses", "l dharmachakra", "l dewpoint", "l desktop-alt", "l desktop", "l democrat", "l deer-rudolph", "l deer", "l debug", "l deaf", "l database", "l dagger", "l cut", "l curling", "l cubes", "l cube", "l crutches", "l crutch", "l crown", "l crow", "l crosshairs", "l cross", "l crop-alt", "l crop", "l croissant", "l cricket", "l credit-card-front", "l credit-card-blank", "l credit-card", "l cowbell-more", "l cowbell", "l cow", "l couch", "l corn", "l copyright", "l copy", "l cookie-bite", "l cookie", "l conveyor-belt-alt", "l conveyor-belt", "l container-storage", "l construction", "l concierge-bell", "l computer-speaker", "l computer-classic", "l compress-wide", "l compress-arrows-alt", "l compress-alt", "l compress", "l compass-slash", "l compass", "l compact-disc", "l comments-dollar", "l comments-alt-dollar", "l comments-alt", "l comments", "l comment-times", "l comment-smile", "l comment-slash", "l comment-plus", "l comment-music", "l comment-minus", "l comment-medical", "l comment-lines", "l comment-exclamation", "l comment-edit", "l comment-dots", "l comment-dollar", "l comment-check", "l comment-alt-times", "l comment-alt-smile", "l comment-alt-slash", "l comment-alt-plus", "l comment-alt-music", "l comment-alt-minus", "l comment-alt-medical", "l comment-alt-lines", "l comment-alt-exclamation", "l comment-alt-edit", "l comment-alt-dots", "l comment-alt-dollar", "l comment-alt-check", "l comment-alt", "l comment", "l comet", "l columns", "l coins", "l coin", "l cogs", "l cog", "l coffin-cross", "l coffin", "l coffee-togo", "l coffee-pot", "l coffee", "l code-merge", "l code-commit", "l code-branch", "l code", "l cocktail", "l club", "l clouds-sun", "l clouds-moon", "l clouds", "l cloud-upload-alt", "l cloud-upload", "l cloud-sun-rain", "l cloud-sun", "l cloud-snow", "l cloud-sleet", "l cloud-showers-heavy", "l cloud-showers", "l cloud-rainbow", "l cloud-rain", "l cloud-music", "l cloud-moon-rain", "l cloud-moon", "l cloud-meatball", "l cloud-hail-mixed", "l cloud-hail", "l cloud-drizzle", "l cloud-download-alt", "l cloud-download", "l cloud", "l closed-captioning", "l clone", "l clock", "l clipboard-user", "l clipboard-prescription", "l clipboard-list-check", "l clipboard-list", "l clipboard-check", "l clipboard", "l clinic-medical", "l claw-marks", "l clarinet", "l city", "l circle-notch", "l circle", "l church", "l chimney", "l child", "l chevron-up", "l chevron-square-up", "l chevron-square-right", "l chevron-square-left", "l chevron-square-down", "l chevron-right", "l chevron-left", "l chevron-down", "l chevron-double-up", "l chevron-double-right", "l chevron-double-left", "l chevron-double-down", "l chevron-circle-up", "l chevron-circle-right", "l chevron-circle-left", "l chevron-circle-down", "l chess-rook-alt", "l chess-rook", "l chess-queen-alt", "l chess-queen", "l chess-pawn-alt", "l chess-pawn", "l chess-knight-alt", "l chess-knight", "l chess-king-alt", "l chess-king", "l chess-clock-alt", "l chess-clock", "l chess-board", "l chess-bishop-alt", "l chess-bishop", "l chess", "l cheeseburger", "l cheese-swiss", "l cheese", "l check-square", "l check-double", "l check-circle", "l check", "l chart-scatter", "l chart-pie-alt", "l chart-pie", "l chart-network", "l chart-line-down", "l chart-line", "l chart-bar", "l chart-area", "l charging-station", "l chalkboard-teacher", "l chalkboard", "l chair-office", "l chair", "l certificate", "l cctv", "l cauldron", "l cat-space", "l cat", "l cassette-tape", "l cash-register", "l cart-plus", "l cart-arrow-down", "l cars", "l carrot", "l caret-up", "l caret-square-up", "l caret-square-right", "l caret-square-left", "l caret-square-down", "l caret-right", "l caret-left", "l caret-down", "l caret-circle-up", "l caret-circle-right", "l caret-circle-left", "l caret-circle-down", "l caravan-alt", "l caravan", "l car-wash", "l car-tilt", "l car-side", "l car-mechanic", "l car-garage", "l car-crash", "l car-bus", "l car-bump", "l car-building", "l car-battery", "l car-alt", "l car", "l capsules", "l cannabis", "l candy-corn", "l candy-cane", "l candle-holder", "l campground", "l campfire", "l camera-retro", "l camera-polaroid", "l camera-movie", "l camera-home", "l camera-alt", "l camera", "l camcorder", "l calendar-week", "l calendar-times", "l calendar-star", "l calendar-plus", "l calendar-minus", "l calendar-exclamation", "l calendar-edit", "l calendar-day", "l calendar-check", "l calendar-alt", "l calendar", "l calculator-alt", "l calculator", "l cactus", "l cabinet-filing", "l business-time", "l bus-school", "l bus-alt", "l bus", "l burrito", "l burn", "l burger-soda", "l bullseye-pointer", "l bullseye-arrow", "l bullseye", "l bullhorn", "l building", "l bug", "l brush", "l browser", "l broom", "l broadcast-tower", "l bring-front", "l bring-forward", "l briefcase-medical", "l briefcase", "l bread-slice", "l bread-loaf", "l brain", "l braille", "l brackets-curly", "l brackets", "l boxing-glove", "l boxes-alt", "l boxes", "l box-usd", "l box-up", "l box-tissue", "l box-open", "l box-heart", "l box-full", "l box-fragile", "l box-check", "l box-ballot", "l box-alt", "l box", "l bowling-pins", "l bowling-ball", "l bow-arrow", "l border-top", "l border-style-alt", "l border-style", "l border-right", "l border-outer", "l border-none", "l border-left", "l border-inner", "l border-center-v", "l border-center-h", "l border-bottom", "l border-all", "l booth-curtain", "l boot", "l boombox", "l books-medical", "l books", "l bookmark", "l book-user", "l book-spells", "l book-reader", "l book-open", "l book-medical", "l book-heart", "l book-dead", "l book-alt", "l book", "l bong", "l bone-break", "l bone", "l bomb", "l bolt", "l bold", "l blog", "l blinds-raised", "l blinds-open", "l blinds", "l blind", "l blender-phone", "l blender", "l blanket", "l birthday-cake", "l biohazard", "l binoculars", "l biking-mountain", "l biking", "l bicycle", "l bible", "l bezier-curve", "l betamax", "l bells", "l bell-slash", "l bell-school-slash", "l bell-school", "l bell-plus", "l bell-on", "l bell-exclamation", "l bell", "l beer", "l bed-empty", "l bed-bunk", "l bed-alt", "l bed", "l battery-three-quarters", "l battery-slash", "l battery-quarter", "l battery-half", "l battery-full", "l battery-empty", "l battery-bolt", "l bath", "l bat", "l basketball-hoop", "l basketball-ball", "l baseball-ball", "l baseball", "l bars", "l barcode-scan", "l barcode-read", "l barcode-alt", "l barcode", "l banjo", "l band-aid", "l ban", "l ballot-check", "l ballot", "l ball-pile", "l balance-scale-right", "l balance-scale-left", "l balance-scale", "l bahai", "l bags-shopping", "l badger-honey", "l badge-sheriff", "l badge-percent", "l badge-dollar", "l badge-check", "l badge", "l bacterium", "l bacteria", "l bacon", "l backward", "l backspace", "l backpack", "l baby-carriage", "l baby", "l axe-battle", "l axe", "l award", "l audio-description", "l atom-alt", "l atom", "l atlas", "l at", "l asterisk", "l assistive-listening-systems", "l arrows-v", "l arrows-h", "l arrows-alt-v", "l arrows-alt-h", "l arrows-alt", "l arrows", "l arrow-up", "l arrow-to-top", "l arrow-to-right", "l arrow-to-left", "l arrow-to-bottom", "l arrow-square-up", "l arrow-square-right", "l arrow-square-left", "l arrow-square-down", "l arrow-right", "l arrow-left", "l arrow-from-top", "l arrow-from-right", "l arrow-from-left", "l arrow-from-bottom", "l arrow-down", "l arrow-circle-up", "l arrow-circle-right", "l arrow-circle-left", "l arrow-circle-down", "l arrow-alt-up", "l arrow-alt-to-top", "l arrow-alt-to-right", "l arrow-alt-to-left", "l arrow-alt-to-bottom", "l arrow-alt-square-up", "l arrow-alt-square-right", "l arrow-alt-square-left", "l arrow-alt-square-down", "l arrow-alt-right", "l arrow-alt-left", "l arrow-alt-from-top", "l arrow-alt-from-right", "l arrow-alt-from-left", "l arrow-alt-from-bottom", "l arrow-alt-down", "l arrow-alt-circle-up", "l arrow-alt-circle-right", "l arrow-alt-circle-left", "l arrow-alt-circle-down", "l archway", "l archive", "l apple-crate", "l apple-alt", "l ankh", "l angry", "l angle-up", "l angle-right", "l angle-left", "l angle-down", "l angle-double-up", "l angle-double-right", "l angle-double-left", "l angle-double-down", "l angel", "l anchor", "l analytics", "l amp-guitar", "l american-sign-language-interpreting", "l ambulance", "l allergies", "l align-slash", "l align-right", "l align-left", "l align-justify", "l align-center", "l alien-monster", "l alien", "l alicorn", "l album-collection", "l album", "l alarm-snooze", "l alarm-plus", "l alarm-exclamation", "l alarm-clock", "l air-freshener", "l air-conditioner", "l adjust", "l address-card", "l address-book", "l ad", "l acorn", "l abacus", "d yin-yang", "d yen-sign", "d x-ray", "d wrench", "d wreath", "d won-sign", "d wine-glass-alt", "d wine-glass", "d wine-bottle", "d windsock", "d window-restore", "d window-minimize", "d window-maximize", "d window-frame-open", "d window-frame", "d window-close", "d window-alt", "d window", "d wind-warning", "d wind-turbine", "d wind", "d wifi-slash", "d wifi-2", "d wifi-1", "d wifi", "d whistle", "d wheelchair", "d wheat", "d whale", "d weight-hanging", "d weight", "d webcam-slash", "d webcam", "d waveform-path", "d waveform", "d wave-triangle", "d wave-square", "d wave-sine", "d water-rise", "d water-lower", "d water", "d watch-fitness", "d watch-calculator", "d watch", "d washer", "d warehouse-alt", "d warehouse", "d wand-magic", "d wand", "d wallet", "d walking", "d walkie-talkie", "d walker", "d wagon-covered", "d vr-cardboard", "d vote-yea", "d vote-nay", "d volume-up", "d volume-slash", "d volume-off", "d volume-mute", "d volume-down", "d volume", "d volleyball-ball", "d volcano", "d voicemail", "d viruses", "d virus-slash", "d virus", "d violin", "d vihara", "d video-slash", "d video-plus", "d video", "d vials", "d vial", "d vhs", "d vest-patches", "d vest", "d venus-mars", "d venus-double", "d venus", "d vector-square", "d value-absolute", "d vacuum-robot", "d vacuum", "d utensils-alt", "d utensils", "d utensil-spoon", "d utensil-knife", "d utensil-fork", "d users-slash", "d users-medical", "d users-crown", "d users-cog", "d users-class", "d users", "d user-visor", "d user-unlock", "d user-times", "d user-tie", "d user-tag", "d user-slash", "d user-shield", "d user-secret", "d user-robot", "d user-plus", "d user-nurse", "d user-ninja", "d user-music", "d user-minus", "d user-md-chat", "d user-md", "d user-lock", "d user-injured", "d user-headset", "d user-hard-hat", "d user-graduate", "d user-friends", "d user-edit", "d user-crown", "d user-cowboy", "d user-cog", "d user-clock", "d user-circle", "d user-check", "d user-chart", "d user-astronaut", "d user-alt-slash", "d user-alt", "d user-alien", "d user", "d usd-square", "d usd-circle", "d usb-drive", "d upload", "d unlock-alt", "d unlock", "d unlink", "d university", "d universal-access", "d union", "d unicorn", "d undo-alt", "d undo", "d underline", "d umbrella-beach", "d umbrella", "d ufo-beam", "d ufo", "d typewriter", "d tv-retro", "d tv-music", "d tv-alt", "d tv", "d turtle", "d turntable", "d turkey", "d tty", "d tshirt", "d trumpet", "d truck-ramp", "d truck-plow", "d truck-pickup", "d truck-moving", "d truck-monster", "d truck-loading", "d truck-couch", "d truck-container", "d truck", "d trophy-alt", "d trophy", "d triangle-music", "d triangle", "d trees", "d tree-palm", "d tree-large", "d tree-decorated", "d tree-christmas", "d tree-alt", "d tree", "d treasure-chest", "d trash-undo-alt", "d trash-undo", "d trash-restore-alt", "d trash-restore", "d trash-alt", "d trash", "d transporter-empty", "d transporter-3", "d transporter-2", "d transporter-1", "d transporter", "d transgender-alt", "d transgender", "d tram", "d train", "d trailer", "d traffic-light-stop", "d traffic-light-slow", "d traffic-light-go", "d traffic-light", "d traffic-cone", "d trademark", "d tractor", "d tornado", "d torii-gate", "d torah", "d toothbrush", "d tooth", "d tools", "d toolbox", "d tombstone-alt", "d tombstone", "d toilet-paper-slash", "d toilet-paper-alt", "d toilet-paper", "d toilet", "d toggle-on", "d toggle-off", "d tired", "d tire-rugged", "d tire-pressure-warning", "d tire-flat", "d tire", "d tint-slash", "d tint", "d times-square", "d times-octagon", "d times-hexagon", "d times-circle", "d times", "d tilde", "d ticket-alt", "d ticket", "d thunderstorm-sun", "d thunderstorm-moon", "d thunderstorm", "d thumbtack", "d thumbs-up", "d thumbs-down", "d theta", "d thermometer-three-quarters", "d thermometer-quarter", "d thermometer-half", "d thermometer-full", "d thermometer-empty", "d thermometer", "d theater-masks", "d th-list", "d th-large", "d th", "d text-width", "d text-size", "d text-height", "d text", "d terminal", "d tennis-ball", "d tenge", "d temperature-up", "d temperature-low", "d temperature-hot", "d temperature-high", "d temperature-frigid", "d temperature-down", "d telescope", "d teeth-open", "d teeth", "d taxi", "d tasks-alt", "d tasks", "d tape", "d tanakh", "d tally", "d tags", "d tag", "d taco", "d tachometer-slowest", "d tachometer-slow", "d tachometer-fastest", "d tachometer-fast", "d tachometer-average", "d tachometer-alt-slowest", "d tachometer-alt-slow", "d tachometer-alt-fastest", "d tachometer-alt-fast", "d tachometer-alt-average", "d tachometer-alt", "d tachometer", "d tablets", "d tablet-rugged", "d tablet-android-alt", "d tablet-android", "d tablet-alt", "d tablet", "d table-tennis", "d table", "d syringe", "d sync-alt", "d sync", "d synagogue", "d swords-laser", "d swords", "d sword-laser-alt", "d sword-laser", "d sword", "d swimming-pool", "d swimmer", "d swatchbook", "d surprise", "d superscript", "d sunset", "d sunrise", "d sunglasses", "d sun-haze", "d sun-dust", "d sun-cloud", "d sun", "d suitcase-rolling", "d suitcase", "d subway", "d subscript", "d stroopwafel", "d strikethrough", "d stretcher", "d street-view", "d stream", "d store-slash", "d store-alt-slash", "d store-alt", "d store", "d stopwatch-20", "d stopwatch", "d stop-circle", "d stop", "d stomach", "d stocking", "d sticky-note", "d stethoscope", "d step-forward", "d step-backward", "d steering-wheel", "d steak", "d starship-freighter", "d starship", "d stars", "d starfighter-alt", "d starfighter", "d star-shooting", "d star-of-life", "d star-of-david", "d star-half-alt", "d star-half", "d star-exclamation", "d star-christmas", "d star-and-crescent", "d star", "d stamp", "d staff", "d squirrel", "d square-root-alt", "d square-root", "d square-full", "d square", "d sprinkler", "d spray-can", "d splotch", "d spinner-third", "d spinner", "d spider-web", "d spider-black-widow", "d spider", "d spell-check", "d speakers", "d speaker", "d sparkles", "d spade", "d space-station-moon-alt", "d space-station-moon", "d space-shuttle", "d spa", "d soup", "d sort-up", "d sort-size-up-alt", "d sort-size-up", "d sort-size-down-alt", "d sort-size-down", "d sort-shapes-up-alt", "d sort-shapes-up", "d sort-shapes-down-alt", "d sort-shapes-down", "d sort-numeric-up-alt", "d sort-numeric-up", "d sort-numeric-down-alt", "d sort-numeric-down", "d sort-down", "d sort-circle-up", "d sort-circle-down", "d sort-circle", "d sort-amount-up-alt", "d sort-amount-up", "d sort-amount-down-alt", "d sort-amount-down", "d sort-alt", "d sort-alpha-up-alt", "d sort-alpha-up", "d sort-alpha-down-alt", "d sort-alpha-down", "d sort", "d solar-system", "d solar-panel", "d socks", "d soap", "d snowplow", "d snowmobile", "d snowman", "d snowflakes", "d snowflake", "d snowboarding", "d snow-blowing", "d snooze", "d snake", "d sms", "d smoking-ban", "d smoking", "d smoke", "d smog", "d smile-wink", "d smile-plus", "d smile-beam", "d smile", "d sliders-v-square", "d sliders-v", "d sliders-h-square", "d sliders-h", "d sleigh", "d sledding", "d slash", "d skull-crossbones", "d skull-cow", "d skull", "d skiing-nordic", "d skiing", "d ski-lift", "d ski-jump", "d skeleton", "d skating", "d sitemap", "d siren-on", "d siren", "d sink", "d sim-card", "d signature", "d signal-stream", "d signal-slash", "d signal-alt-slash", "d signal-alt-3", "d signal-alt-2", "d signal-alt-1", "d signal-alt", "d signal-4", "d signal-3", "d signal-2", "d signal-1", "d signal", "d sign-out-alt", "d sign-out", "d sign-language", "d sign-in-alt", "d sign-in", "d sign", "d sigma", "d sickle", "d shuttlecock", "d shuttle-van", "d shredder", "d shower", "d shovel-snow", "d shovel", "d shopping-cart", "d shopping-basket", "d shopping-bag", "d shoe-prints", "d shish-kebab", "d shipping-timed", "d shipping-fast", "d ship", "d shield-virus", "d shield-cross", "d shield-check", "d shield-alt", "d shield", "d shekel-sign", "d sheep", "d share-square", "d share-alt-square", "d share-alt", "d share-all", "d share", "d shapes", "d server", "d sensor-smoke", "d sensor-on", "d sensor-fire", "d sensor-alert", "d sensor", "d send-backward", "d send-back", "d seedling", "d search-plus", "d search-minus", "d search-location", "d search-dollar", "d search", "d sd-card", "d scythe", "d scrubber", "d scroll-old", "d scroll", "d screwdriver", "d school", "d scarf", "d scarecrow", "d scanner-touchscreen", "d scanner-keyboard", "d scanner-image", "d scanner", "d scalpel-path", "d scalpel", "d saxophone", "d sax-hot", "d save", "d sausage", "d satellite-dish", "d satellite", "d sandwich", "d salad", "d sad-tear", "d sad-cry", "d sack-dollar", "d sack", "d rv", "d rupee-sign", "d running", "d ruler-vertical", "d ruler-triangle", "d ruler-horizontal", "d ruler-combined", "d ruler", "d ruble-sign", "d rss-square", "d rss", "d router", "d route-interstate", "d route-highway", "d route", "d rocket-launch", "d rocket", "d robot", "d road", "d rings-wedding", "d ring", "d ribbon", "d retweet-alt", "d retweet", "d restroom", "d republican", "d reply-all", "d reply", "d repeat-alt", "d repeat-1-alt", "d repeat-1", "d repeat", "d remove-format", "d registered", "d refrigerator", "d redo-alt", "d redo", "d recycle", "d rectangle-wide", "d rectangle-portrait", "d rectangle-landscape", "d record-vinyl", "d receipt", "d raygun", "d random", "d ramp-loading", "d ram", "d raindrops", "d rainbow", "d radio-alt", "d radio", "d radiation-alt", "d radiation", "d radar", "d racquet", "d rabbit-fast", "d rabbit", "d quran", "d quote-right", "d quote-left", "d quidditch", "d question-square", "d question-circle", "d question", "d qrcode", "d puzzle-piece", "d pumpkin", "d pump-soap", "d pump-medical", "d projector", "d project-diagram", "d procedures", "d print-slash", "d print-search", "d print", "d presentation", "d prescription-bottle-alt", "d prescription-bottle", "d prescription", "d praying-hands", "d pray", "d power-off", "d pound-sign", "d portrait", "d portal-exit", "d portal-enter", "d popcorn", "d poop", "d poo-storm", "d poo", "d poll-people", "d poll-h", "d poll", "d police-box", "d podium-star", "d podium", "d podcast", "d plus-square", "d plus-octagon", "d plus-hexagon", "d plus-circle", "d plus", "d plug", "d play-circle", "d play", "d planet-ringed", "d planet-moon", "d plane-slash", "d plane-departure", "d plane-arrival", "d plane-alt", "d plane", "d place-of-worship", "d pizza-slice", "d pizza", "d pills", "d piggy-bank", "d pig", "d pie", "d piano-keyboard", "d piano", "d pi", "d photo-video", "d phone-volume", "d phone-square-alt", "d phone-square", "d phone-slash", "d phone-rotary", "d phone-plus", "d phone-office", "d phone-laptop", "d phone-alt", "d phone", "d person-sign", "d person-dolly-empty", "d person-dolly", "d person-carry", "d person-booth", "d percentage", "d percent", "d pepper-hot", "d people-carry", "d people-arrows", "d pennant", "d pencil-ruler", "d pencil-paintbrush", "d pencil-alt", "d pencil", "d pen-square", "d pen-nib", "d pen-fancy", "d pen-alt", "d pen", "d pegasus", "d peace", "d paw-claws", "d paw-alt", "d paw", "d pause-circle", "d pause", "d paste", "d pastafarianism", "d passport", "d parking-slash", "d parking-circle-slash", "d parking-circle", "d parking", "d paragraph-rtl", "d paragraph", "d parachute-box", "d paperclip", "d paper-plane", "d pallet-alt", "d pallet", "d palette", "d paint-roller", "d paint-brush-alt", "d paint-brush", "d pager", "d page-break", "d overline", "d oven", "d outlet", "d outdent", "d otter", "d ornament", "d omega", "d om", "d oil-temp", "d oil-can", "d octagon", "d object-ungroup", "d object-group", "d notes-medical", "d not-equal", "d newspaper", "d neuter", "d network-wired", "d narwhal", "d music-slash", "d music-alt-slash", "d music-alt", "d music", "d mug-tea", "d mug-marshmallows", "d mug-hot", "d mug", "d mp3-player", "d mouse-pointer", "d mouse-alt", "d mouse", "d mountains", "d mountain", "d motorcycle", "d mosque", "d mortar-pestle", "d moon-stars", "d moon-cloud", "d moon", "d monument", "d monkey", "d monitor-heart-rate", "d money-check-edit-alt", "d money-check-edit", "d money-check-alt", "d money-check", "d money-bill-wave-alt", "d money-bill-wave", "d money-bill-alt", "d money-bill", "d mobile-android-alt", "d mobile-android", "d mobile-alt", "d mobile", "d mitten", "d mistletoe", "d minus-square", "d minus-octagon", "d minus-hexagon", "d minus-circle", "d minus", "d mind-share", "d microwave", "d microscope", "d microphone-stand", "d microphone-slash", "d microphone-alt-slash", "d microphone-alt", "d microphone", "d microchip", "d meteor", "d mercury", "d menorah", "d memory", "d meh-rolling-eyes", "d meh-blank", "d meh", "d megaphone", "d medkit", "d medal", "d meat", "d mask", "d mars-stroke-v", "d mars-stroke-h", "d mars-stroke", "d mars-double", "d mars", "d marker", "d map-signs", "d map-pin", "d map-marker-times", "d map-marker-smile", "d map-marker-slash", "d map-marker-question", "d map-marker-plus", "d map-marker-minus", "d map-marker-exclamation", "d map-marker-edit", "d map-marker-check", "d map-marker-alt-slash", "d map-marker-alt", "d map-marker", "d map-marked-alt", "d map-marked", "d map", "d mandolin", "d male", "d mailbox", "d mail-bulk", "d magnet", "d magic", "d mace", "d lungs-virus", "d lungs", "d luggage-cart", "d luchador", "d low-vision", "d loveseat", "d long-arrow-up", "d long-arrow-right", "d long-arrow-left", "d long-arrow-down", "d long-arrow-alt-up", "d long-arrow-alt-right", "d long-arrow-alt-left", "d long-arrow-alt-down", "d lock-open-alt", "d lock-open", "d lock-alt", "d lock", "d location-slash", "d location-circle", "d location-arrow", "d location", "d list-ul", "d list-ol", "d list-music", "d list-alt", "d list", "d lira-sign", "d lips", "d link", "d line-height", "d line-columns", "d lights-holiday", "d lightbulb-slash", "d lightbulb-on", "d lightbulb-exclamation", "d lightbulb-dollar", "d lightbulb", "d light-switch-on", "d light-switch-off", "d light-switch", "d light-ceiling", "d life-ring", "d level-up-alt", "d level-up", "d level-down-alt", "d level-down", "d less-than-equal", "d less-than", "d lemon", "d leaf-oak", "d leaf-maple", "d leaf-heart", "d leaf", "d layer-plus", "d layer-minus", "d layer-group", "d laugh-wink", "d laugh-squint", "d laugh-beam", "d laugh", "d lasso", "d laptop-medical", "d laptop-house", "d laptop-code", "d laptop", "d language", "d landmark-alt", "d landmark", "d lamp-floor", "d lamp-desk", "d lamp", "d lambda", "d knife-kitchen", "d kiwi-bird", "d kite", "d kiss-wink-heart", "d kiss-beam", "d kiss", "d kidneys", "d khanda", "d keynote", "d keyboard", "d key-skeleton", "d key", "d kerning", "d kazoo", "d kaaba", "d jug", "d joystick", "d journal-whills", "d joint", "d jedi", "d jack-o-lantern", "d italic", "d island-tropical", "d inventory", "d intersection", "d integral", "d inhaler", "d info-square", "d info-circle", "d info", "d infinity", "d industry-alt", "d industry", "d indent", "d inbox-out", "d inbox-in", "d inbox", "d images", "d image-polaroid", "d image", "d igloo", "d id-card-alt", "d id-card", "d id-badge", "d icons-alt", "d icons", "d icicles", "d ice-skate", "d ice-cream", "d i-cursor", "d hurricane", "d humidity", "d hryvnia", "d house-user", "d house-signal", "d house-return", "d house-night", "d house-leave", "d house-flood", "d house-day", "d house-damage", "d house", "d hourglass-start", "d hourglass-half", "d hourglass-end", "d hourglass", "d hotel", "d hotdog", "d hot-tub", "d hospitals", "d hospital-user", "d hospital-symbol", "d hospital-alt", "d hospital", "d horse-saddle", "d horse-head", "d horse", "d horizontal-rule", "d hood-cloak", "d home-lg-alt", "d home-lg", "d home-heart", "d home-alt", "d home", "d holly-berry", "d hockey-sticks", "d hockey-puck", "d hockey-mask", "d history", "d hippo", "d hiking", "d highlighter", "d hexagon", "d helmet-battle", "d helicopter", "d heat", "d heartbeat", "d heart-square", "d heart-rate", "d heart-circle", "d heart-broken", "d heart", "d headset", "d headphones-alt", "d headphones", "d heading", "d head-vr", "d head-side-virus", "d head-side-medical", "d head-side-mask", "d head-side-headphones", "d head-side-cough-slash", "d head-side-cough", "d head-side-brain", "d head-side", "d hdd", "d hat-wizard", "d hat-witch", "d hat-winter", "d hat-santa", "d hat-cowboy-side", "d hat-cowboy", "d hat-chef", "d hashtag", "d hard-hat", "d hanukiah", "d handshake-slash", "d handshake-alt-slash", "d handshake-alt", "d handshake", "d hands-wash", "d hands-usd", "d hands-helping", "d hands-heart", "d hands", "d hand-spock", "d hand-sparkles", "d hand-scissors", "d hand-rock", "d hand-receiving", "d hand-pointer", "d hand-point-up", "d hand-point-right", "d hand-point-left", "d hand-point-down", "d hand-peace", "d hand-paper", "d hand-middle-finger", "d hand-lizard", "d hand-holding-water", "d hand-holding-usd", "d hand-holding-seedling", "d hand-holding-medical", "d hand-holding-magic", "d hand-holding-heart", "d hand-holding-box", "d hand-holding", "d hand-heart", "d hamsa", "d hammer-war", "d hammer", "d hamburger", "d h4", "d h3", "d h2", "d h1", "d h-square", "d guitars", "d guitar-electric", "d guitar", "d grip-vertical", "d grip-lines-vertical", "d grip-lines", "d grip-horizontal", "d grin-wink", "d grin-tongue-wink", "d grin-tongue-squint", "d grin-tongue", "d grin-tears", "d grin-stars", "d grin-squint-tears", "d grin-squint", "d grin-hearts", "d grin-beam-sweat", "d grin-beam", "d grin-alt", "d grin", "d grimace", "d greater-than-equal", "d greater-than", "d gramophone", "d graduation-cap", "d gopuram", "d golf-club", "d golf-ball", "d globe-stand", "d globe-snow", "d globe-europe", "d globe-asia", "d globe-americas", "d globe-africa", "d globe", "d glasses-alt", "d glasses", "d glass-whiskey-rocks", "d glass-whiskey", "d glass-martini-alt", "d glass-martini", "d glass-citrus", "d glass-cheers", "d glass-champagne", "d glass", "d gingerbread-man", "d gifts", "d gift-card", "d gift", "d ghost", "d genderless", "d gem", "d gavel", "d gas-pump-slash", "d gas-pump", "d garage-open", "d garage-car", "d garage", "d gamepad-alt", "d gamepad", "d game-console-handheld", "d game-board-alt", "d game-board", "d galaxy", "d futbol", "d funnel-dollar", "d function", "d frown-open", "d frown", "d frosty-head", "d frog", "d french-fries", "d fragile", "d forward", "d forklift", "d football-helmet", "d football-ball", "d font-case", "d font", "d folders", "d folder-upload", "d folder-tree", "d folder-times", "d folder-plus", "d folder-open", "d folder-minus", "d folder-download", "d folder", "d fog", "d flux-capacitor", "d flute", "d flushed", "d flower-tulip", "d flower-daffodil", "d flower", "d flask-potion", "d flask-poison", "d flask", "d flashlight", "d flame", "d flag-usa", "d flag-checkered", "d flag-alt", "d flag", "d fist-raised", "d fish-cooked", "d fish", "d first-aid", "d fireplace", "d fire-smoke", "d fire-extinguisher", "d fire-alt", "d fire", "d fingerprint", "d filter", "d film-canister", "d film-alt", "d film", "d fill-drip", "d fill", "d files-medical", "d file-word", "d file-video", "d file-user", "d file-upload", "d file-times", "d file-spreadsheet", "d file-signature", "d file-search", "d file-prescription", "d file-powerpoint", "d file-plus", "d file-pdf", "d file-music", "d file-minus", "d file-medical-alt", "d file-medical", "d file-invoice-dollar", "d file-invoice", "d file-import", "d file-image", "d file-export", "d file-exclamation", "d file-excel", "d file-edit", "d file-download", "d file-csv", "d file-contract", "d file-code", "d file-check", "d file-chart-pie", "d file-chart-line", "d file-certificate", "d file-audio", "d file-archive", "d file-alt", "d file", "d fighter-jet", "d field-hockey", "d female", "d feather-alt", "d feather", "d fax", "d faucet-drip", "d faucet", "d fast-forward", "d fast-backward", "d farm", "d fan-table", "d fan", "d eye-slash", "d eye-evil", "d eye-dropper", "d eye", "d external-link-square-alt", "d external-link-square", "d external-link-alt", "d external-link", "d expand-wide", "d expand-arrows-alt", "d expand-arrows", "d expand-alt", "d expand", "d exclamation-triangle", "d exclamation-square", "d exclamation-circle", "d exclamation", "d exchange-alt", "d exchange", "d euro-sign", "d ethernet", "d eraser", "d equals", "d envelope-square", "d envelope-open-text", "d envelope-open-dollar", "d envelope-open", "d envelope", "d engine-warning", "d empty-set", "d ellipsis-v-alt", "d ellipsis-v", "d ellipsis-h-alt", "d ellipsis-h", "d elephant", "d eject", "d egg-fried", "d egg", "d edit", "d eclipse-alt", "d eclipse", "d ear-muffs", "d ear", "d dungeon", "d dumpster-fire", "d dumpster", "d dumbbell", "d duck", "d dryer-alt", "d dryer", "d drumstick-bite", "d drumstick", "d drum-steelpan", "d drum", "d drone-alt", "d drone", "d dreidel", "d draw-square", "d draw-polygon", "d draw-circle", "d dragon", "d drafting-compass", "d download", "d dove", "d dot-circle", "d door-open", "d door-closed", "d donate", "d dolly-flatbed-empty", "d dolly-flatbed-alt", "d dolly-flatbed", "d dolly-empty", "d dolly", "d dollar-sign", "d dog-leashed", "d dog", "d do-not-enter", "d dna", "d dizzy", "d divide", "d disease", "d disc-drive", "d directions", "d diploma", "d digital-tachograph", "d digging", "d dice-two", "d dice-three", "d dice-six", "d dice-one", "d dice-four", "d dice-five", "d dice-d8", "d dice-d6", "d dice-d4", "d dice-d20", "d dice-d12", "d dice-d10", "d dice", "d diamond", "d diagnoses", "d dharmachakra", "d dewpoint", "d desktop-alt", "d desktop", "d democrat", "d deer-rudolph", "d deer", "d debug", "d deaf", "d database", "d dagger", "d cut", "d curling", "d cubes", "d cube", "d crutches", "d crutch", "d crown", "d crow", "d crosshairs", "d cross", "d crop-alt", "d crop", "d croissant", "d cricket", "d credit-card-front", "d credit-card-blank", "d credit-card", "d cowbell-more", "d cowbell", "d cow", "d couch", "d corn", "d copyright", "d copy", "d cookie-bite", "d cookie", "d conveyor-belt-alt", "d conveyor-belt", "d container-storage", "d construction", "d concierge-bell", "d computer-speaker", "d computer-classic", "d compress-wide", "d compress-arrows-alt", "d compress-alt", "d compress", "d compass-slash", "d compass", "d compact-disc", "d comments-dollar", "d comments-alt-dollar", "d comments-alt", "d comments", "d comment-times", "d comment-smile", "d comment-slash", "d comment-plus", "d comment-music", "d comment-minus", "d comment-medical", "d comment-lines", "d comment-exclamation", "d comment-edit", "d comment-dots", "d comment-dollar", "d comment-check", "d comment-alt-times", "d comment-alt-smile", "d comment-alt-slash", "d comment-alt-plus", "d comment-alt-music", "d comment-alt-minus", "d comment-alt-medical", "d comment-alt-lines", "d comment-alt-exclamation", "d comment-alt-edit", "d comment-alt-dots", "d comment-alt-dollar", "d comment-alt-check", "d comment-alt", "d comment", "d comet", "d columns", "d coins", "d coin", "d cogs", "d cog", "d coffin-cross", "d coffin", "d coffee-togo", "d coffee-pot", "d coffee", "d code-merge", "d code-commit", "d code-branch", "d code", "d cocktail", "d club", "d clouds-sun", "d clouds-moon", "d clouds", "d cloud-upload-alt", "d cloud-upload", "d cloud-sun-rain", "d cloud-sun", "d cloud-snow", "d cloud-sleet", "d cloud-showers-heavy", "d cloud-showers", "d cloud-rainbow", "d cloud-rain", "d cloud-music", "d cloud-moon-rain", "d cloud-moon", "d cloud-meatball", "d cloud-hail-mixed", "d cloud-hail", "d cloud-drizzle", "d cloud-download-alt", "d cloud-download", "d cloud", "d closed-captioning", "d clone", "d clock", "d clipboard-user", "d clipboard-prescription", "d clipboard-list-check", "d clipboard-list", "d clipboard-check", "d clipboard", "d clinic-medical", "d claw-marks", "d clarinet", "d city", "d circle-notch", "d circle", "d church", "d chimney", "d child", "d chevron-up", "d chevron-square-up", "d chevron-square-right", "d chevron-square-left", "d chevron-square-down", "d chevron-right", "d chevron-left", "d chevron-down", "d chevron-double-up", "d chevron-double-right", "d chevron-double-left", "d chevron-double-down", "d chevron-circle-up", "d chevron-circle-right", "d chevron-circle-left", "d chevron-circle-down", "d chess-rook-alt", "d chess-rook", "d chess-queen-alt", "d chess-queen", "d chess-pawn-alt", "d chess-pawn", "d chess-knight-alt", "d chess-knight", "d chess-king-alt", "d chess-king", "d chess-clock-alt", "d chess-clock", "d chess-board", "d chess-bishop-alt", "d chess-bishop", "d chess", "d cheeseburger", "d cheese-swiss", "d cheese", "d check-square", "d check-double", "d check-circle", "d check", "d chart-scatter", "d chart-pie-alt", "d chart-pie", "d chart-network", "d chart-line-down", "d chart-line", "d chart-bar", "d chart-area", "d charging-station", "d chalkboard-teacher", "d chalkboard", "d chair-office", "d chair", "d certificate", "d cctv", "d cauldron", "d cat-space", "d cat", "d cassette-tape", "d cash-register", "d cart-plus", "d cart-arrow-down", "d cars", "d carrot", "d caret-up", "d caret-square-up", "d caret-square-right", "d caret-square-left", "d caret-square-down", "d caret-right", "d caret-left", "d caret-down", "d caret-circle-up", "d caret-circle-right", "d caret-circle-left", "d caret-circle-down", "d caravan-alt", "d caravan", "d car-wash", "d car-tilt", "d car-side", "d car-mechanic", "d car-garage", "d car-crash", "d car-bus", "d car-bump", "d car-building", "d car-battery", "d car-alt", "d car", "d capsules", "d cannabis", "d candy-corn", "d candy-cane", "d candle-holder", "d campground", "d campfire", "d camera-retro", "d camera-polaroid", "d camera-movie", "d camera-home", "d camera-alt", "d camera", "d camcorder", "d calendar-week", "d calendar-times", "d calendar-star", "d calendar-plus", "d calendar-minus", "d calendar-exclamation", "d calendar-edit", "d calendar-day", "d calendar-check", "d calendar-alt", "d calendar", "d calculator-alt", "d calculator", "d cactus", "d cabinet-filing", "d business-time", "d bus-school", "d bus-alt", "d bus", "d burrito", "d burn", "d burger-soda", "d bullseye-pointer", "d bullseye-arrow", "d bullseye", "d bullhorn", "d building", "d bug", "d brush", "d browser", "d broom", "d broadcast-tower", "d bring-front", "d bring-forward", "d briefcase-medical", "d briefcase", "d bread-slice", "d bread-loaf", "d brain", "d braille", "d brackets-curly", "d brackets", "d boxing-glove", "d boxes-alt", "d boxes", "d box-usd", "d box-up", "d box-tissue", "d box-open", "d box-heart", "d box-full", "d box-fragile", "d box-check", "d box-ballot", "d box-alt", "d box", "d bowling-pins", "d bowling-ball", "d bow-arrow", "d border-top", "d border-style-alt", "d border-style", "d border-right", "d border-outer", "d border-none", "d border-left", "d border-inner", "d border-center-v", "d border-center-h", "d border-bottom", "d border-all", "d booth-curtain", "d boot", "d boombox", "d books-medical", "d books", "d bookmark", "d book-user", "d book-spells", "d book-reader", "d book-open", "d book-medical", "d book-heart", "d book-dead", "d book-alt", "d book", "d bong", "d bone-break", "d bone", "d bomb", "d bolt", "d bold", "d blog", "d blinds-raised", "d blinds-open", "d blinds", "d blind", "d blender-phone", "d blender", "d blanket", "d birthday-cake", "d biohazard", "d binoculars", "d biking-mountain", "d biking", "d bicycle", "d bible", "d bezier-curve", "d betamax", "d bells", "d bell-slash", "d bell-school-slash", "d bell-school", "d bell-plus", "d bell-on", "d bell-exclamation", "d bell", "d beer", "d bed-empty", "d bed-bunk", "d bed-alt", "d bed", "d battery-three-quarters", "d battery-slash", "d battery-quarter", "d battery-half", "d battery-full", "d battery-empty", "d battery-bolt", "d bath", "d bat", "d basketball-hoop", "d basketball-ball", "d baseball-ball", "d baseball", "d bars", "d barcode-scan", "d barcode-read", "d barcode-alt", "d barcode", "d banjo", "d band-aid", "d ban", "d ballot-check", "d ballot", "d ball-pile", "d balance-scale-right", "d balance-scale-left", "d balance-scale", "d bahai", "d bags-shopping", "d badger-honey", "d badge-sheriff", "d badge-percent", "d badge-dollar", "d badge-check", "d badge", "d bacterium", "d bacteria", "d bacon", "d backward", "d backspace", "d backpack", "d baby-carriage", "d baby", "d axe-battle", "d axe", "d award", "d audio-description", "d atom-alt", "d atom", "d atlas", "d at", "d asterisk", "d assistive-listening-systems", "d arrows-v", "d arrows-h", "d arrows-alt-v", "d arrows-alt-h", "d arrows-alt", "d arrows", "d arrow-up", "d arrow-to-top", "d arrow-to-right", "d arrow-to-left", "d arrow-to-bottom", "d arrow-square-up", "d arrow-square-right", "d arrow-square-left", "d arrow-square-down", "d arrow-right", "d arrow-left", "d arrow-from-top", "d arrow-from-right", "d arrow-from-left", "d arrow-from-bottom", "d arrow-down", "d arrow-circle-up", "d arrow-circle-right", "d arrow-circle-left", "d arrow-circle-down", "d arrow-alt-up", "d arrow-alt-to-top", "d arrow-alt-to-right", "d arrow-alt-to-left", "d arrow-alt-to-bottom", "d arrow-alt-square-up", "d arrow-alt-square-right", "d arrow-alt-square-left", "d arrow-alt-square-down", "d arrow-alt-right", "d arrow-alt-left", "d arrow-alt-from-top", "d arrow-alt-from-right", "d arrow-alt-from-left", "d arrow-alt-from-bottom", "d arrow-alt-down", "d arrow-alt-circle-up", "d arrow-alt-circle-right", "d arrow-alt-circle-left", "d arrow-alt-circle-down", "d archway", "d archive", "d apple-crate", "d apple-alt", "d ankh", "d angry", "d angle-up", "d angle-right", "d angle-left", "d angle-down", "d angle-double-up", "d angle-double-right", "d angle-double-left", "d angle-double-down", "d angel", "d anchor", "d analytics", "d amp-guitar", "d american-sign-language-interpreting", "d ambulance", "d allergies", "d align-slash", "d align-right", "d align-left", "d align-justify", "d align-center", "d alien-monster", "d alien", "d alicorn", "d album-collection", "d album", "d alarm-snooze", "d alarm-plus", "d alarm-exclamation", "d alarm-clock", "d air-freshener", "d air-conditioner", "d adjust", "d address-card", "d address-book", "d ad", "d acorn", "d abacus", "b wpressr", "b wodu", "b whmcs", "b watchman-monitoring", "b vnv", "b vaadin", "b ussunnah", "b uniregistry", "b uncharted", "b typo3", "b think-peaks", "b themeco", "b the-red-yeti", "b supple", "b studiovinari", "b sticker-mule", "b speakap", "b sistrix", "b shopware", "b servicestack", "b searchengin", "b schlix", "b rockrms", "b rocketchat", "b rev", "b resolving", "b replyd", "b red-river", "b readme", "b reacteurope", "b quinscape", "b pushed", "b phabricator", "b perbyte", "b palfed", "b page4", "b octopus-deploy", "b nutritionix", "b ns8", "b nimblr", "b napster", "b mizuni", "b mix", "b megaport", "b medrt", "b medapps", "b korvue", "b keycdn", "b joget", "b instalod", "b innosoft", "b hubspot", "b hotjar", "b hornbill", "b hive", "b hips", "b guilded", "b gripfire", "b gofore", "b gitkraken", "b firstdraft", "b dyalog", "b draft2digital", "b dochub", "b discourse", "b deskpro", "b deploydog", "b cuttlefish", "b cpanel", "b cloudversify", "b cloudsmith", "b cloudscale", "b cloudflare", "b centercode", "b buromobelexperte", "b bity", "b bimobject", "b aws", "b avianex", "b asymmetrik", "b apper", "b angrycreative", "b amilia", "b algolia", "b affiliatetheme", "b adversal", "b accusoft"].map(x => `fa${x.replace(" ", " fa-")}`);

/***/ }),

/***/ "./src/modules/components/infogroup/info-group.js":
/*!********************************************************!*\
  !*** ./src/modules/components/infogroup/info-group.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InfoGroup: () => (/* binding */ InfoGroup)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class InfoGroup extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.heading = this.getAttribute("heading") ?? "";
		this.editID = this.getAttribute("edit-id") ?? "";
		this.editable = this.hasAttribute("editable");

		this.classList.add("information-group");
	}

	parsedCallback() {
		const actionBar = this.querySelector(":scope > chip-actionbar");

		if (this.heading || this.editID || actionBar || this.editable) {
			const headerDiv = document.createElementWithContents("div", this.heading, { className: "information-header" });

			if (this.editID || this.editable) {
				const editButton = document.createElementWithContents("chip-button", null, {
					buttonStyle: "icon",
					icon: "fas fa-pencil",
					className: "information__edit",
					variation: "body",
					size: "sm",
					tooltip: "Edit details",
					onclick: () => this.raiseEvent("editclicked")
				});

				if (this.editID) { editButton.id = this.editID; }

				headerDiv.appendChild(editButton);
			}

			if (actionBar) {
				headerDiv.appendChild(actionBar);
			}

			this.prepend(headerDiv);
		}
	}
}

/***/ }),

/***/ "./src/modules/components/infogroup/infogroup-row.js":
/*!***********************************************************!*\
  !*** ./src/modules/components/infogroup/infogroup-row.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InfoGroupRow: () => (/* binding */ InfoGroupRow)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class InfoGroupRow extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["columns"];

	constructor() {
		super();

		this.columns = parseInt(this.getAttribute("columns")) || -1;

		this.classList.add("information-row");
	}

	parsedCallback() {
		if (this.columns === -1) {
			const columnCount = this.querySelectorAll("chip-infovalue").length;

			if (columnCount < 4) {
				this.columns = columnCount;
			}
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "columns") {
			this.columns = parseInt(newValue) || 4;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/infogroup/infogroup-value.js":
/*!*************************************************************!*\
  !*** ./src/modules/components/infogroup/infogroup-value.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InfoGroupValue: () => (/* binding */ InfoGroupValue)
/* harmony export */ });
/* harmony import */ var _dialog_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dialog/toast */ "./src/modules/dialog/toast.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class InfoGroupValue extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["variation", "multiline", "prevent-scroll", "value"];

	constructor() {
		super();

		this.label = this.getAttribute("label") ?? "";
		this.variation = this.getAttribute("variation");
		this.multiline = this.hasAttribute("multiline");
		this.editable = this.hasAttribute("editable");
		this.copyable = this.hasAttribute("copyable");
		this.maxHeight = this.getAttribute("max-height") ?? "";
		this.default = this.getAttribute("default") ?? "&nbsp;";

		if (this.querySelector("chip-dropdown")) {
			this.preventScroll = true;
		}
	}

	parsedCallback() {
		this.classList.add("information-column");

		const valueElement = document.createElementWithContents("div", this.innerHTML.trim() !== "" ? this.childNodes : this.default,
			{
				className: `information__value${this.multiline ? " smart-wrap" : ""} ${this.innerHTML.trim() === "" ? "information__value--empty" : ""}`.trim()
			});

		if (this.maxHeight) {
			valueElement.tabIndex = 0;
		}

		this.appendChild(valueElement);

		if (this.label || this.editable || this.copyable) {
			const labelDiv = document.createElementWithContents("div", this.label, { className: "information__description" });

			if (this.editable) {
				const editButton = document.createElementWithContents("chip-button", null, {
					buttonStyle: "icon",
					icon: "fas fa-pencil",
					className: "information__edit",
					variation: "body",
					size: "sm",
					tooltip: "Edit",
					onclick: () => this.raiseEvent("editclicked")
				});

				labelDiv.appendChild(editButton);
			}

			if (this.copyable) {
				const copyButton = document.createElementWithContents("chip-button", null, {
					buttonStyle: "icon",
					icon: "fas fa-copy",
					className: "information__copy",
					variation: "body",
					size: "xs",
					tooltip: "Copy",
					onclick: () => {
						if (this.oncopyclicked) {
							this.oncopyclicked();
						} else {
							writeClipboardText(valueElement.classList.contains("information__value--empty") ? "" : valueElement.textContent.trim()).then(() => _dialog_toast__WEBPACK_IMPORTED_MODULE_0__.Toast.ShowSuccess(Localizer.SUCCESS_TITLE, Localizer.COPIED_VALUE));
						}
					}
				});

				labelDiv.appendChild(copyButton);
			}

			this.prepend(labelDiv);
		}
	}

	SetText(text) {
		const container = this.querySelector(".information__value");

		if (container) {
			container.textContent = text;

			if (container.innerHTML.trim() === "") {
				container.classList.add("information__value--empty");
				container.innerHTML = this.default;
			} else {
				container.classList.remove("information__value--empty");
			}
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "value") {
			const element = this.querySelector(".information__value");
			element.innerHTML = newValue?.trim() ?? this.default;

			element.toggleClass("information__value--empty", !newValue?.trim());
		}
	}
}

/***/ }),

/***/ "./src/modules/components/input/input.js":
/*!***********************************************!*\
  !*** ./src/modules/components/input/input.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Input: () => (/* binding */ Input)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class Input extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["value", "placeholder", "icon-style", "type", "suffix-button", "suffix-tooltip", "readonly", "variation", "helper-text", "required", "max-length"];

	#Mappers = {};

	#GetSearchedItems = null;
	#InputTimeout;
	#Dropdown = null;

	constructor() {
		super();

		this.InitializeValidationMessages();

		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);
		this.label = this.getAttribute("label");
		this.description = this.getAttribute("description");
		this.disableMessages = this.hasAttribute("disable-messages");
		this.secondaryLabel = this.getAttribute("secondary-label") ?? "";
		this.showPasswordButton = this.hasAttribute("show-password-button");
		this.suffixIcon = this.getAttribute("suffix-icon") ?? "";
		this.prefixIcon = this.getAttribute("prefix-icon") ?? "";
		this.orientation = this.getAttribute("orientation");
		this.variation = this.getAttribute("variation") ?? "";
		this.readonly = this.hasAttribute("readonly");
		this.labelTooltip = this.getAttribute("label-tooltip");
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.casing = this.getAttribute("casing") ?? "";
		this.type = this.getAttribute("type") ?? "text";
		this.size = this.getAttribute("size");
		this.prefixButton = this.getAttribute("prefix-button") ?? "";
		this.suffixButton = this.getAttribute("suffix-button") ?? "";
		this.prefixTooltip = this.getAttribute("prefix-tooltip") ?? "";
		this.suffixTooltip = this.getAttribute("suffix-tooltip") ?? "";
		this.prefixDescription = this.getAttribute("prefix-description");
		this.suffixDescription = this.getAttribute("suffix-description");
		this.route = this.getAttribute("route") ?? "";
		this.searchParameter = this.getAttribute("search-parameter") ?? "q";
		this.maxLength = this.getAttribute("max-length") ?? "";

		if (this.type === "password" && this.showPasswordButton) {
			this.suffixButton = "fas fa-eye";
			this.suffixTooltip = "Show password";

			this.addEventListener("suffixclick", () => {
				if (this.type === "password") {
					this.suffixButton = "fas fa-eye-slash";
					this.type = "text";
					this.suffixTooltip = "Hide password";
				} else {
					this.suffixButton = "fas fa-eye";
					this.type = "password";
					this.suffixTooltip = "Show password";
				}
			});
		}

		if (this.type === "search" && !this.prefixIcon && !this.prefixButton) {
			this.prefixIcon = "fal fa-search";
		}

		this.value = (() => {
			switch (this.casing.toLowerCase()) {
				case "uppercase": return this.getAttribute("value")?.toUpperCase();
				case "lowercase": return this.getAttribute("value")?.toLowerCase();
				default: return this.getAttribute("value")
			}
		})() ?? "";

		this.initialValue = this.value;

		this.#Mappers = {
			list: this.getAttribute("list"),
			max: this.getAttribute("max"),
			maxlength: this.maxLength,
			min: this.getAttribute("min"),
			form: this.getAttribute("form"),
			minlength: this.getAttribute("minlength"),
			name: this.getAttribute("name"),
			autofocus: this.hasAttribute("focus"),
			autocomplete: this.getAttribute("autocomplete"),
			pattern: this.getAttribute("pattern"),
			placeholder: this.getAttribute("placeholder"),
			readonly: this.readonly,
			required: this.hasAttribute("required"),
			step: this.getAttribute("step"),
			tabIndex: this.getAttribute("tabindex") ?? ""
		};

		if (this.closest("form") && !this.#Mappers.name) {
			this.#Mappers.name = this.id ?? this.identifier;
		}

		if (this.type.toLowerCase() === "date" && !this.#Mappers.max) {
			this.#Mappers.max = "9999-12-31";
		}

		Object.keys(this.#Mappers).forEach(key => this[key] = this.#Mappers[key]);
	}

	get GetSearchedItems() {
		return this.#GetSearchedItems;
	}

	set GetSearchedItems(value) {
		this.#GetSearchedItems = value;

		const dropdown = this.querySelector("chip-dropdown");

		if (dropdown) {
			dropdown.GetSearchedItems = value;

			if (this.value) {
				this.#ForceAutocomplete(this.querySelector("input"));
			}
		}
	}

	#OnInput(input, wasDynamic) {
		// Other types will error when setting these values
		if (["text", "search", "url", "tel", "password"].includes(this.type.toLowerCase())) {
			const trueValue = (() => {
				switch (this.casing.toLowerCase()) {
					case "uppercase": return input.value.toUpperCase();
					case "lowercase": return input.value.toLowerCase();
					default: return input.value
				}
			})() ?? "";

			Object.assign(input, {
				value: trueValue,
				selectionEnd: input.selectionStart
			});

			this.value = trueValue;
		} else {
			this.value = input.value;
		}

		if (this.#Dropdown && !wasDynamic) {
			if (this.#InputTimeout) {
				clearTimeout(this.#InputTimeout);
			}

			this.#InputTimeout = setTimeout(() => {
				this.#ForceAutocomplete(input);
			}, 500);
		}
	}

	#ForceAutocomplete(input) {
		const value = input?.value ?? this.value;

		this.#Dropdown?.Search(value).then(() => {
			if (!this.#Dropdown.querySelector("chip-dropdownitem") || value.trim() === "") {
				this.#Dropdown.Close();
			} else {
				this.#Dropdown.Open();
			}
		});
	}

	parsedCallback() {
		this.removeAttribute("tabindex");

		const element = document.createElementWithContents("div",
			`
				<div class="input__wrapper">
					<input class="input-field"/>
				</div>
			`.trim()
		),
			input = element.querySelector("input");

		Object.assign(input, {
			type: this.type,
			value: this.value,
			id: this.identifier
		});

		if (this.helperText) {
			const helperTextMethod = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() === "gov" ? "prepend" : "appendChild";

			element[helperTextMethod](document.createElementWithContents("div", this.helperText, { className: "input-field__helper-text" }));
		}

		this.#Dropdown = this.querySelector(":scope>chip-dropdown");

		if (this.#Dropdown) {
			this.#ForceAutocomplete(input);
		}

		const label = document.createElementWithContents("label", this.label, {
			className: "input-field__label",
			htmlFor: this.identifier
		});

		if (this.labelTooltip) {
			const labelIcon = document.createElementWithContents("chip-icon", null, { icon: "fas fa-info-circle" });
			labelIcon.setAttribute("tooltip", this.labelTooltip);

			label.appendChild(labelIcon);
		}

		if (this.secondaryLabel) { label.appendChild(document.createElementWithContents("span", this.secondaryLabel, { className: "input-field__label--secondary" })); }

		if (!this.orientation) {
			element.prepend(label);
		} else {
			element.querySelector(".input__wrapper").prepend(label);
		}

		input.onchange = ev => {
			ev.preventDefault();
			ev.stopPropagation();

			this.reportValidity();
			this.closest("chip-form")?.checkValidity();

			this.raiseEvent("change");
		}

		input.addEventListener("input", () => this.#OnInput(input));

		if (this.type === "search") {
			input.addEventListener("keyup", ev => {
				if (ev.key === "Enter") {
					if (this.route) {
						const url = Object.assign(new URL(_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.route)), {
							hash: ""
						});

						if (input.value.trim() === "") {
							url.searchParams.delete(this.searchParameter);
						} else {
							url.searchParams.set(this.searchParameter, input.value.trim());
						}

						location.href = url;
					} else {
						_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.SetURLParameter(this.searchParameter, input.value.trim() === "" ? null : input.value.trim());
					}
				}
			});
		}

		if (this.#Dropdown) {
			input.addEventListener("keydown", ev => {
				if (ev.key === "ArrowUp") {
					this.#Dropdown.ArrowUp(ev);
				} else if (ev.key === "ArrowDown") {
					this.#Dropdown.ArrowDown(ev);
				}
			});

			if (this.GetSearchedItems) {
				this.#Dropdown.GetSearchedItems = this.GetSearchedItems;
			}

			this.#Dropdown.onselectionchange = () => {
				this.value = this.#Dropdown.value || this.#Dropdown.selectedText;
				this.raiseEvent("dropdownselected", { item: this.#Dropdown.selectedItem });
			}

			input.addEventListener("focus", () => {
				if (input.value.trim() !== "") {
					this.#Dropdown.Open();
				}

				this.raiseEvent("focus");
			});
		}

		if (this.closest("chip-dropdown")) {
			input.onchange = ev => {
				ev.preventDefault();
				ev.halt();
			}
		}

		if (this.suffixIcon) { input.classList.add("border-right-none", "br-right-none"); }
		if (this.type === "date") { input.addEventListener("keydown", this.#HandleDateKeydown); }

		this.#renderFixes(input);

		if (!this.label && !this.secondaryLabel) { element.querySelector("label").remove(); }
		if (!this.label && this.#Mappers.placeholder) { input.ariaLabel = this.#Mappers.placeholder; }

		Object.keys(this.#Mappers).filter(x => this.#Mappers[x])
			.forEach(key => input.setAttribute(key, this.#Mappers[key] === true ? "" : this.#Mappers[key]));

		if (this.description) { input.ariaLabel = this.description; }

		this.prepend(...element.childNodes);
	}

	#renderFixes(input) {
		if (this.prefixButton) {
			const prefixDropdown = this.querySelector("chip-prefixdropdown"),
				pfxButton = document.createElementWithContents(!prefixDropdown ? "chip-button" : "chip-dropdownbutton", null, {
					className: "input__bound",
					buttonStyle: "icon",
					icon: this.prefixButton,
					variation: "body",
					onclick: () => this.raiseEvent("prefixclick")
				});

			if (prefixDropdown) {
				pfxButton.appendChild(prefixDropdown.firstElementChild);
				prefixDropdown.remove();
			}

			input.insertAdjacentElement("beforebegin", pfxButton);
		} else if (this.prefixIcon) {
			input.insertAdjacentElement("beforebegin", document.createElementWithContents("span", document.createElementWithContents("chip-icon", null, { icon: this.prefixIcon }), { className: "input__bound" }));
		}

		if (this.suffixButton) {
			const suffixDropdown = this.querySelector("chip-suffixdropdown"),
				sfxButton = document.createElementWithContents(!suffixDropdown ? "chip-button" : "chip-dropdownbutton", null, {
					className: "input__bound",
					buttonStyle: "icon",
					icon: this.suffixButton,
					variation: "body",
					onclick: () => this.raiseEvent("suffixclick")
				});

			if (suffixDropdown) {
				sfxButton.appendChild(suffixDropdown.firstElementChild);
				suffixDropdown.remove();
			}

			input.insertAdjacentElement("afterend", sfxButton);
		} else if (this.suffixIcon) {
			input.insertAdjacentElement("afterend", document.createElementWithContents("span", document.createElementWithContents("chip-icon", null, { icon: this.suffixIcon }), { className: "input__bound" }));
		}

		if (this.prefixTooltip && input.previousElementSibling) { input.previousElementSibling.tooltip = this.prefixTooltip; }
		if (this.suffixTooltip && input.nextElementSibling) { input.nextElementSibling.tooltip = this.suffixTooltip; }

		if (this.prefixDescription && input.previousElementSibling) { input.previousElementSibling.description = this.prefixDescription; }
		if (this.suffixDescription && input.nextElementSibling) { input.nextElementSibling.description = this.suffixDescription; }
	}

	attributeChanged(name, _, newValue) {
		switch (name) {
			case "placeholder":
			case "type":
				this.querySelector("input")[name] = newValue ?? "";
				break;
			case "max-length":
				this.querySelector("input").maxLength = newValue ?? "";
				break;
			case "required":
				{
					const input = this.querySelector("input");

					if (input) {
						input.required = this.IsAttributeValueTrue(newValue);
					}
				}
				break;
			case "value":
				{
					const input = this.querySelector("input");

					input.value = newValue;
					this.#OnInput(input, true);
				}
				break;
			case "suffix-button":
				this.querySelector("input+chip-button.input__bound").icon = newValue;
				break;
			case "suffix-tooltip":
				this.querySelector("input+.input__bound")?.setAttribute("tooltip", newValue);
				break;
			case "readonly":
				this.querySelector("input").readOnly = this.IsAttributeValueTrue(newValue);
				break;
			case "helper-text":
				{
					const existing = this.querySelector(".input-field__helper-text");

					if (existing) {
						if (newValue) {
							existing.textContent = newValue;
						} else {
							existing.remove();
						}
					} else {
						this.appendChild(document.createElementWithContents("div", newValue, { className: "input-field__helper-text" }));
					}
				}
				break;
		}
	}

	checkValidity() {
		const input = this.querySelector("input"),
			isValid = input?.checkValidity() ?? false;

		this.validationMessage = this.GetValidationMessage(input);

		return isValid;
	}

	setInvalid(message) {
		this.querySelector(".input-field__validation-error")?.remove();

		const input = this.querySelector("input"),
			msgElement = document.createElementWithContents("div", message, { className: "input-field__validation-error" });

		if (!this.disableMessages) {
			if (_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() === "gov") {
				this.querySelector(".input__wrapper").insertAdjacentElement("beforebegin", msgElement);
			} else {
				this.appendChild(msgElement);
			}
		}

		input.classList.add("input-field__invalid");

		this.querySelectorAll(".input__bound").forEach(x => x.classList.add("input-field__invalid"));
	}

	reportValidity() {
		const validity = this.checkValidity();

		this.querySelector(".input-field__validation-error")?.remove();
		this.querySelectorAll(".input-field__invalid").forEach(x => x.removeClass("input-field__invalid"));

		if (!validity) {
			this.setInvalid(this.validationMessage);
		}

		return validity;
	}

	focus() {
		this.querySelector("input")?.focus();
	}

	select() {
		this.querySelector("input")?.select();
	}

	#HandleDateKeydown(ev) {
		let date;
		const { target } = ev;

		if (ev.key?.toUpperCase() === "T") { date = new Date(); }
		else if (ev.key?.toUpperCase() === "Y") { date = new Date(new Date().setDate(new Date().getDate() - 1)); }

		if (date) {
			try {
				target.valueAsDate = date;
			} catch {
				target.value = date.toISOString().slice(0, 19);
			}

			target.dispatchEvent(new Event("input", {
				view: window,
				bubbles: true,
				cancelable: false
			}));
		}
	}
}

/***/ }),

/***/ "./src/modules/components/label/label.js":
/*!***********************************************!*\
  !*** ./src/modules/components/label/label.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Label: () => (/* binding */ Label)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Label extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.type = this.getAttribute("type") ?? "";
		this.for = this.getAttribute("for") ?? "";
		this.size = this.getAttribute("size") ?? "";

		if (this.type === "secondary") {
			this.classList.add("input-field__helper-text");
		} else {
			this.classList.add("input-field__label");
		}
	}

	parsedCallback() {
		const element = document.createElementWithContents(this.for ? "label" : "span", this.childNodes);

		if (this.for) {
			const forTarget = document.getElementById(this.for);

			if (forTarget?.matches("chip-input, chip-checkbox, chip-textarea, chip-radio, chip-colourpicker, chip-button")) {
				element.htmlFor = forTarget.identifier;
			} else {
				element.htmlFor = this.for;
			}
		}

		this.appendChild(element);
	}
}

/***/ }),

/***/ "./src/modules/components/link/link.js":
/*!*********************************************!*\
  !*** ./src/modules/components/link/link.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Link: () => (/* binding */ Link)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class Link extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	constructor() {
		super();

		this.href = this.getAttribute("href") ?? "";
		this.target = this.getAttribute("target") ?? "";
		this.rel = this.getAttribute("rel") ?? "";
		this.download = this.hasAttribute("download");
	}

	parsedCallback() {
		const anchor = document.createElementWithContents("a", this.childNodes, {
			href: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.href)
		});

		if (this.target) { anchor.target = this.target; }
		if (this.rel) { anchor.rel = this.rel; }
		if (this.download) { anchor.download = true; }

		this.appendChild(anchor);
	}
}

/***/ }),

/***/ "./src/modules/components/list-view.js":
/*!*********************************************!*\
  !*** ./src/modules/components/list-view.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListView: () => (/* binding */ ListView)
/* harmony export */ });
class ListView {
	constructor(element) {
		this.View = element;

		this.OnOpenLink = null;
	}

	Search(query) {
		const items = [...this.View.querySelectorAll(".list-view-item")];

		if (items.length) {
			const newSet = items.search(query, "textContent", -1);

			items.forEach(item => {
				item.toggleClass("d-none", !newSet.includes(item) && query.trim() !== "");

				if (item.classList.contains("d-none")) {
					item.removeClass("active");
				}
			});

			this.View.querySelectorAll(".collapse").forEach(collapser => {
				const hide = !collapser.querySelector(".list-view-item:not(.d-none)");

				collapser.toggleClass("d-none", hide);
				document.querySelector(`[data-bs-target='#${collapser.id}']`)?.toggleClass("d-none", hide);
			});
		}
	}

	static RefreshListViews() {
		document.querySelectorAll(".list-view").forEach(x => x.ListView ??= new ListView(x));
	}
}

/***/ }),

/***/ "./src/modules/components/list/list-item.js":
/*!**************************************************!*\
  !*** ./src/modules/components/list/list-item.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListItem: () => (/* binding */ ListItem)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class ListItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["hide"];

	constructor() {
		super();

		this.hide = this.hasAttribute("hide");
	}

	parsedCallback() {
		if (this.closest("chip-list")?.hasAttribute("clickable")) {
			this.appendChild(document.createElementWithContents("chip-button", this.childNodes, {
				variation: "body",
				className: "list--button"
			}));
		}
	}
}

/***/ }),

/***/ "./src/modules/components/list/list.js":
/*!*********************************************!*\
  !*** ./src/modules/components/list/list.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   List: () => (/* binding */ List)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class List extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	#showingAll = true;

	constructor() {
		super();

		this.ordered = this.hasAttribute("ordered");
		this.flush = this.hasAttribute("flush");
		this.type = this.getAttribute("type");
		this.orientation = this.getAttribute("orientation");
		this.gap = this.getAttribute("gap");
		this.initialShow = parseInt(this.getAttribute("initial-show")) || -1;
		this.clickable = this.hasAttribute("clickable");
		this.buttonPadding = this.getAttribute("button-padding");
	}

	addItem(item, list) {
		list ??= this.querySelector(":scope>ul, :scope>ol");

		if (list) {
			list.appendChild(document.createElementWithContents("li", item));
		}
	}

	getItems() {
		return [...this.querySelectorAll(":scope>chip-listitem, :scope>*>li>chip-listitem")];
	}

	toggleVisibility() {
		if (this.initialShow > -1) {
			if (!this.#showingAll) {
				this.getItems().forEach(x => x.hide = false);
			} else {
				this.getItems().forEach((item, ix) => item.hide = ix >= this.initialShow);
			}

			this.#showingAll = !this.#showingAll;
		}
	}

	removeItem(item) {
		if (item.parentElement?.nodeName === "LI") { item.parentElement.remove(); }
		else { item.remove(); }
	}

	parsedCallback() {
		const list = document.createElement(this.ordered ? "ol" : "ul");

		this.querySelectorAll(":scope > chip-listitem").forEach(item => this.addItem(item, list));

		if (this.flush) { list.classList.add("list-flush"); }
		if (this.gap) { list.classList.add(`spaced-list--${this.gap}`); }

		this.appendChild(list);

		this.toggleVisibility();
	}
}

/***/ }),

/***/ "./src/modules/components/loading/loading.js":
/*!***************************************************!*\
  !*** ./src/modules/components/loading/loading.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Loading: () => (/* binding */ Loading)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Loading extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["type", "size"];

	constructor() {
		super();

		this.size = this.getAttribute("size");
		this.type = this.getAttribute("type");
	}

	parsedCallback() {
		this.#ChangeType();
	}

	#ChangeType() {
		this.innerHTML = (() => {
			switch (this.type?.toLowerCase()) {
				case "image": return '<div class="loading--image"></div>';
				default: return '<div class="pv-loading-container"><div class="pv-loading-icon"></div></div>';
			}
		})();
	}

	attributeChanged(name, _, __) {
		if (name === "type") {
			this.#ChangeType();
		}
	}
}

/***/ }),

/***/ "./src/modules/components/progress-bar/progressbar.js":
/*!************************************************************!*\
  !*** ./src/modules/components/progress-bar/progressbar.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProgressBar: () => (/* binding */ ProgressBar)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class ProgressBar extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["value", "max"];

	constructor() {
		super();

		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);

		this.min = this.getAttribute("min") ?? "0";
		this.max = this.getAttribute("max") ?? "100";
		this.low = this.getAttribute("low") ?? this.min;
		this.lowWarning = this.getAttribute("low-warning") ?? this.min;
		this.high = this.getAttribute("high") ?? this.max;
		this.highWarning = this.getAttribute("high-warning") ?? this.max;
		this.indeterminate = this.hasAttribute("indeterminate");
		this.value = this.getAttribute("value") ?? (this.indeterminate ? this.max : "0");

		this.label = this.getAttribute("label");
		this.secondaryLabel = this.getAttribute("secondary-label") ?? "";
		this.helperText = this.getAttribute("helper-text");
	}

	parsedCallback() {
		if (this.label) {
			this.appendChild(document.createElementWithContents("label", this.label, {
				className: "input-field__label"
			}));
		}

		const progress = document.createElementWithContents("progress", null, {
			id: this.identifier,
			max: this.max,
			value: this.value
		});

		this.appendChild(progress);

		if (this.indeterminate) {
			this.appendChild(document.createElementWithContents("div",
				`
				<div class="progress-fill"></div>
			`
				, { className: "progress-bar" }));
		}

		this.#updateState();
	}

	#updateState() {
		this.toggleClass("progress--low", (parseInt(this.value) || 0) < (parseInt(this.low) || 0));
		this.toggleClass("progress--high", (parseInt(this.value) || 0) > (parseInt(this.high) || 0));
		this.toggleClass("progress--low-warning", (parseInt(this.value) || 0) < (parseInt(this.lowWarning) || 0) && !this.classList.contains("progress--low"));
		this.toggleClass("progress--high-warning", (parseInt(this.value) || 0) > (parseInt(this.highWarning) || 0) && !this.classList.contains("progress--high"));
	}

	attributeChanged(name, _, newValue) {
		switch (name) {
			case "max":
				{
					const bar = this.querySelector("progress");

					if (bar) { bar.max = newValue; }
				}
				break;
			case "value":
				{
					const bar = this.querySelector("progress");

					if (bar && !this.indeterminate) { bar.value = newValue; }
					this.#updateState();
				}
				break;
		}
	};
}

/***/ }),

/***/ "./src/modules/components/progress/progress-item.js":
/*!**********************************************************!*\
  !*** ./src/modules/components/progress/progress-item.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProgressItem: () => (/* binding */ ProgressItem)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class ProgressItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.active = this.hasAttribute("active");
	}

	parsedCallback() {
		this.prepend(document.createElementWithContents("div", null, { className: "progress-item__icon" }));
	}
}

/***/ }),

/***/ "./src/modules/components/progress/progress.js":
/*!*****************************************************!*\
  !*** ./src/modules/components/progress/progress.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Progress: () => (/* binding */ Progress)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Progress extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	parsedCallback() {
		const list = document.createElementWithContents("ol");
		list.append(...[...this.querySelectorAll(":scope > chip-progressitem")].map(x => document.createElementWithContents("li", x, { className: x.active ? "progress-item--active" : "" })));

		this.appendChild(list);
	}
}

/***/ }),

/***/ "./src/modules/components/radio/radio.js":
/*!***********************************************!*\
  !*** ./src/modules/components/radio/radio.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Radio: () => (/* binding */ Radio)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Radio extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["checked", "value"];
	#Mappers = {};

	constructor() {
		super();

		this.InitializeCheckboxProperties();

		this.#Mappers = {
			name: this.name
		};

		if (this.closest("form") && !this.#Mappers.name) { this.#Mappers.name = this.id ?? this.identifier; }
	}

	parsedCallback() {
		this.classList.add("checkbox__wrapper");

		const radio = document.createElementWithContents("input", null, {
			id: this.identifier,
			className: "input-field",
			type: "radio",
			checked: this.checked,
			value: this.value
		});

		radio.onchange = () => document.querySelectorAll(`chip-radio[name='${this.#Mappers.name}']`).forEach(x => x.checked = x === this);

		Object.keys(this.#Mappers).filter(x => this.#Mappers[x])
			.forEach(key => radio.setAttribute(key, this.#Mappers[key] === true ? "" : this.#Mappers[key]));

		if (this.helperText) {
			this.prepend(document.createElementWithContents("div", this.helperText, {
				className: "input-field__helper-text"
			}));
		}

		if (this.label) { this.prepend(document.createElementWithContents("label", this.label, { htmlFor: this.identifier })); }

		this.prepend(radio);
	}

	focus() {
		this.querySelector("input")?.focus();
	}

	attributeChanged(name, _, newValue) {
		if (name === "checked") {
			this.querySelector("input").checked = this.IsAttributeValueTrue(newValue);
		}
	}
}

/***/ }),

/***/ "./src/modules/components/range/range.js":
/*!***********************************************!*\
  !*** ./src/modules/components/range/range.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Range: () => (/* binding */ Range)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Range extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["value"];

	#Input = null;

	constructor() {
		super();

		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);
		this.label = this.getAttribute("label") ?? "";
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.min = this.getAttribute("min") ?? "0";
		this.max = this.getAttribute("max") ?? "100";
		this.value = this.getAttribute("value") ?? "0";
		this.step = this.getAttribute("step") ?? "1";
	}

	focus() {
		this.querySelector("input")?.focus();
	}

	parsedCallback() {
		this.#Input = document.createElementWithContents("input", null, {
			type: "range",
			min: this.min,
			max: this.max,
			id: this.identifier,
			value: this.value,
			step: this.step,
			oninput: () => this.value = this.#Input.value
		});

		this.value = this.#Input.value
		this.#UpdateTrack();

		if (this.label) {
			this.appendChild(document.createElementWithContents("label", this.label, {
				className: "input-field__label",
				htmlFor: this.identifier
			}));
		}

		this.appendChild(document.createElementWithContents("div", this.#Input, { className: "range--track" }));

		if (this.helperText) {
			this.appendChild(document.createElementWithContents("div", this.helperText, { className: "input-field__helper-text" }));
		}
	}

	#UpdateTrack() {
		const percentage = 100 * (parseFloat(this.#Input.value) - parseFloat(this.min)) / (parseFloat(this.max) - parseFloat(this.min));
		this.#Input.style.background = `linear-gradient(to right, var(--range-bar-active-colour) ${percentage}%, var(--range-bar-colour) ${percentage}%)`;
	}

	attributeChanged(name, _, newValue) {
		if (name === "value") {
			this.#Input.value = newValue;
			this.#UpdateTrack();
		}
	}
}

/***/ }),

/***/ "./src/modules/components/select/option.js":
/*!*************************************************!*\
  !*** ./src/modules/components/select/option.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChipOption: () => (/* binding */ ChipOption)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class ChipOption extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.value = this.getAttribute("value") ?? "";
	}
}

/***/ }),

/***/ "./src/modules/components/select/select.js":
/*!*************************************************!*\
  !*** ./src/modules/components/select/select.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Select: () => (/* binding */ Select)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Select extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["value", "description", "label", "required"];

	#Mappers = {};

	constructor() {
		super();

		this.label = this.getAttribute("label") ?? "";
		this.secondaryLabel = this.getAttribute("secondary-label") ?? "";
		this.value = this.getAttribute("value") ?? "";
		this.orientation = this.getAttribute("orientation");
		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);
		this.required = this.hasAttribute("required");
		this.helperText = this.getAttribute("helper-text") ?? "";
		this.readonly = this.getAttribute("readonly") ?? false;
		this.description = this.getAttribute("description");

		this.#Mappers = {
			name: this.getAttribute("name"),
			autofocus: this.hasAttribute("focus"),
			autocomplete: this.getAttribute("autocomplete"),
			readonly: this.readonly,
			required: this.hasAttribute("required"),
			tabIndex: this.getAttribute("tabindex") ?? ""
		};

		Object.keys(this.#Mappers).forEach(key => this[key] = this.#Mappers[key]);
	}

	parsedCallback() {
		const select = document.createElementWithContents("select", [...this.querySelectorAll(":scope > chip-option")].map(x => document.createElementWithContents("option", x, { value: x.value })), {
			id: this.identifier,
			onchange: () => {
				this.value = select.value
				this.reportValidity();
			}
		});

		if (this.label || this.secondaryLabel) {
			const label = document.createElementWithContents("label", this.label, {
				htmlFor: this.identifier,
				className: "input-field__label"
			});

			if (this.secondaryLabel) { label.appendChild(document.createElementWithContents("span", this.secondaryLabel, { className: "input-field__label--secondary" })); }

			this.appendChild(label);
		} else if (this.description) {
			select.ariaLabel = this.description;
		}

		Object.keys(this.#Mappers).filter(x => this.#Mappers[x])
			.forEach(key => select.setAttribute(key, this.#Mappers[key] === true ? "" : this.#Mappers[key]));

		if (this.value) { select.value = this.value; }
		else { this.value = select.value; }

		this.appendChild(document.createElementWithContents("div", select, { className: "select__wrapper" }));

		if (this.helperText) {
			const helperTextMethod = Browser.GetFlavour() === "gov" ? "beforebegin" : "afterend";

			select.insertAdjacentElement(helperTextMethod, document.createElementWithContents("div", this.helperText, {
				className: "input-field__helper-text"
			}));
		}
	}

	checkValidity() {
		return this.querySelector("select")?.checkValidity() ?? false;
	}

	setInvalid(message) {
		const select = this.querySelector("select"),
			msgElement = document.createElementWithContents("div", message, { className: "input-field__validation-error" });

		if (!this.disableMessages) {
			if (Browser.GetFlavour() === "gov") {
				this.querySelector(".select__wrapper").insertAdjacentElement("beforebegin", msgElement);
			} else {
				this.appendChild(msgElement);
			}
		}

		select.classList.add("input-field__invalid");

		this.querySelectorAll(".input__bound").forEach(x => x.classList.add("input-field__invalid"));
	}

	reportValidity() {
		const select = this.querySelector("select"),
			validity = this.checkValidity();

		this.querySelector(".input-field__validation-error")?.remove();
		this.querySelectorAll(".input-field__invalid").forEach(x => x.removeClass("input-field__invalid"));

		if (!validity) {
			this.setInvalid(select.validationMessage || this.validationMessage);
		}

		return validity;
	}

	attributeChanged(name, _, newValue) {
		switch (name) {
			case "value":
				this.querySelector("select").value = newValue;
				break;
			case "required":
				{
					const select = this.querySelector("select");

					if (select) {
						select.required = this.IsAttributeValueTrue(newValue);
					}
				}
				break;
			case "label":
				{
					const label = this.querySelector(".input-field__label");

					if (label) {
						label.textContent = newValue;
					}
				}
				break;
			case "description":
				{
					const select = this.querySelector("select");

					if (select && !document.querySelector(`[for='${select.id}']`)) {
						select.ariaLabel = newValue;
					}
				}
				break;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/sortablelist/sortable-list.js":
/*!**************************************************************!*\
  !*** ./src/modules/components/sortablelist/sortable-list.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SortableList: () => (/* binding */ SortableList)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class SortableList extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.ordered = this.hasAttribute("ordered");
		this.listClass = this.getAttribute("list-class") ?? "";
		this.listItemClass = this.getAttribute("listitem-class") ?? "";
		this.identifier = this.getAttribute("identifier") ?? "";
		this.listStyle = this.getAttribute("list-style");

		this.Options = {
			Animation: {
				Speed: 200,
				Easing: "ease-out"
			}
		};

		this.classList.add("sortable-list__wrapper");
	}

	parsedCallback() {
		const list = document.createElementWithContents(this.ordered ? "ol" : "ul", "", {
			className: this.listClass,
			ontouchstart: ev => this.#DragStart(ev),
			onmousedown: ev => this.#DragStart(ev)
		});

		if (this.identifier) { list.id = this.identifier; }
		if (this.listStyle) { list.classList.add(`list-${this.listStyle}`); }

		list.classList.add("sortable-list");

		for (const item of this.querySelectorAll(":scope > chip-sortablelistitem")) {
			this.AddItem(item, list);
		}

		this.appendChild(list);
	}

	AddItem(item, list) {
		const listItem = document.createElementWithContents("li", item),
			itemID = item.getAttribute("identifier");

		if (itemID) { listItem.id = itemID; }
		if (this.listItemClass) { listItem.classList.add(this.listItemClass); }

		(list ?? this.querySelector("ul,ol")).appendChild(listItem);
	}

	#DragStart(event) {
		if (this.Animation) { return; }
		if (event.type == "mousedown" && event.which !== 1) { return; }
		if (event.type === "touchstart" && e.touches.length > 1) { return; }

		const Hierarchy = {
			Handle: event.target.closest(".sortable-handle"),
			ListItem: event.target.closest(".sortable-list > li"),
			List: this.querySelector("ul,ol"),
			Items: [...this.querySelectorAll(":scope > * > li")]
		};

		if (!Hierarchy.Handle || !Hierarchy.ListItem) { return; }

		this.CurrentDraggable = Hierarchy.ListItem;

		Hierarchy.List.style.height = `${Hierarchy.List.offsetHeight}px`;
		Hierarchy.ListItem.classList.add("is-dragging");

		document.body.style.cursor = "grabbing";

		Object.assign(this, {
			ItemHeight: parseFloat(window.getComputedStyle(this.CurrentDraggable).height),
			ListHeight: Hierarchy.List.offsetHeight,
			StartTouchY: this.#GetDragY(event),
			StartTop: Hierarchy.ListItem.offsetTop
		});

		Hierarchy.Items.forEach((item, index) => {
			Object.assign(item.style, {
				position: "absolute",
				top: "-1px",
				left: `${parseFloat(window.getComputedStyle(Hierarchy.List).paddingInlineStart)}px`,
				width: "100%",
				transform: `translateY(${index === 0 ? 0 : Array(Math.max(0, index - 1) - 0 + 1).fill().map((_, idx) => 0 + idx).map(x => parseFloat(window.getComputedStyle(Hierarchy.Items[x]).height)).reduce((x, y) => x + y, 0)}px)`,
				zIndex: item === Hierarchy.ListItem ? 2 : 1
			});
		});

		setTimeout(() => {
			Hierarchy.Items.forEach((x) => {
				x.style.transition = `transform ${this.Options.Animation.Speed}ms ${this.Options.Animation.Easing}`;
			});
		});

		Object.assign(this, {
			Positions: Hierarchy.Items.map((_, i) => i),
			Position: Math.round(this.StartTop / this.ListHeight * Hierarchy.Items.length),
			Touch: event.type === "touchstart"
		});

		if (this.Touch) {
			Object.assign(window, {
				ontouchmove: ev => this.#DragMove(ev),
				ontouchend: ev => this.#DragEnd(ev)
			});
		} else {
			Object.assign(window, {
				onmousemove: ev => this.#DragMove(ev),
				onmouseup: ev => this.#DragEnd(ev)
			});
		}
	}

	#SwapElements(array, a, b) {
		const temp = array[a];

		array[a] = array[b];
		array[b] = temp;
	}

	#GetDragY(event) { return event.touches ? (event.touches[0] || event.changedTouches[0]).pageY : event.pageY; }

	#DragMove(event) {
		if (this.Animation) { return; }

		const items = this.querySelectorAll(":scope > * > li");

		const top = this.StartTop + this.#GetDragY(event) - this.StartTouchY,
			newPosition = Math.round((top / this.ListHeight) * items.length);

		this.CurrentDraggable.style.transform = `translateY(${top}px)`;

		this.Positions.forEach(index => {
			if (index === this.Position || index !== newPosition) { return; } // Can't replace with .filter because of the index

			this.#SwapElements(this.Positions, this.Position, index);
			this.Position = index;
		});

		items.forEach((item, index) => {
			if (item === this.Item) { return; } // Can't replace with .filter because of the index

			item.style.transform = `translateY(${this.Positions.indexOf(index) * this.ItemHeight}px)`;
		});

		event.preventDefault();

		event.target.closest("chip-sortablelistitem")?.raiseEvent("drag");
	}

	#DragEnd(event) {
		this.Animation = true;
		document.body.style.removeProperty("cursor");

		const list = this.querySelector("ul,ol"),
			items = list.querySelectorAll(":scope > li");

		Object.assign(this.CurrentDraggable.style, {
			transition: `all ${this.Options.Animation.Speed}ms ${this.Options.Animation.Easing}`,
			transform: `translateY(${this.Position * this.ItemHeight}px)`
		});

		this.CurrentDraggable.removeClass("is-dragging");

		setTimeout(() => {
			Object.assign(list.style, {
				position: "",
				height: ""
			});

			if (list.style.cssText.trim() === "") {
				list.removeAttribute("style");
			}

			items.forEach(item => {
				Object.assign(item.style, {
					top: "",
					left: "",
					right: "",
					position: "",
					transform: "",
					transition: "",
					width: "",
					zIndex: ""
				});

				if (item.style.cssText.trim() === "") {
					item.removeAttribute("style");
				}
			});

			this.Positions.forEach(i => list.appendChild(items[i]));

			this.Animation = false;

			event.target.closest("chip-sortablelistitem")?.raiseEvent("dragend");
			this.raiseEvent("change");
		}, this.Options.Animation.Speed);

		Object.assign(window, {
			ontouchmove: null,
			ontouchend: null,
			onmousemove: null,
			onmouseup: null
		});
	}
}

/***/ }),

/***/ "./src/modules/components/sortablelist/sortable-listitem.js":
/*!******************************************************************!*\
  !*** ./src/modules/components/sortablelist/sortable-listitem.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SortableListItem: () => (/* binding */ SortableListItem)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class SortableListItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.identifier = this.getAttribute("identifier") ?? "";
	}
}

/***/ }),

/***/ "./src/modules/components/table.js":
/*!*****************************************!*\
  !*** ./src/modules/components/table.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Table: () => (/* binding */ Table)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/browser */ "./src/modules/core/browser.js");


class Table {
	constructor(table) {
		this.Table = table;
		this.Caption = table.parentElement?.nextElementSibling;
		this.SelectedCountLabel = this.Caption?.querySelector(".selected-count");
		this.TableHead = table.querySelector("thead");
		this.ForbidMultiSelect = !table.dataset.multiselect;

		this.DelegateEvents();

		this.RowSelector = "tbody tr:not(.d-none)";
		this.DataRowSelector = "tbody tr:not(.d-none, .table-body-label)";
		this.ValidRowSelector = "tbody tr:not(.table-body-label)";
		this.HeaderSelector = "thead th";

		this.LastSelectedIndex = -1;
	}

	#OnTableBodyClick(tBody, ev) {
		const row = this.GetRowFromEvent(ev, true);

		if (row) {
			if (!row.classList.contains("table-body-label")) {
				this.SelectRow(row, !ev.ctrlKey && !ev.shiftKey, ev.shiftKey);

				this.Table.dispatchEvent(new CustomEvent("rowclick", { detail: { row: row } }));
			} else if (tBody.classList.contains("collapsed")) {
				tBody.classList.remove("collapsed");
			} else {
				tBody.classList.add("collapsed");
			}
		}
	}

	#OnTableBodyMouseDown(ev) {
		const row = this.GetRowFromEvent(ev);

		if (row) {
			if (ev.button === 2 && !row.classList.contains("active")) {
				this.SelectRow(row, !ev.ctrlKey && !ev.shiftKey, ev.shiftKey);
			} else if (ev.button === 1 && !ev.target?.closest("a")) {
				if (!row.classList.contains("active")) {
					this.SelectRow(row, !ev.ctrlKey && !ev.shiftKey, ev.shiftKey);
				}
				ev.preventDefault(); // Prevent scrolling with middle mouse, can't be done in mouseup event
			}

			this.Table.dispatchEvent(new CustomEvent("rowmousedown", { detail: { row: row } }));
		}
	}

	#OnTableBodyMouseUp(ev) {
		const row = this.GetRowFromEvent(ev);

		if (row) {
			this.Table.dispatchEvent(new CustomEvent("rowmouseup", { detail: { row: row } }));

			if (ev.button === 1 && !ev.target?.closest("a")) {
				this.PickRow(row, "_blank");
				this.Table.dispatchEvent(new CustomEvent("rowauxclick", { detail: { row: row } }));
			}
		}
	}

	#OnTableBodyDblClick(ev) {
		const row = this.GetRowFromEvent(ev);

		if (row) {
			this.OpenRowURL(row, "_self");

			this.Table.dispatchEvent(new CustomEvent("rowdblclick", { detail: { row: row } }));
			this.PickRow(row);
		}
	}

	#OnTableBodyContextMenu(ev) {
		this.Table.dispatchEvent(new CustomEvent("rowcontextmenu", { detail: { row: ev.target.matches(this.DataRowSelector) ? ev.target : ev.target.closest(this.DataRowSelector) } }));
	}

	#OnTableBodyKeyUp(ev) {
		if (ev.keyCode === 13) {
			const row = this.GetRowFromEvent(ev);

			if (row) {
				this.PickRow(row);
			}
		}
	}

	#OnTableBodyKeyDown(ev) {
		switch (ev.keyCode) {
			case 40:
				// Down arrow
				ev.preventDefault();
				this.SelectNextRow(ev.shiftKey, !ev.shiftKey);
				break;
			case 38:
				// Up arrow
				ev.preventDefault();
				this.SelectPreviousRow(ev.shiftKey, !ev.shiftKey);
				break;
			case 65:
				// CTRL + A
				if (ev.ctrlKey && !this.ForbidMultiSelect) {
					ev.preventDefault();

					this.Table.querySelectorAll(this.DataRowSelector).forEach(row => row.classList.add("active"));
					this.UpdateSelectedCount();
				}
				break;
			case 67:
				// CTRL + C
				if (ev.ctrlKey) {
					ev.preventDefault();
					this.Table.dispatchEvent(new CustomEvent("rowscopied", { detail: { rows: this.GetSelectedRows() } }));
				}
				break;
		}
	}

	DelegateEvents() {
		if (this.Table.classList.contains("table-sortable")) {
			let timeout,
				sortOrder = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetURLParameter("o") ?? "";

			this.TableHead?.addEventListener("click", ev => {
				if (timeout) {
					clearTimeout(timeout);
				}

				let requestedField = ev.target.matches("th") ? ev.target : ev.target.closest("th"),
					requestedSort = this.GetNextSort(requestedField);

				let icon = requestedField.querySelector("chip-icon");

				if (!icon) {
					const appended = document.createElement("chip-icon");
					requestedField.firstElementChild.appendChild(appended);

					icon = appended;
				}

				if (icon.icon.includes("fa-chevron-down")) {
					icon.remove();
				} else if (icon.icon.includes("fa-chevron-up")) {
					icon.icon = "fas fa-sm fa-chevron-down ms-2";
				} else {
					icon.icon = "fas fa-sm fa-chevron-up ms-2";
				}

				timeout = setTimeout(() => {
					if (sortOrder !== requestedSort) {
						_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.SetURLParameter("o", requestedSort.toLowerCase() || null);
					}
				}, 500);
			});
		}

		Array.from(this.Table.tBodies).forEach(tBody => {
			Object.assign(tBody, {
				onclick: ev => this.#OnTableBodyClick(tBody, ev),
				onmousedown: ev => this.#OnTableBodyMouseDown(ev),
				onmouseup: ev => this.#OnTableBodyMouseUp(ev),
				ondblclick: ev => this.#OnTableBodyDblClick(ev),
				oncontextmenu: ev => this.#OnTableBodyContextMenu(ev),
				onkeyup: ev => this.#OnTableBodyKeyUp(ev),
				onkeydown: ev => this.#OnTableBodyKeyDown(ev)
			});
		});
	}

	GetNextSort(header) {
		let sort = "";
		const icon = header.querySelector("chip-icon");

		if (!icon) {
			sort = `ASC${header.dataset.field}`;
		} else if (icon.icon.includes("fa-chevron-up")) {
			sort = `DESC${header.dataset.field}`;
		}

		return sort.toLowerCase();
	}

	SortHeader(header) { _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.SetURLParameter("o", this.GetNextSort(header)) }

	SortByName(name) {
		const existing = _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetURLParameter("o") ?? "";

		if (!existing.includes(name)) {
			_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.SetURLParameter("o", (name.trim() !== "" ? `ASC${name}` : "").toLowerCase());
		} else if (existing.slice(0, 4).toLowerCase() === "desc") {
			return _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.SetURLParameter("o", null);
		} else {
			return _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.SetURLParameter("o", (name.trim() !== "" ? `DESC${name}` : "").toLowerCase());
		}
	}

	OpenRowURL(row, type) {
		if (row && this.Table.dataset.externalPointer) {
			window.open(this.Table.dataset.externalPointer.replace("{id}", row.dataset.identifier), type);
		}
	}

	PickRow(row, openType) {
		const rowsSelected = this.GetSelectedRows();

		if (rowsSelected.length && this.Table.dataset.externalPointer) {
			if (rowsSelected.length > 1) {
				rowsSelected.forEach(x => this.OpenRowURL(x, "_blank"));
			} else {
				this.OpenRowURL(rowsSelected[0], openType ?? "_self");
			}
		}

		this.Table.dispatchEvent(new CustomEvent("rowpicked", { detail: { row: row } }));
	}

	SelectNextRow(isRange, solitary) { this.SelectRow(this.RowAt(this.LastSelectedIndex + 1), solitary, isRange); }
	SelectPreviousRow(isRange, solitary) { this.SelectRow(this.RowAt(Math.max(this.LastSelectedIndex - 1, 0)), solitary, isRange); }

	SelectRow(row, solitary, isRange) {
		if (row) {
			solitary = this.ForbidMultiSelect || solitary;
			isRange = !(this.ForbidMultiSelect || !isRange);

			if (!isRange) {
				let toggledCount = 0;

				if (solitary) {
					[...this.Table.querySelectorAll(`${this.DataRowSelector}.active`)].filter(x => x !== row).forEach(x => {
						x.removeClass("active");
						++toggledCount;
					});
				}

				// Toggle row selected state
				if (row.classList.contains("active") && toggledCount === 0) {
					row.removeClass("active");
				} else {
					row.classList.add("active");
					this.Table.dispatchEvent(new CustomEvent("rowselected", { detail: { row: row } }));
				}
			} else {
				if (solitary) {
					this.GetVisibleRows().forEach(x => x.classList.remove("active"));
				}

				const currentIndex = this.GetRowIndex(row),
					start = Math.min(currentIndex, this.LastSelectedIndex),
					end = Math.max(currentIndex, this.LastSelectedIndex);

				this.GetRowsFromIndices(Array(end - start + 1).fill().map((_, ix) => start + ix)).forEach(row => row.classList.add("active"));
			}

			const newIndex = this.GetRowIndex(row);

			if (newIndex !== -1) {
				this.LastSelectedIndex = newIndex;
			}
		}

		this.UpdateSelectedCount();
	}

	UpdateSelectedCount() {
		if (this.SelectedCountLabel) {
			const selectedCount = this.GetSelectedRows().length;

			this.SelectedCountLabel.textContent = selectedCount > 0
				? `(${selectedCount} selected)`
				: "";
		}
	}

	Search(query) {
		const arrRows = [...this.Table.querySelectorAll(this.ValidRowSelector)];

		if (arrRows.length) {
			const newSet = arrRows.search(query, "textContent", -1);

			arrRows.forEach(row => {
				row.toggleClass("d-none", !newSet.includes(row) && query.trim() !== "");

				if (row.classList.contains("d-none")) {
					row.removeClass("active");
				}
			});

			this.Table.querySelectorAll("tbody").forEach(body => {
				if (!body.querySelector("tr:not(.d-none,.table-body-label)")) {
					body.classList.add("d-none");
				} else {
					body.removeClasses(["collapsed", "d-none"]);
				}
			});
		}

		this.UpdateSelectedCount();
	}

	GetSelectedIndex() { return Array.from(this.Table.querySelectorAll(this.DataRowSelector)).indexOf(this.Table.querySelector(`${this.DataRowSelector}.active`)) };

	GetRowFromEvent(event, includeGroupRows) {
		if (event.target.matches(includeGroupRows ? this.RowSelector : this.DataRowSelector)) {
			return event.target;
		} else {
			return event.target.closest(includeGroupRows ? this.RowSelector : this.DataRowSelector);
		}
	}

	GetSelectedRows() { return Array.from(this.Table.querySelectorAll(`${this.DataRowSelector}.active`)); }
	RowAt(index) { return this.Table.querySelectorAll(this.DataRowSelector)[index]; }
	GetRowIndex(row) { return Array.from(this.Table.querySelectorAll(this.DataRowSelector)).indexOf(row); }

	GetRowsFromIndices(indices) { return Array.from(this.Table.querySelectorAll(this.DataRowSelector)).filter((_, ix) => indices.includes(ix)); }
	GetVisibleRows() { return Array.from(this.Table.querySelectorAll(this.DataRowSelector)); }
	GetAllRows() { return Array.from(this.Table.querySelectorAll(this.ValidRowSelector)); }

	GoToPage(pageNumber) {
		let page = parseInt(pageNumber);

		if (!isNaN(page)) {
			_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.SetURLParameter("p", !page || page === 1 ? null : page, true);
		}
	}

	// Get's an object representing a rows data using the actual column names
	GetRowDetails(row) {
		const retVal = {};

		this.Table.querySelectorAll(this.HeaderSelector)
			.forEach((header, index) => retVal[header.textContent.trim().replace(" ", "_")] = row.querySelector(`td:nth-of-type(${index + 1})`).textContent.trim());

		return retVal;
	}

	static RefreshTables() {
		document.querySelectorAll(".chipside-table:not(.no-js)").forEach(x => x.Table ??= new Table(x));
	}
}

/***/ }),

/***/ "./src/modules/components/tabs/tab.js":
/*!********************************************!*\
  !*** ./src/modules/components/tabs/tab.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tab: () => (/* binding */ Tab)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Tab extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["selected", "allow-close", "label", "casing"];

	constructor() {
		super();

		this.label = this.getAttribute("label") ?? "";
		this.allowClose = this.hasAttribute("allow-close");
		this._allowClose = this.allowClose;
		this.closeTooltip = this.getAttribute("close-tooltip") ?? "Close tab";
		this.selected = this.hasAttribute("selected");
		this.casing = this.getAttribute("casing") ?? "";
		this.icon = this.getAttribute("icon");
		this.preventButtons = this.closest("chip-tabgroup")?.preventButtons;

		if (this.selected) { this.Select(); }
	}

	parsedCallback() {
		const button = document.createElementWithContents(this.preventButtons ? "span" : "button", document.createElementWithContents("span", this.label), {
			className: `btn--base btn--tab${this.selected ? " active" : ""}`
		});

		if (!this.preventButtons) {
			Object.assign(button, {
				onclick: () => this.selected = true,
				type: "button"
			});
		}

		if (this.closest("chip-tabgroup[variation='steps']")) {
			const contents = !this.icon
				? [...this.parentElement.children].indexOf(this) + 1
				: document.createElementWithContents("chip-icon", null, { icon: this.icon });

			button.prepend(document.createElementWithContents("div", contents, {
				className: "steps__icon"
			}));

			button.appendChild(document.createElementWithContents("div", button.childNodes, { className: "step-button__wrapper" }));
		} else if (this.icon) {
			button.prepend(document.createElementWithContents("chip-icon", null, { icon: this.icon }));
		}

		this.appendChild(button);

		if (this.allowClose) {
			this.#AddCloseButton();
			this.closest("chip-tabgroup").isDynamic = true;
		}
	}

	GetContent() {
		return this.closest("chip-tabgroup")?.querySelector(`:scope > .tab-group__content > .tab-group__tab:nth-child(${this.index + 1})`);
	}

	#AddCloseButton() {
		if (this.matches(":first-child:last-child")) {
			this.allowClose = false;
		} else if (!this.querySelector(".tab__close-button"))
			this.appendChild(document.createElementWithContents("chip-button", null, {
				buttonStyle: "icon",
				icon: "fal fa-times",
				size: "sm",
				variation: "danger-tertiary",
				tooltip: this.closeTooltip,
				className: "tab__close-button",
				onclick: () => this.Destroy()
			}));
	}

	get index() {
		return [...this.parentElement.children].indexOf(this);
	}

	Destroy() {
		const group = this.closest("chip-tabgroup"),
			index = this.index;

		group.querySelector(`:scope > .tab-group__content > .tab-group__tab:nth-child(${index + 1})`)?.remove();
		this.remove();

		if (this.selected) {
			const newSelection = group.querySelector(`:scope > .tab-group__tabs > .tab__wrapper > chip-tab:nth-child(${index + 1})`)
				?? group.querySelector(":scope > .tab-group__tabs > .tab__wrapper > chip-tab:last-child");

			newSelection.selected = true;
		}

		const selected = group.querySelector("chip-tab[selected]");

		if (selected?.matches(":first-child:last-child")) {
			selected.allowClose = false;
		}

		group.raiseEvent("tabclosed");
	}

	checkValidity() {
		return ![...this.closest("chip-tabgroup").querySelectorAll(`:scope > .tab-group__content > .tab-group__tab:nth-child(${this.index + 1}) chip-form`)].filter(form => !form.reportValidity()).length;
	}

	Select() {
		debugger;
		if (!this.hasAttribute("selected")) { this.setAttribute("selected", ""); }

		const group = this.closest("chip-tabgroup"),
			hadSelection = !!group.querySelector("chip-tab[selected]");

		group?.querySelectorAll(":scope > .tab-group__tabs > .tab__wrapper > chip-tab")
			.forEach(tab => {
				if (tab !== this) {
					tab.removeAttribute("selected");
				}

				const button = tab.querySelector(".btn--base");

				if (button) {
					button.toggleClass("active", tab === this);
				}
			});

		group?.querySelectorAll(":scope > .tab-group__content > .tab-group__tab")
			.forEach(tab => {
				debugger;
				const currentIndex = [...tab.parentElement.children].indexOf(tab);

				tab.toggleClass("selected", currentIndex === this.index);

				if (currentIndex === this.index) {
					const target = tab.querySelector("input:not([readonly]), chip-dropdown, textarea:not([readonly]), select, .chipside-table:not(.no-js) tbody tr:not(.table-body-label)");

					if (target?.nodeName === "TR" && !target.classList.contains("active")) {
						target.closest("table")?.Table.SelectRow(target, true);
					} else {
						target?.focus();
					}
				} else if (currentIndex < this.index) {
					const forms = [...tab.querySelectorAll("chip-form")];

					if (forms.length) {
						group.querySelector(`:scope > .tab-group__tabs > .tab__wrapper > chip-tab:nth-child(${currentIndex + 1}) > .btn--base`)?.toggleClass("step__invalid", forms.filter(form => !form.reportValidity()).length > 0);
					}
				}
			});

		group.selectedIndex = this.index;

		if (hadSelection) {
			group.raiseEvent("change");
		}
	}

	SetIsValid(isValid) {
		if (this.closest("[variation='steps']")) {
			this.firstElementChild?.toggleClass("step__invalid", !isValid);
		}
	}

	attributeChanged(name, _, newValue) {
		switch (name) {
			case "selected":
				if (this.IsAttributeValueTrue(newValue)) {
					this.Select();
				}
				break;
			case "allow-close":
				if (this.IsAttributeValueTrue(newValue)) {
					this._allowClose = true;
				}

				if (this.IsAttributeValueTrue(newValue)) {
					this.#AddCloseButton();
				} else {
					this.querySelector(".tab__close-button")?.remove();
				}
				break;
			case "label":
				this.querySelector(":scope > .btn--base > span").textContent = newValue;
				break;
		}
	}
}

/***/ }),

/***/ "./src/modules/components/tabs/tabgroup.js":
/*!*************************************************!*\
  !*** ./src/modules/components/tabs/tabgroup.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabGroup: () => (/* binding */ TabGroup)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class TabGroup extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["is-dynamic", "orientation", "direction"];

	constructor() {
		super();

		this.variation = this.getAttribute("variation");
		this.orientation = this.getAttribute("orientation") ?? "";
		this.isDynamic = this.hasAttribute("is-dynamic");
		this.scroll = this.hasAttribute("scroll");
		this.preventButtons = this.hasAttribute("prevent-buttons") ?? false;
		this.direction = this.getAttribute("direction") ?? "";
		this.selectedIndex = 0;
	}

	parsedCallback() {
		if (!this.querySelector(":scope > .tab-group__tabs > .tab__wrapper > chip-tab[selected]")) {
			this.querySelector("chip-tab").selected = true;
		}

		const content = document.createElementWithContents("div", null, { className: "tab-group__content" }),
			selectedIndex = [...this.children].indexOf(this.querySelector("chip-tab[selected]")),
			actionContent = this.querySelectorAll(":scope > *:not(chip-tab)");

		this.querySelectorAll(":scope > chip-tab").forEach((tab, index, self) => {
			const newTab = document.createElementWithContents("div", tab.childNodes, { className: "tab-group__tab" });

			if (this.variation === "steps") {
				newTab.prepend(document.createElementWithContents("div",
					`
					<div class="mobile-header__title">Step ${index + 1} of ${self.length}</div>
					<div class="mobile-header__subtitle">${tab.getAttribute("label")}</div>
				`.trim(), {
					className: "tab__mobile-header"
				}));
			}

			content.appendChild(newTab);
		});

		this.appendChild(content);

		this.prepend(document.createElementWithContents("div", document.createElementWithContents("div", this.querySelectorAll(":scope > chip-tab"), { className: "tab__wrapper" }), {
			className: "tab-group__tabs"
		}));

		if (actionContent.length) {
			this.querySelector(".tab-group__tabs").appendChild(document.createElementWithContents("div", actionContent, { className: "nav__actions" }));
		}

		this.querySelector(`.tab-group__tab:nth-child(${selectedIndex + 1})`)?.classList.add("selected");
	}

	GetSelectedContent = () => this.querySelector(`.tab-group__tab:nth-child(${this.selectedIndex + 1})`);
	selectIndex = index => this.querySelector(`chip-tab:nth-child(${index + 1})`).selected = true;

	GetSelectedTab = () => this.querySelector("chip-tab[selected]") ?? this.querySelector(`chip-tab:nth-child(${this.selectedIndex + 1})`) ?? this.querySelector("chip-tab");

	AddTab(label, content, options) {
		const tab = document.createElementWithContents("chip-tab", null, { label, selected: true, ...options }),
			contentDiv = document.createElementWithContents("div", content, { className: "tab-group__tab" });

		this.querySelector("chip-tab:last-of-type")?.insertAdjacentElement("afterend", tab);
		this.querySelector(".tab-group__content")?.appendChild(contentDiv);

		if (this.querySelector(":scope > .tab-group__tabs > .tab__wrapper > chip-tab:not(:last-child)")) {
			this.querySelectorAll(":scope > .tab-group__tabs > .tab__wrapper > chip-tab").forEach(tab => {
				if (tab._allowClose) {
					tab.allowClose = true;
				}
			})
		}

		setTimeout(() => {
			const tabWrapper = this.querySelector(".tab-group__tabs");

			if (tabWrapper) {
				tabWrapper.scrollTo({
					left: tabWrapper.scrollWidth,
					behavior: 'smooth'
				});
			}
		}, 0);

		return tab;
	}
}

/***/ }),

/***/ "./src/modules/components/text/text.js":
/*!*********************************************!*\
  !*** ./src/modules/components/text/text.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextElement: () => (/* binding */ TextElement)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class TextElement extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.variation = this.getAttribute("variation");
		this.size = this.getAttribute("size");
		this.weight = this.getAttribute("width");
		this.icon = this.getAttribute("icon");
		this.iconColour = this.getAttribute("icon-colour");
		this.iconSize = this.getAttribute("icon-size");
	}

	parsedCallback() {
		if (this.variation === "vrm") {
			const vrm = this.textContent.trim();

			if (vrm.length === 7 && !vrm.includes(" ")) {
				this.textContent = vrm.slice(0, 4) + " " + vrm.slice(4);
			}
		}

		if (this.icon) {
			const container = document.createElementWithContents("div", this.childNodes, {
				className: "h-align gap-sm"
			});

			container.prepend(document.createElementWithContents("chip-icon", null, {
				icon: this.icon,
				size: this.iconSize,
				colour: this.iconColour
			}));

			this.appendChild(container);
		}
	}
}


/***/ }),

/***/ "./src/modules/components/textarea/textarea.js":
/*!*****************************************************!*\
  !*** ./src/modules/components/textarea/textarea.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Textarea: () => (/* binding */ Textarea)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Textarea extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["readonly", "required"];

	#Mappers = {};

	static Observer = new ResizeObserver(entries => entries.forEach(entry => Textarea.#ResizeTextArea(entry.target)));

	constructor() {
		super();

		this.normalizeContent = false;
		this.identifier = this.getAttribute("identifier") ?? crypto.randomUUID().slice(0, 8);
		this.label = this.getAttribute("label");
		this.secondaryLabel = this.getAttribute("secondary-label") ?? "";
		this.helperText = this.getAttribute("helper-text");
		this.codePreview = this.hasAttribute("code-preview");
		this.responsive = this.hasAttribute("responsive");
		this.readonly = this.hasAttribute("readonly");
		this.description = this.getAttribute("description") ?? "";
		this.prefixButton = this.getAttribute("prefix-button") ?? "";
		this.suffixButton = this.getAttribute("suffix-button") ?? "";
		this.prefixTooltip = this.getAttribute("prefix-tooltip") ?? "";
		this.suffixTooltip = this.getAttribute("suffix-tooltip") ?? "";
		this.prefixDescription = this.getAttribute("prefix-description");
		this.suffixDescription = this.getAttribute("suffix-description");
		this.suffixIcon = this.getAttribute("suffix-icon") ?? "";
		this.prefixIcon = this.getAttribute("prefix-icon") ?? "";

		this.#Mappers = {
			maxlength: this.getAttribute("maxlength"),
			minlength: this.getAttribute("minlength"),
			name: this.getAttribute("name"),
			spellcheck: this.getAttribute("spellcheck"),
			placeholder: this.getAttribute("placeholder"),
			readonly: this.readonly,
			required: this.hasAttribute("required"),
			rows: this.getAttribute("rows"),
			autofocus: this.hasAttribute("autofocus")
		};

		if (!this.#Mappers.spellcheck && this.codePreview) { this.#Mappers.spellcheck = true; }
		if (this.closest("form") && !this.#Mappers.name) { this.#Mappers.name = this.id ?? this.identifier; }

		this.removeAttribute("autofocus");

		Object.keys(this.#Mappers).forEach(key => this[key] = this.#Mappers[key]);

		this.classList.add("textarea__wrapper");
	}

	get selectionStart() {
		return this.querySelector("textarea")?.selectionStart;
	}

	get selectionEnd() {
		return this.querySelector("textarea")?.selectionEnd;
	}

	setSelectionRange(start, end, direction) {
		this.querySelector("textarea")?.setSelectionRange(start, end, direction);
	}

	get value() {
		return this.querySelector("textarea")?.value ?? this.textContent;
	}

	set value(val) {
		const textArea = this.querySelector("textarea");

		if (textArea) {
			textArea.value = val;
		}
	}

	parsedCallback() {
		const element = Object.assign(document.createElement("div"), {
			innerHTML:
				`
				<label class="input-field__label">${this.label}<span class="input-field__label--secondary">${this.secondaryLabel}</span></label>
				<div class="input__wrapper">
					<textarea class="input-field input-field__textarea">${this.innerHTML}</textarea>
				</div>
				<div class="input-field__helper-text">${this.helperText}</div>
				`.trim()
		}), textArea = element.querySelector("textarea");

		this.innerHTML = "";

		textArea.id = this.identifier;

		textArea.onkeyup = () => this.raiseEvent("keyup", "selectionchange");
		textArea.onselect = () => this.raiseEvent("select", "selectionchange");
		textArea.onclick = () => this.raiseEvent("selectionchange");
		textArea.oninput = () => this.raiseEvent("input", "selectionchange");

		textArea.onchange = ev => {
			ev.preventDefault();
			ev.stopPropagation();

			this.reportValidity();
			this.closest("chip-form")?.checkValidity();

			this.raiseEvent("change");
		}

		if (!this.label && !this.secondaryLabel) { element.querySelector("label").remove(); }
		else { element.querySelector("label").htmlFor = this.identifier; }

		if (!this.secondaryLabel) { element.querySelector(".input-field__label--secondary")?.remove(); }
		if (!this.helperText) { element.querySelector(".input-field__helper-text").remove(); }
		if (this.codePreview) { textArea.classList.add("code-preview"); }

		if (this.prefixButton) {
			textArea.insertAdjacentElement("beforebegin", document.createElementWithContents("chip-button", null, {
				className: "input__bound",
				buttonStyle: "icon",
				icon: this.prefixButton,
				variation: "body",
				onclick: () => this.raiseEvent("prefixclick")
			}));
		} else if (this.prefixIcon) {
			textArea.insertAdjacentElement("beforebegin", document.createElementWithContents("span", document.createElementWithContents("chip-icon", null, { icon: this.prefixIcon }), { className: "input__bound" }));
		}

		if (this.suffixButton) {
			textArea.insertAdjacentElement("afterend", document.createElementWithContents("chip-button", null, {
				className: "input__bound",
				buttonStyle: "icon",
				icon: this.suffixButton,
				variation: "body",
				onclick: () => this.raiseEvent("suffixclick")
			}));
		} else if (this.suffixIcon) {
			textArea.insertAdjacentElement("afterend", document.createElementWithContents("span", document.createElementWithContents("chip-icon", null, { icon: this.suffixIcon }), { className: "input__bound" }));
		}

		if (this.prefixTooltip && textArea.previousElementSibling) { textArea.previousElementSibling.tooltip = this.prefixTooltip; }
		if (this.suffixTooltip && textArea.nextElementSibling) { textArea.nextElementSibling.tooltip = this.suffixTooltip; }

		if (this.prefixDescription && textArea.previousElementSibling) { textArea.previousElementSibling.description = this.prefixDescription; }
		if (this.suffixDescription && textArea.nextElementSibling) { textArea.nextElementSibling.description = this.suffixDescription; }

		if (this.responsive) {
			Textarea.Observer.observe(textArea);

			textArea.addEventListener("input", () => Textarea.#ResizeTextArea(textArea));
		}

		Object.keys(this.#Mappers).filter(x => this.#Mappers[x])
			.forEach(key => textArea.setAttribute(key, this.#Mappers[key] === true ? "" : this.#Mappers[key]));

		if (this.description) { textArea.ariaLabel = this.description; }
		else if (!this.label && this.#Mappers.placeholder) { textArea.ariaLabel = this.#Mappers.placeholder; }

		this.append(...element.childNodes);
	}

	focus() {
		this.querySelector("textarea")?.focus();
	}

	checkValidity() {
		const input = this.querySelector("textarea"),
			isValid = input?.checkValidity() ?? false;

		this.validationMessage = this.GetValidationMessage(input);

		return isValid;
	}

	setInvalid(message) {
		this.querySelector(".input-field__validation-error")?.remove();

		const input = this.querySelector("textarea"),
			msgElement = document.createElementWithContents("div", message, { className: "input-field__validation-error" });

		if (!this.disableMessages) {
			if (Browser.GetFlavour() === "gov") {
				this.querySelector(".input__wrapper").insertAdjacentElement("beforebegin", msgElement);
			} else {
				this.appendChild(msgElement);
			}
		}

		input.classList.add("input-field__invalid");

		this.querySelectorAll(".input__bound").forEach(x => x.classList.add("input-field__invalid"));
	}

	reportValidity() {
		const validity = this.checkValidity();

		this.querySelector(".input-field__validation-error")?.remove();
		this.querySelectorAll(".input-field__invalid").forEach(x => x.removeClass("input-field__invalid"));

		if (!validity) {
			this.setInvalid(this.validationMessage);
		}

		return validity;
	}

	attributeChanged(name, _, newValue) {
		switch (name) {
			case "required":
				{
					const textarea = this.querySelector("textarea");

					if (textarea) {
						textarea.required = this.IsAttributeValueTrue(newValue);
					}
				}
				break;
			case "readonly":
				this.querySelector("textarea").readOnly = this.IsAttributeValueTrue(newValue);
				break;
		}
	}

	static #ResizeTextArea(textArea) {
		const computed = window.getComputedStyle(textArea),
			component = textArea.closest("chip-textarea");

		let attempt = textArea;
		let scrollPreset = 0;

		while (scrollPreset === 0 && (attempt = attempt.parentElement)) {
			scrollPreset = attempt.scrollTop;
		}

		textArea.style.height = "0px";
		component.removeAttribute("style");

		component.style.setProperty("--input-height", `${textArea.scrollHeight + parseFloat(computed.borderBottomWidth) + parseFloat(computed.borderTopWidth)}px`);
		textArea.removeAttribute("style");
	}
}

/***/ }),

/***/ "./src/modules/components/tree/tree-item.js":
/*!**************************************************!*\
  !*** ./src/modules/components/tree/tree-item.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TreeItem: () => (/* binding */ TreeItem)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class TreeItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["icon-colour", "allow-open"];

	#referenceItem = null;

	constructor() {
		super();

		this.identifier = this.getAttribute("identifier");
		this.icon = this.getAttribute("icon") ?? "";
		this.iconColour = this.getAttribute("icon-colour") ?? "";
		this.open = this.hasAttribute("open");
		this.link = this.getAttribute("link") ?? "";
		this.allowOpen = this.hasAttribute("allow-open");
		this.default = this.getAttribute("default") ?? "";
	}

	#PlaceButton() {
		if (this.querySelector(".tree__toggle")) { return; }

		const actualContent = [...this.childNodes ?? []].filter(x => !x.matches?.("chip-tree, chip-treeitem, chip-actionbar")),
			buttonContent = this.arrowCollapse ? [] : actualContent;

		const button = document.createElementWithContents("chip-button", buttonContent.find(x => x.textContent.trim()) || this.arrowCollapse ? buttonContent : document.createElementWithContents("span", this.default, { className: "text-faded" }), {
			variation: "none",
			className: "tree__toggle",
			description: "Toggle tree item",
			link: this.link
		});

		if (this.arrowCollapse) {
			Object.assign(button, {
				buttonStyle: "icon",
				icon: "fas fa-chevron-right"
			});

			if (!actualContent.find(x => x.innerText?.trim() || x.textContent.trim()) && this.default) {
				this.prepend(document.createElementWithContents("span", this.default, { className: "text-faded" }));
			}
		}

		if (this.icon) {
			if (this.arrowCollapse) {
				const newIcon = document.createElementWithContents("chip-icon", null, { icon: this.icon });
				newIcon.classList.add("tree-item__icon");

				if (this.iconColour) {
					newIcon.dataset.colour = this.iconColour;
					newIcon.classList.add("text-theme");
				}

				this.prepend(newIcon);
			} else {
				button.icon = this.icon;

				if (this.iconColour) { button.iconColour = this.iconColour; }
			}
		}

		this.#referenceItem.ariaExpanded = this.open.toString();

		button.onclick = () => this.#UpdateOpenState();

		if (!this.arrowCollapse || this.querySelector("chip-tree, chip-treeitem")) {
			this.prepend(button);
		}
	}

	parsedCallback() {
		this.arrowCollapse = !!this.closest("chip-tree[arrow-collapse]");

		if (!this.allowOpen) {
			this.allowOpen = !!this.querySelector("chip-tree");
		}

		this.#referenceItem = this.closest("[role='treeitem']");

		if (this.allowOpen || this.link || !!this.querySelector("chip-tree")) {
			this.#PlaceButton();
		} else {
			if (!this.textContent?.trim()) { this.prepend(document.createElementWithContents("span", this.default, { className: "text-faded" })); }

			if (this.icon) {
				const icon = document.createElementWithContents("chip-icon", null, { icon: this.icon });

				if (this.iconColour) {
					icon.dataset.colour = this.iconColour;
				}

				this.prepend(icon);
			}
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "allow-open" && this.IsAttributeValueTrue(newValue) && !this.querySelector(".tree__toggle")) {
			this.querySelector(":scope > chip-icon")?.remove();

			this.#PlaceButton();
		}
	}

	AddItem(item) {
		const tree = this.querySelector(":scope > chip-tree");

		if (tree) {
			tree.AddItem(item);
		} else {
			this.appendChild(document.createElementWithContents("chip-tree", item));
		}
	}

	#UpdateOpenState() {
		if (this.#referenceItem.ariaExpanded !== "true") {
			this.raiseEvent("open");
		}

		this.#referenceItem.ariaExpanded = this.#referenceItem.ariaExpanded === "false";
	}
}

/***/ }),

/***/ "./src/modules/components/tree/tree.js":
/*!*********************************************!*\
  !*** ./src/modules/components/tree/tree.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tree: () => (/* binding */ Tree)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Tree extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.identifier = this.getAttribute("identifier") ?? "";
		this.description = this.getAttribute("description") ?? "Tree view";
	}

	parsedCallback() {
		this.classList.add("tree__wrapper");

		const list = document.createElementWithContents("ul", null, {
			className: "tree",
			role: this.closest("chip-treeitem") ? "group" : "tree",
			ariaLabel: this.description
		});

		if (this.identifier) {
			list.id = this.identifier;
		}

		for (const item of [...this.children ?? []].filter(x => x.nodeName === "CHIP-TREEITEM")) {
			this.AddItem(item, list);
		}

		this.appendChild(list);
	}

	AddItem(item, list) {
		list ??= this.querySelector(":scope > ul");

		if (list) {
			const listItem = document.createElementWithContents("li", item, {
				className: "tree-item",
				role: "treeitem",
				tabIndex: 0
			}), itemID = item.getAttribute("identifier") ?? "";

			if (itemID) {
				listItem.id = itemID;
			}

			list.appendChild(listItem);
		} else {
			this.appendChild(item);
		}
	}
}

/***/ }),

/***/ "./src/modules/components/wireframe/frame-content.js":
/*!***********************************************************!*\
  !*** ./src/modules/components/wireframe/frame-content.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FrameContent: () => (/* binding */ FrameContent)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class FrameContent extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["spacing"];

	constructor() {
		super();

		this.centred = this.hasAttribute("centred");
		this.spacing = this.getAttribute("spacing") ?? "";
	}

	parsedCallback() {
		this.appendChild(document.createElementWithContents("main", this.childNodes, { className: this.centred ? "container" : "frame__main", id: "mainContent" }));
	}
}

/***/ }),

/***/ "./src/modules/components/wireframe/frame-header.js":
/*!**********************************************************!*\
  !*** ./src/modules/components/wireframe/frame-header.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FrameHeader: () => (/* binding */ FrameHeader)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class FrameHeader extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.restrictWidth = this.hasAttribute("restrict-width");
	}

	parsedCallback() {
		this.classList.add("layout-frame__header");
		const header = document.createElementWithContents("header", this.childNodes);

		if (this.restrictWidth) {
			header.classList.add("container");
		}

		this.appendChild(header);
	}
}

/***/ }),

/***/ "./src/modules/components/wireframe/frame-sidebar.js":
/*!***********************************************************!*\
  !*** ./src/modules/components/wireframe/frame-sidebar.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FrameSidebar: () => (/* binding */ FrameSidebar)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class FrameSidebar extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["padding", "collapsed"];

	constructor() {
		super();

		const preloadCollapse = window.localStorage.getItem("collapseSidebar");

		this.side = this.getAttribute("side") ?? "left";
		this.heading = this.getAttribute("heading");
		this.headingSize = this.getAttribute("heading-size") ?? "4";
		this.headingCaption = this.getAttribute("heading-caption");
		this.description = this.getAttribute("description") ?? this.heading ?? "Application sidebar";
		this.padding = this.getAttribute("padding") ?? (this.closest("chip-frame").layout !== "container" ? "xl" : "0");
		this.collapsible = this.hasAttribute("collapsible");
		this.collapsed = preloadCollapse != null && this.collapsible ? preloadCollapse === "true" : this.hasAttribute("collapse");
		this.brand = this.getAttribute("brand") ?? "";
		this.brandSize = this.getAttribute("brand-size") ?? "4";
		this.brandIcon = this.getAttribute("brand-icon") ?? "";
		this.brandCaption = this.getAttribute("brand-caption");
		this.brandIconSize = this.getAttribute("brand-icon-size") ?? "20";
	}

	parsedCallback() {
		const nav = document.createElementWithContents("nav", this.querySelector(":scope>ul") ?? this.appendChild(document.createElementWithContents("ul", null, { className: "sidebar__list" })), { ariaLabel: this.description });

		if (this.headingCaption) {
			nav.prepend(document.createElementWithContents("chip-text", this.headingCaption));
		}

		if (this.heading) {
			nav.prepend(document.createElementWithContents("chip-header", this.heading, {
				size: this.headingSize,
				element: "h2"
			}));
		}

		if (this.brand || this.collapsible) {
			const topbar = document.createElementWithContents("div", null, { className: "sidebar__top" });

			if (this.brand) {
				const caption = this.brandCaption ? `<chip-text weight="regular" class="sidebar-brand--caption" size="body">${this.brandCaption}</chip-text>` : "";

				topbar.appendChild(document.createElementWithContents("chip-header",
					`
					<div class="h-align gap-md">
						${this.brandIcon ? `<img height="${this.brandIconSize}" width="${this.brandIconSize}" src="${_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(this.brandIcon)}" alt="Sidebar brand icon">` : ""}
						<div>
							${this.brand}
							${caption}
						</div>
					</div>
					`, {
					size: this.brandSize,
					link: "~/",
					className: "sidebar-brand"
				}));
			}

			if (this.collapsible) {
				topbar.appendChild(document.createElementWithContents("chip-button", null, {
					variation: "body",
					buttonStyle: "icon",
					className: "btn--collapse-sidebar",
					tooltip: "Toggle sidebar",
					size: "lg",
					icon: `fas ${this.collapsed ? "fa-bars" : "fa-arrow-left"}`,
					onclick: () => this.collapsed = !this.collapsed
				}));
			}

			nav.prepend(topbar);
		}

		nav.append(...[...this.childNodes].filter(x => !x.matches?.("chip-sidebaritem, chip-sidebarheader")));
		this.appendChild(nav);

		this.querySelectorAll(":scope > chip-sidebaritem, :scope > chip-sidebarheader").forEach(x => this.AddItem(x));
		this.#RefreshTooltips();

		this.refreshActiveItem();
	}

	AddItem(item) {
		this.querySelector(":scope>ul, :scope>nav>ul").appendChild(document.createElementWithContents("li", item, { className: item.nodeName === "CHIP-SIDEBARITEM" ? "sidebar-list-item" : "sidebar-list__section-title" }))
	}

	ClearItems() {
		this.querySelector(":scope>ul, :scope>nav>ul").innerHTML = "";
	}

	refreshActiveItem() {
		const currentURL = location.toString().toLowerCase(),
			eligibleItems = [...this.querySelectorAll("chip-sidebaritem[link]")]
				.filter(x => x.link && currentURL.startsWith(_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(x.link).toLowerCase()));

		const target = eligibleItems.find(item => _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(item.link).toLowerCase() === currentURL)
			?? eligibleItems.find(item => !eligibleItems.find(x => _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetPaths(_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(x.link)).length > _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetPaths(_core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.ResolveRelativeURL(item.link)).length));

		if (target) {
			target.setAttribute("active", "");
		}
	}

	attributeChanged(name, _, newValue) {
		if (name === "collapsed") {
			const collapsed = this.IsAttributeValueTrue(newValue),
				button = this.querySelector(".btn--collapse-sidebar");

			window.localStorage.setItem("collapseSidebar", collapsed);

			if (collapsed) { this.querySelectorAll("chip-sidebaritem").forEach(x => x.Close()); }
			if (button) { button.icon = `fas ${collapsed ? "fa-bars" : "fa-arrow-left"}`; }

			this.#RefreshTooltips();
		}
	}

	#RefreshTooltips() {
		this.querySelectorAll("chip-button[variation='sidebar']").forEach(button => {
			button.tooltip = this.collapsed ? (button.textContent.trim() ?? "") : "";
		});
	}
}

/***/ }),

/***/ "./src/modules/components/wireframe/frame.js":
/*!***************************************************!*\
  !*** ./src/modules/components/wireframe/frame.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Frame: () => (/* binding */ Frame)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class Frame extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	static observedAttributes = ["layout", "spacing"];

	constructor() {
		super();

		this.spacing = this.getAttribute("spacing") ?? "";
		this.layout = this.getAttribute("layout") ?? "full";
		this.restrictHeight = this.hasAttribute("restrict-height");
	}

	parsedCallback() {
		this.classList.add("layout-frame");

		if (this.restrictHeight) { this.classList.add("restrict-height"); }

		this.Header = this.querySelector("chip-frameheader");
		this.Content = this.querySelector("chip-framecontent");
		this.Sidebars = [...this.querySelectorAll("chip-framesidebar")];

		this.RightSidebar = this.querySelector("chip-framesidebar[side='right']") ?? this.Sidebars.at(1);
		this.LeftSidebar = this.querySelector("chip-framesidebar[side='left']") ?? this.Sidebars.find(x => x !== this.RightSidebar);

		switch (this.layout.toLowerCase()) {
			case "container":
				this.#BuildContainerLayout();
				break;
			case "full":
				this.#BuildFullLayout();
				break;
			case "full-centred":
				this.#BuildFullCentredLayout();
				break;
		}
	}

	#BuildFullLayout() {
		if (this.RightSidebar) { this.prepend(this.RightSidebar); }
		if (this.Content) { this.prepend(this.Content); }
		if (this.LeftSidebar) { this.prepend(this.LeftSidebar); }
		if (this.Header) { this.prepend(this.Header); }
	}

	#BuildFullCentredLayout() {
		if (this.RightSidebar) { this.prepend(this.RightSidebar); }

		if (this.Content) {
			this.Content.centred = true;

			this.prepend(this.Content);
		}

		if (this.LeftSidebar) { this.prepend(this.LeftSidebar); }
		if (this.Header) { this.prepend(this.Header); }
	}

	#BuildContainerLayout() {
		this.prepend(document.createElementWithContents("div", [this.LeftSidebar, this.Content, this.RightSidebar], {
			className: "layout-frame__content container"
		}));

		if (this.Header) {
			this.prepend(this.Header);
		}
	}
}

/***/ }),

/***/ "./src/modules/components/wireframe/sidebar-header.js":
/*!************************************************************!*\
  !*** ./src/modules/components/wireframe/sidebar-header.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SidebarHeader: () => (/* binding */ SidebarHeader)
/* harmony export */ });
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");


class SidebarHeader extends _auxilium_component__WEBPACK_IMPORTED_MODULE_0__.AuxiliumComponent {
	constructor() {
		super();

		this.icon = this.getAttribute("icon") ?? "";
		this.iconColour = this.getAttribute("icon-colour");
	}

	parsedCallback() {
		if (this.icon) {
			const headerIcon = document.createElementWithContents("chip-icon", null, { icon: this.icon });
			if (this.iconColour) { headerIcon.colour = this.iconColour; }

			this.prepend(headerIcon);
		}
	}
}

/***/ }),

/***/ "./src/modules/components/wireframe/sidebar-item.js":
/*!**********************************************************!*\
  !*** ./src/modules/components/wireframe/sidebar-item.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SidebarItem: () => (/* binding */ SidebarItem)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/browser */ "./src/modules/core/browser.js");
/* harmony import */ var _auxilium_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../auxilium-component */ "./src/modules/components/auxilium-component.js");



class SidebarItem extends _auxilium_component__WEBPACK_IMPORTED_MODULE_1__.AuxiliumComponent {
	static observedAttributes = ["active"];

	constructor() {
		super();

		this.link = this.getAttribute("link") ?? "";
		this.icon = this.getAttribute("icon") ?? "";
		this.active = this.hasAttribute("active");
		this.accordion = null;
	}

	get collapsed() {
		return this.closest("chip-framesidebar")?.collapsed;
	}

	parsedCallback() {
		const children = this.querySelectorAll(":scope > chip-sidebaritem, :scope > chip-sidebarheader");

		if (this.link) {
			this.appendChild(document.createElementWithContents("chip-button", this.childNodes, {
				link: this.link,
				variation: "sidebar",
				icon: this.icon,
				active: this.active,
				tooltipPlacement: "right",
				tooltip: this.collapsed ? ([...this.childNodes ?? []].at(0)?.textContent ?? "") : ""
			}));
		}

		if (children.length) {
			this.accordion = document.createElementWithContents("chip-accordionitem", children, { className: "sidebar-item--accordion" });

			this.appendChild(document.createElementWithContents("chip-button", null, {
				icon: "fas fa-chevron-down",
				buttonStyle: "icon",
				variation: "body",
				description: "Toggle more options",
				className: "sidebar-item--accordion-toggle",
				onclick: () => this.Toggle()
			}));

			this.insertAdjacentElement("afterend", document.createElementWithContents("chip-sidebaritem", this.accordion));
		}
	}

	Toggle() {
		this.accordion?.Toggle();

		this.querySelector(".sidebar-item--accordion-toggle")?.toggleClass("open", this.accordion?.open);
	}

	Open() {
		if (this.closest("chip-framesidebar")?.collapsed) { return; }

		this.accordion?.Open();

		this.querySelector(".sidebar-item--accordion-toggle")?.classList.add("open");

		const currentItem = this.closest("chip-accordionitem");

		if (currentItem?.parentElement?.previousElementSibling) {
			currentItem.parentElement.previousElementSibling.Open();
		}
	}

	Close() {
		this.accordion?.Close();

		this.querySelector(".sidebar-item--accordion-toggle")?.classList.remove("open");
	}

	attributeChanged(name, _, newValue) {
		if (name === "active") {
			const button = this.querySelector("chip-button[variation='sidebar']");

			if (button) {
				button.active = this.IsAttributeValueTrue(newValue);
			}
		}
	}
}

/***/ }),

/***/ "./src/modules/core/browser.js":
/*!*************************************!*\
  !*** ./src/modules/core/browser.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Browser: () => (/* binding */ Browser)
/* harmony export */ });
class Browser {
	static ToFormData(data) {
		const formData = new FormData();

		for (const key in data) {
			if (data[key] != null) {
				if (Array.isArray(data[key])) {
					if (data[key].length) {
						for (const value of data[key]) {
							formData.append(key, value);
						}
					}
				} else {
					formData.append(key, data[key]);
				}
			}
		}

		return formData;
	}

	static Refresh() {
		location.href = location.href;
	}

	static ResolveRelativeURL(url, includeCulture) {
		if (!url) { return "" };
		url = url.replace("~//", "~/");

		let tildaReplacement = document.documentElement.dataset.serverPath || location.origin;

		if (tildaReplacement.endsWith("/")) { tildaReplacement = tildaReplacement.substring(0, tildaReplacement.length - 1); }
		if (includeCulture && document.documentElement.dataset.culture) { tildaReplacement += `/${document.documentElement.dataset.culture}`; }

		if (url.startsWith("~")) {
			return url.replace("~", tildaReplacement);
		} else if (url.startsWith(".")) {
			return new URL(url, location).toString();
		} else {
			return url;
		}
	}

	static GetRouteID = (url) => parseInt(this.GetPaths(url).find(x => !isNaN(parseInt(x))));

	static SetTestFunction(fn) {
		const existing = document.querySelector(".btn--test");

		if (!existing) {
			document.body.appendChild(document.createElementWithContents("chip-button", "Test Button", {
				onclick: fn,
				variation: "danger",
				className: "btn--test"
			}));
		} else {
			existing.onclick = fn;
		}
	}

	static SubmitSSO(clientID, email) {
		const form = document.createElementWithContents("form",
			`<input type="hidden"  name="client_id" value="${clientID}"/><input type="hidden" name="scope" value="openid User.Read profile email"/><input type="hidden" name="response_type" value="code"/><input type="hidden" name="redirect_uri" value="${this.ResolveRelativeURL("~/oauth")}"/><input type="hidden" name="login_hint" value="${email ?? ""}"/><input type="hidden" name="state" value="${this.GetURLParameter("ReturnUrl") ?? "/"}"/>`, {
			id: "frmSSOAgent",
			name: "frmSSOAgent",
			method: "post",
			target: "_self",
			action: "https://login.microsoftonline.com/chipside.onmicrosoft.com/oauth2/v2.0/authorize"
		});

		document.body.appendChild(form);
		form.submit();
	}

	static SetFlavour(flavour, local) {
		if (!local) { localStorage.setItem("flavour", flavour?.toLowerCase()); }

		const target = document.querySelector("head");
		document.getElementById("lnkFlavour")?.remove();

		if (flavour !== "default" && target) {
			const flavourURL = this.ResolveRelativeURL(`~/css/flavours/${flavour}.css`),
				existing = document.querySelector(`#lnkFlavour[href^='${flavourURL}']`);

			if (!existing) {
				document.getElementById("lnkFlavour")?.remove();

				target.appendChild(Object.assign(document.createElement("link"), {
					rel: "stylesheet",
					href: flavourURL,
					id: "lnkFlavour"
				}));
			} else {
				existing.href = flavourURL;
			}

			document.documentElement.dataset.flavour = flavour?.toLowerCase() ?? "";
		} else {
			document.documentElement.removeAttribute("data-flavour");
		}

		Auxilium.config.flavour = flavour?.toLowerCase() ?? "default";

		_setFlavourLocalization(flavour);
	}

	static PrintBlob(blob) {
		const iframe = document.createElementWithContents("iframe", null, {
			src: URL.createObjectURL(blob),
			className: "d-none",
			onload: () => iframe.contentWindow.print()
		});

		function cleanUp() {
			iframe.remove();
			window.removeEventListener("focus", cleanUp);
		}

		window.addEventListener("focus", cleanUp);

		document.body.appendChild(iframe);
	}

	static GetThemeColour = () => document.documentElement.dataset.colour?.toLowerCase() ?? "blue";

	static GetThemeColours = (includeCorporate) => ["blue", "red", "orange", "purple", "pink", "amber", "cyan", "green", "brown", "teal", "crimson", "olive", "gold", "mauve", "steel", "taupe"]
		.concat(includeCorporate ? ["chipside", "oppidatim"] : []);

	static GetFlavour() { return (localStorage.getItem("flavour") ?? "default").toLowerCase(); }

	static SetColourMode(theme, local) {
		if (theme.toLowerCase() !== "system") {
			document.documentElement.dataset.theme = theme;

			if (!local) {
				localStorage.setItem("site-theme", theme);
			}
		} else {
			document.documentElement.removeAttribute("data-theme");

			if (!local) {
				localStorage.removeItem("site-theme");
			}
		}

		Auxilium.config.theme = theme.toLowerCase();

		Razor.InvokeThemeChange();
	}

	static ToggleColourMode(local) {
		this.SetColourMode(document.documentElement.dataset.theme === "dark" ? "light" : "dark", local);
	}

	static TryParseJSON(value) {
		let obj = value;

		try {
			obj = JSON.parse(value);
		} catch {
			// *twiddle thumbs*
		}

		return obj;
	}

	static GetPaths = (url = "") => new URL(url || document.URL).pathname.toLowerCase().split("/").filter(x => x?.trim() !== "");

	static GetCookie = name => `; ${document.cookie}`.split(`; ${name}=`).pop().split(";").shift();

	static AddMonths(date, amount) {
		date.setDate(1);
		date.setMonth(date.getMonth() + amount);
		date.setDate(Math.min(date.getDate(), this.#GetDaysInMonth(date.getFullYear(), date.getMonth())));

		return date;
	}

	static AddYears(date, amount) {
		date.setFullYear(date.getFullYear() + amount);

		return date;
	}

	static #GetDaysInMonth = (year, month) => [31, (this.#IsLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	static #IsLeapYear = year => (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));

	static #tryShowNotifications(title, options) {
		navigator.serviceWorker.ready.then(reg => {
			reg.getNotifications().then(notifications => {
				if (!notifications.find(x => x.tag === options.tag)) {
					reg.showNotification(title, options)
				}
			});
		});
	}

	static ShowNotification(title, options = {}) {
		options = {
			icon: "/favicon.ico",
			...options
		};

		if (Notification.permission === "granted") {
			this.#tryShowNotifications(title, options);
		} else if (Notification.permission !== "denied") {
			Notification.requestPermission().then(permission => {
				if (permission === "granted") {
					this.#tryShowNotifications(title, options);
				}
			});
		}

	}

	static GetURLParameters = parameter => new URLSearchParams(location.search).getAll(parameter);
	static GetURLParameter = parameter => this.GetURLParameters(parameter).at(0);

	static SetURLParameters(parameters, ignoreIdentical) {
		const params = new URLSearchParams(location.search);

		if (parameters) {
			Object.keys(parameters).forEach(key => {
				const value = parameters[key];

				if (value == null || (Array.isArray(value) && !value.length)) {
					params.delete(key);
				} else {
					const all = params.getAll(key).map(String);

					if (Array.isArray(value)) {
						params.delete(key);
						value.forEach(x => params.append(key, x));
					} else if (!all.includes(value.toString())) {
						params.set(key, value);
					}
				}
			});

			const newValue = params.toString(),
				newUrl = `${location.pathname}${newValue !== '' ? '?' + newValue : ''}`;

			if (newUrl === location.pathname + location.search && ignoreIdentical) { return false; }

			location.href = newUrl;

			return true;
		}

		return false;
	}

	static SetURLParameter = (name, value, ignoreIdentical) => this.SetURLParameters({ [name]: value }, ignoreIdentical);

	static ListenForShortcut(key, modifiers, callback, ignoreInputs) {
		if (typeof modifiers === "string") {
			modifiers = [modifiers];
		}

		if (typeof callback !== "function") { return; }

		window.addEventListener("keydown", event => {
			if (ignoreInputs && (event.target ?? event.relatedTarget)?.closest("input, textarea")) { return; }

			if (event.key.toUpperCase() === key.toUpperCase() && !document.querySelector(".modal.show")) {
				if (modifiers.length) {
					const modifierChecker = {
						CTRL: event.ctrlKey,
						ALT: event.altKey,
						SHIFT: event.shiftKey,
						META: event.metaKey
					}

					if (modifierChecker && !modifiers.find(x => !modifierChecker[x])) {
						const keys = Object.keys(modifierChecker);

						if (keys && !keys.filter(x => !modifiers.includes(x)).find(x => !!modifierChecker[x])) {
							event.preventDefault();
							callback(event);
						}
					}
				} else {
					event.preventDefault();
					callback(event);
				}
			}
		});
	}
}

/***/ }),

/***/ "./src/modules/database/db-interfacer.js":
/*!***********************************************!*\
  !*** ./src/modules/database/db-interfacer.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DbInterfacer: () => (/* binding */ DbInterfacer)
/* harmony export */ });
/* harmony import */ var _dialog_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dialog/dialog */ "./src/modules/dialog/dialog.js");
/* harmony import */ var _dialog_toast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dialog/toast */ "./src/modules/dialog/toast.js");
/* harmony import */ var _razor_razor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../razor/razor */ "./src/modules/razor/razor.js");




class DbInterfacer {
	constructor(id) {
		this.ID = parseInt(id);

		this.GetPayload = this.GetPayload.bind(this);

		this.ResourceURL = "";

		this.SaveHandler = "Save";
		this.DeleteHandler = "Delete";
		this.RestoreHandler = "Restore";

		this.DeleteMessage = "";

		this.Title = "name";

		this.EditConfig = {
			PartialView: "",
			Payload: this.GetPayload,
			InvalidData: this.GetInvalidData,
			PartialViewOptions: { ID: this.ID },
			Title: "",
			Body: "",
			NewInstanceTitle: "",
			Size: "md",
			Theme: "FORM",
			AffirmativeText: this.ID === 0 ? "Create" : "Save",
			Handler: this.SaveHandler
		}
	}

	static OnSave = response => location.href = response.url;
	static OnDelete = null;
	static OnRestore = null;

	async GetDetails() {
		return (await Ajax.Get(`~/${this.ResourceURL}/${this.ID}?handler=JSON`)).body;
	}

	async Edit(options) {
		options = { ...this.EditConfig, ...options };
		const { Theme, Size, AffirmativeText } = options;

		if (!options.Title && this.ID !== 0) {
			options.Title = typeof this.Title === "string"
				? (await this.GetDetails())[this.Title]
				: this.Title?.();
		}
		const dialogOptions = {
			Theme, Size, AffirmativeText, ...(options.DialogOptions ?? {})
		};

		if (!dialogOptions.OnCheckValid) {
			dialogOptions.OnCheckValid = dialog => this.#CanSave(dialog, options);
		}

		_dialog_dialog__WEBPACK_IMPORTED_MODULE_0__.Dialog.ShowPartialView(this.ID === 0 ? options.NewInstanceTitle : options.Title, options.Body, options.PartialView,
			options.PartialViewOptions, dialogOptions).then(proceed => {
				if (proceed) {
					this.Save(options);
				}
			});
	}

	GetInvalidData(dialog) {
		return [...dialog.querySelectorAll(".input-field:not(chip-input .input-field)")].filter(x => x.checkValidity?.() === false);
	}
	GetPayload() { return {}; }

	#CanSave(dialog, options) {
		let failedInputs = options.GetInvalidData ?? this.GetInvalidData;
		failedInputs = [...new Set(failedInputs(dialog).concat([...dialog.querySelectorAll("chip-input, chip-dropdown")].filter(x => x.reportValidity() === false)))];

		dialog.querySelectorAll(".input-field__invalid").forEach(x => x.classList.remove("input-field__invalid"));

		if (!failedInputs.length) {
			return true;
		} else {
			failedInputs.forEach(x => {
				let target = x.nodeName === "INPUT" ? x : x.querySelector("input");
				target ??= x;

				target.classList.add("input-field__invalid");
			});
			return false;
		}
	}

	Save(options = {}) {
		Ajax.Post(`~/${this.ResourceURL}/${this.ID}?handler=${options.Handler ?? this.SaveHandler}`, {
			body: options.Payload ? options.Payload() : this.GetPayload(),
			success: {
				ok: response => {
					_dialog_toast__WEBPACK_IMPORTED_MODULE_1__.Toast.ShowSuccess("Your changes have been saved successfully");

					if (options.OnSave) {
						options.OnSave(response);
					} else {
						this.constructor.OnSave?.(response);
					}
				},
				400: response => {
					const reason = _razor_razor__WEBPACK_IMPORTED_MODULE_2__.Razor.GetBadRequestReason(response);
					if (!reason) { console.log(response); }

					_dialog_dialog__WEBPACK_IMPORTED_MODULE_0__.Dialog.ShowWarning("That doesn't look right", reason);
				}
			}
		});
	}

	async Delete(handler) {
		const title = typeof this.Title === "string"
			? (await this.GetDetails())[this.Title]
			: this.Title?.();

		let message = title ? `Are you sure you'd like to delete '${title}'?` : "Are you sure you'd like to delete this?";

		if (this.DeleteMessage) {
			message = this.DeleteMessage;
		}

		_dialog_dialog__WEBPACK_IMPORTED_MODULE_0__.Dialog.ShowConfirmation("Are you sure?", message).then(proceed => {
			if (proceed) {
				Ajax.Post(`~/${this.ResourceURL}/${this.ID}?handler=${handler ?? this.DeleteHandler}`, {
					success: {
						ok: response => {
							_dialog_toast__WEBPACK_IMPORTED_MODULE_1__.Toast.ShowSuccess(title ? `'${title}' was deleted successfully` : "Deleted successfully");

							this.constructor.OnSave?.(response);
							this.constructor.OnDelete?.(response);
						}
					}
				});
			}
		})
	}

	async Restore(handler) {
		const title = typeof this.Title === "string"
			? (await this.GetDetails())[this.Title]
			: this.Title?.();

		_dialog_dialog__WEBPACK_IMPORTED_MODULE_0__.Dialog.ShowConfirmation("Are you sure?", title ? `Are you sure you'd like to restore '${title}'` : "Are you sure you'd like to restore this?").then(proceed => {
			if (proceed) {
				Ajax.Post(`~/${this.ResourceURL}/${this.ID}?handler=${handler ?? this.RestoreHandler}`, {
					success: {
						ok: response => {
							_dialog_toast__WEBPACK_IMPORTED_MODULE_1__.Toast.ShowSuccess(title ? `'${title}' was restored successfully` : "Restored successfully");

							this.constructor.OnSave?.(response);
							this.constructor.OnRestore?.(response);
						}
					}
				});
			}
		})
	}
}

/***/ }),

/***/ "./src/modules/dialog/dialog.js":
/*!**************************************!*\
  !*** ./src/modules/dialog/dialog.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dialog: () => (/* binding */ Dialog)
/* harmony export */ });
/* harmony import */ var _core_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/browser */ "./src/modules/core/browser.js");


class Dialog {
	static OnOpened = null;

	static DefaultOptions = {
		NegativeText: "No",
		AffirmativeText: "Yes",
		ButtonText: "Close",
		Size: "md",
		Icon: "",
		CentreHeader: false,
		ShowButtons: true,
		BackdropDismiss: true
	}

	static async Show(title, message, options) {
		return this.Open({
			Title: title,
			Message: message,
			Theme: "APPLICATION",
			NegativeText: "",
			AffirmativeText: "Ok",
			ButtonSide: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "RIGHT" : "LEFT",
			...options
		});
	}

	static async ShowError(title, message, error, options) {
		if (error) {
			console.error(error);
		}

		document.querySelector(".dialog-box-error")?.closest("dialog")?.close();

		return this.Open({
			Title: title,
			Message: message,
			Icon: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "fas fa-exclamation-circle" : "",
			CentreHeader: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov",
			ButtonSide: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "RIGHT" : "LEFT",
			Theme: "ERROR", ...options
		});
	}

	static async ShowImage(src, options) {
		return this.Open({
			Theme: "IMAGE",
			Centre: true,
			CustomHTML: document.createElementWithContents("img", null, { src }).outerHTML, ...options
		});
	}

	static async ShowWarning(title, message, options) {
		return this.Open({
			Title: title,
			Message: message,
			Icon: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "fas fa-exclamation-triangle" : "",
			ButtonSide: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "RIGHT" : "LEFT",
			CentreHeader: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov",
			Theme: "WARNING", ...options
		});
	}

	static async ShowSuccess(title, message, options) {
		return this.Open({
			Title: title,
			Message: message,
			Icon: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "fas fa-check-circle" : "",
			ButtonSide: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "RIGHT" : "LEFT",
			CentreHeader: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov",
			Theme: "SUCCESS", ...options
		});
	}

	static async ShowConfirmation(title, message, options) {
		return this.Open({
			Title: title,
			Message: message,
			CentreHeader: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov",
			ButtonSide: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "RIGHT" : "LEFT",
			Icon: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "fas fa-question-circle" : "",
			Theme: "CONFIRM", ...options
		});
	}

	static async ShowInput(title, message, type, options) {
		return this.Open({
			Title: title,
			ButtonSide: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "RIGHT" : "LEFT",
			Message: message,
			Theme: "INPUT",
			NegativeText: "Cancel",
			AffirmativeText: "Ok",
			InputType: type, ...options
		});
	}

	static async ShowTextBox(title, message, options) {
		return await this.ShowInput(title, message, "text", options);
	}

	static async ShowDatePicker(title, message, options) {
		return await this.ShowInput(title, message, "date", options);
	}

	static async ShowTimePicker(title, message, options) {
		return await this.ShowInput(title, message, "time", options);
	}

	static async ShowPassword(title, message, options) {
		return await this.ShowInput(title, message, "password", options);
	}

	static async ShowCustom(title, message, html, options) {
		return this.Open({
			Title: title,
			Message: message,
			CustomHTML: html,
			Theme: "SELECTION",
			Size: "xl",
			ButtonSide: _core_browser__WEBPACK_IMPORTED_MODULE_0__.Browser.GetFlavour() !== "gov" ? "RIGHT" : "LEFT",
			AffirmativeText: "Select",
			NegativeText: "Cancel", ...options
		});
	}

	static async ShowPartialView(title, message, viewName, viewOptions, options) {
		const html = await Razor.GetPartialView(viewName, viewOptions);

		return await this.ShowCustom(title, message, html, options);
	}

	static #GetValue(options, event) {
		switch (options.Theme.toUpperCase()) {
			case "SELECTION": {
				const row = document.querySelector(".dialog-custom table tr.active") || event?.detail.row;

				if (row) {
					return row.dataset.secondaryIdentifier ? `${row.dataset.identifier}|${row.dataset.secondaryIdentifier}` : row.dataset.identifier;
				} else {
					return null;
				}
			}
			case "INPUT":
				return document.querySelector(".dialog-input")?.value;
			default:
				return true;
		}
	}

	static #RefreshEvents(dialog, resolve, options) {
		const input = dialog.querySelector(".dialog-input");

		if (input) {
			Object.assign(input, options.InputAttributes,
				{
					value: options.DefaultValue || ""
				});

			if (options.DefaultValue && input.nodeName === "CHIP-INPUT") {
				input.onparsed = () => input.select();
			}
		}

		[...new Set(dialog.querySelectorAll(".dialog-input, chip-textarea"))].forEach(x => x.onkeyup = ev => {
			if (ev?.key === "Enter" && (ev.ctrlKey || (!options.Multiline && !["CHIP-TEXTAREA", "TEXTAREA"].includes(x.nodeName))) && x.value.trim() !== "" && options.OnCheckValid?.(dialog) !== false) {
				resolve(x.value);
				dialog.closest("dialog")?.close();
			}
		})

		const objectSearchbar = dialog.querySelector(".object-selection-search"),
			entryCount = dialog.querySelector(".entry-caption") ?? {};

		let table = null, listView = null;

		objectSearchbar?.focus();

		function refreshResolveEvents() {
			dialog.querySelectorAll(".dialog__selectable-option").forEach(x => x.onclick = () => {
				resolve(x.dataset.secondaryIdentifier ? `${x.dataset.identifier}|${x.dataset.secondaryIdentifier}` : x.dataset.identifier);
				dialog.closest("dialog")?.close();
			});

			table = dialog.querySelector(".dialog-custom table");
			listView = dialog.querySelector(".list-view");

			// Close the dialog and submit our value when a row has been picked
			table?.addEventListener("rowpicked", ev => {
				const row = dialog.querySelector(".dialog-custom table tr.active") || ev?.detail.row;

				if (row) {
					resolve(row.dataset.secondaryIdentifier ? `${row.dataset.identifier}|${row.dataset.secondaryIdentifier}` : row.dataset.identifier);
				} else {
					resolve(null);
				}

				dialog.closest("dialog")?.close();
			});

			listView?.addEventListener("click", ev => {
				const element = ev.target.closest("[data-identifier]");

				if (element) {
					resolve(element.dataset.secondaryIdentifier ? `${element.dataset.identifier}|${element.dataset.secondaryIdentifier}` : element.dataset.identifier);
					dialog.closest("dialog")?.close();
				}
			});
		}

		refreshResolveEvents();

		if (objectSearchbar) {
			let timeout;

			objectSearchbar.oninput = ev => {
				if (timeout) {
					clearTimeout(timeout);
				}

				timeout = setTimeout(() => {
					if (options.OnSearch) {
						Promise.resolve(options.OnSearch(dialog, ev.target.value)).then(() => refreshResolveEvents());
					} else {
						listView?.ListView.Search(ev.target.value);

						if (table) {
							table.Table.Search(ev.target.value);
							entryCount.textContent = `Showing 1-${table.Table.GetVisibleRows().length} of ${table.Table.GetAllRows().length}`;
						}
					}
				}, 500);
			}
		}

		options.OnRefreshEvents?.(dialog);
	}

	static Close() {
		document.querySelectorAll("dialog[open]").forEach(x => x.close());
	}

	static Open(options) {
		return new Promise(resolve => {
			const dialog = this.#RenderDialog({ ...this.DefaultOptions, ...options });

			dialog.querySelectorAll(".card-footer chip-button").forEach(btn => btn.onclick = ev => {
				if (btn.dataset.affirmative === "true") {
					if (options.OnCheckValid?.(dialog) === false) {
						ev.preventDefault();
					} else {
						resolve(this.#GetValue(options, ev));
						dialog.closest("dialog")?.close();
					}
				}

				if (btn.classList.contains("btn--dismiss-dialog")) {
					if (options.Theme === "CONFIRM") {
						resolve(btn.dataset.affirmative === "true");
					}

					dialog.closest("dialog")?.close();
				}
			});

			this.#RefreshEvents(dialog, resolve, options);

			if (!["SELECTION", "INPUT"].includes(options.Theme.toUpperCase())) {
				dialog.addEventListener("hide.bs.modal", () => resolve());
			}

			options.OnBeforeOpen?.(dialog, resolve);
			this.OpenModal(dialog);
		});
	}

	static OpenModal(element) {
		let focusElement = element.querySelector("chip-dropdown, chip-input, chip-textarea, chip-select") ?? [...element.querySelectorAll(".modal-footer button")].at(-1);

		const instance = document.createElementWithContents("dialog", element);
		document.body.appendChild(instance);

		instance.onclose = () => instance.remove();
		instance.showModal();

		if (focusElement) {
			focusElement.onparsed = () => focusElement.focus();
		}

		Dialog.OnOpened?.();
	}

	static #RenderDialog(options) {
		options.Appearance ??= options.Theme;

		// Custom HTML to insert into the dialog
		let custom = document.createElementWithContents("div", "", { className: "dialog-input-container" });

		if (options.Theme.toLowerCase() === "input") {
			custom.innerHTML = options.Multiline ? `<chip-textarea description="Enter value" rows="12" class="dialog-input"></chip-textarea>` : `<chip-input form-width description="Enter value" class="dialog-input" type="${options.InputType}"></chip-input>`;
		}

		if (options.CustomHTML instanceof Node) { custom.appendChild(options.CustomHTML); }
		else { custom.innerHTML += options.CustomHTML ?? ""; }

		if (options.Scrollable == null) {
			options.Scrollable = options.Size === "xl" || !custom.querySelector("chip-dropdown, chip-iconpicker, chip-colourpicker");
		}

		const details = {
			Icon: options.Icon?.trim() ? `<i class="mx-auto dialog-icon ${options.Icon}"></i>` : "",
			Title: options.Title?.toString().trim() ? `<div class="card-title">${options.Title}</div>` : "",
			Message: options.Message?.toString().trim() ? `<div class="card-subtitle">${options.Message}</div>` : ""
		}

		let header = "";

		if (options.Title?.toString().trim() !== "" || options.Message?.toString().trim() !== "" || ["SUCCESS", "ERROR", "WARNING"].includes(options.Theme.toUpperCase().trim())) {
			header =
				`<div class="card-header">
						${details.Icon}
            ${details.Title}
            ${details.Message}
          </div>`.trim();
		}

		const dialog = document.createElementWithContents("div",
			`
      <div class="modal-dialog${options.Centre ? " dialog-centred" : ""} modal-${options.Size}${options.FullHeight ? " modal-full-height" : ""}">
      ${options.Theme.toLowerCase() !== "image" ?
					`
          <div class="modal-content card-frame">
            ${header}
          <div class="card-body dialog-custom">${custom.outerHTML}`
					: `<div class="modal-content overflow-hidden">${options.CustomHTML ?? ""}</div>`}</div>
      `.trim(), {
			className: "dialog"
		});

		dialog.classList.add(`dialog-box-${options.Appearance.toLowerCase().replaceAll("_", "-")}`);

		if (options.Scrollable) { dialog.classList.add("dialog-scrollable") };
		if (options.CentreHeader) { dialog.classList.add("dialog-centre-header"); }


		// Footer buttons
		if (options.Theme.toLowerCase() !== "image" && options.ShowButtons) {
			let footerButtons = `<chip-button variation="none" class="btn--dismiss-dialog btn-dialog-themed">${options.ButtonText}</chip-button>`;

			if (!["SUCCESS", "ERROR", "WARNING"].includes(options.Theme.toUpperCase().trim())) {
				footerButtons = `
          ${options.NegativeText?.trim() !== "" ? `<div class="col"><chip-button variation="secondary" class="w-100 btn--dismiss-dialog">${options.NegativeText}</chip-button></div>` : ""}
          ${options.AffirmativeText?.trim() !== "" ? `<div class="col"><chip-button variation="theme" data-affirmative="true" class="btn-affirmative btn-dialog-themed">${options.AffirmativeText}</chip-button></div>` : ""}
          `.trim();
			}

			dialog.querySelector(".modal-content").appendChild(document.createElementWithContents("div", footerButtons, { className: `card-footer ${options.ButtonSide?.toUpperCase() === "RIGHT" ? "ms-auto" : "me-auto"} gx-2 row` }));
		}

		const closeCSSSelector = options.Theme.toLowerCase() !== "image" ? ".modal-content" : "img";

		dialog.onmousedown = ev => {
			if (options.BackdropDismiss && ev.target && !ev.target.closest?.(closeCSSSelector)) {
				dialog.onmouseup = event => {
					if (event.target && !event.target.closest?.(closeCSSSelector)) {
						dialog.closest("dialog")?.close();
					}

					dialog.onmouseup = null;
				}
			}
		}

		return dialog;
	}
}

/***/ }),

/***/ "./src/modules/dialog/toast.js":
/*!*************************************!*\
  !*** ./src/modules/dialog/toast.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Toast: () => (/* binding */ Toast)
/* harmony export */ });
class Toast {
	static async ShowSuccess(title, message, options) {
		return this.#Open("SUCCESS", {
			Title: title,
			Message: message,
			Icon: "far fa-check", ...options
		});
	}

	static async ShowWarning(title, message, options) {
		return this.#Open("WARNING", {
			Title: title,
			Message: message,
			Icon: "far fa-exclamation-triangle", ...options
		});
	}

	static async ShowInfo(title, message, options) {
		return this.#Open("INFO", {
			Title: title,
			Message: message,
			Icon: "far fa-info-circle", ...options
		});
	}

	static async ShowError(title, message, options) {
		return this.#Open("ERROR", {
			Title: title,
			Message: message,
			Icon: "far fa-times-octagon", ...options
		});
	}

	static #RenderToast(type, options) {
		let message = options.Message ?? "";

		const toast = document.createElementWithContents("div", `
        <div class="chip-toast toast-${type.toLowerCase()}" role="alert" aria-live="assertive" aria-atomic="true">
					<div class="h-align gap-md">
						<chip-icon
							class="toast--icon"
							size="lg"
							icon="${options.Icon}">
						</chip-icon>
						<div>
							<div class="${message?.trim() ? "toast--title" : ""}">${options.Title}</div>
							<div class="toast--message">${message}</div>
						</div>
						<chip-button description="Close toast" variation="body" button-style="icon" icon="fal fa-times"></chip-button>
					</div>
        </div>`).firstElementChild;

		toast.querySelector("chip-button").onclick = () => this.CloseToast(toast);

		return toast;
	}

	static CloseToast(toast) {
		toast.remove();
	}

	static #Open(type, options) {
		const toast = this.#RenderToast(type, options);
		this.#GetOrCreateContainer()?.appendChild(toast);

		let timeout = setTimeout(() => Toast.CloseToast(toast), 5000);

		toast.onmouseenter = () => clearTimeout(timeout);
		toast.onmouseleave = () => timeout = setTimeout(() => Toast.CloseToast(toast), 5000);

		setTimeout(() => {
			toast.classList.add("show");
		}, 1);
	}

	static #GetOrCreateContainer() {
		const toastContainer = document.querySelector(".toast__wrapper") ?? document.createElementWithContents("div", "", { className: "toast__wrapper" });

		if (toastContainer) {
			document.body.prepend(toastContainer);
		}

		return toastContainer;
	}
}

/***/ }),

/***/ "./src/modules/io/fileuploader.js":
/*!****************************************!*\
  !*** ./src/modules/io/fileuploader.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FileUploader: () => (/* binding */ FileUploader)
/* harmony export */ });
class FileUploader {
	static Options = {};
	static Lurker = {};

	static Initialize(options) {
		const existingLurker = document.getElementById("ipLurker");

		this.Lurker = existingLurker ?? document.createElementWithContents("input", "", {
			type: "file",
			id: "ipLurker",
			className: "d-none position-absolute"
		});

		if (!existingLurker) { document.body.appendChild(this.Lurker); }

		this.Options = {
			MaximumSize: 10485760,
			AllowedExtensions: [], ...options
		};

		if (this.Options.Buttons?.length) {
			[...(typeof this.Options.Buttons === "string" ? document.querySelectorAll(this.Options.Buttons) : this.Options.Buttons)]
				.filter(x => x != null)
				.forEach(button => button.onclick = () => this.#GetFiles());
		}

		if (this.Options.DropAreas?.length) {
			((typeof this.Options.DropAreas === "string" ? document.querySelectorAll(this.Options.DropAreas) : this.Options.DropAreas))
				.forEach(area => {
					Object.assign(area ?? {}, {
						ondragenter: ev => ev.preventDefault(),
						ondragover: ev => ev.preventDefault(),
						ondrop: this.#OnDrop
					});
				});
		}
	}

	static #OnDrop = ev => {
		ev.preventDefault();

		const items = ev.dataTransfer.items,
			files = ev.dataTransfer.files;

		if (this.Options.DragDropMessage) {
			Dialog.ShowConfirmation("Are you sure?", this.Options.DragDropMessage).then(proceed => {
				if (!proceed) { return; }

				if (ev.dataTransfer.items?.length) {
					this.#ProcessFiles(Array.from(items).filter(x => x.kind === "file").map(y => y.getAsFile()));
				} else {
					this.#ProcessFiles(files);
				}
			});
		} else if (items) {
			this.#ProcessFiles(Array.from(items).filter(x => x.kind === "file").map(y => y.getAsFile()));
		} else {
			this.#ProcessFiles(files);
		}
	}

	static #getFileData(reader) {
		return btoa(new Uint8Array(reader.result).reduce((data, byte) => data + String.fromCharCode(byte), ''))
	}

	static #getImageSrc(reader, file) {
		return `data:${file.type};base64,${this.#getFileData(reader)}`;
	}

	static getAuxiliumFile(file, reader) {
		const auxFile = Object.assign(file, {
			getData: () => this.#getFileData(reader),
			getImageSrc: () => this.#getImageSrc(reader, auxFile)
		});

		return auxFile;
	}

	static async #ProcessFiles(receivedFiles) {
		const files = [];

		return new Promise(res => {
			if (receivedFiles.length) {
				const reader = new FileReader();
				let index = 0;

				const mapper = new Promise(resolve => {
					reader.onload = async () => {
						const file = this.getAuxiliumFile(receivedFiles[index], reader);

						if (!this.Options.AllowedExtensions.length || this.Options.AllowedExtensions.includes(file.name.split(".").pop())) {
							if (file.size <= this.Options.MaximumSize || this.Options.MaximumSize < 1) {
								files.push(file);
							} else if (typeof this.Options.OnFileTooLarge === "function") {
								await this.Options.OnFileTooLarge(file);
							}
						}

						if (index < receivedFiles.length - 1) {
							reader.readAsArrayBuffer(receivedFiles[++index]);
						} else {
							resolve();
						}
					}
				});

				reader.readAsArrayBuffer(receivedFiles[0]);

				mapper.then(() => {
					this.Options.OnComplete?.(files);

					res(files);
				});
			}
		});
	}

	static #GetFiles() {
		return new Promise(resolve => {
			Object.assign(this.Lurker, {
				accept: this.Options.AllowedExtensions.map(x => `.${x}`).join(","),
				onchange: () => this.#ProcessFiles(this.Lurker.files).then(files => resolve(files))
			});

			if (this.Options.Multiple) {
				this.Lurker.setAttribute("multiple", "");
			}

			if (this.Options.IsDirectory) {
				Object.assign(this.Lurker, {
					directory: "",
					webkitdirectory: "",
					multiple: ""
				});
			}

			this.Lurker.click();
		});
	}
}

/***/ }),

/***/ "./src/modules/razor/razor.js":
/*!************************************!*\
  !*** ./src/modules/razor/razor.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Razor: () => (/* binding */ Razor)
/* harmony export */ });
/* harmony import */ var _ajax_ajax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ajax/ajax.js */ "./src/modules/ajax/ajax.js");
/* harmony import */ var _components_list_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/list-view.js */ "./src/modules/components/list-view.js");
/* harmony import */ var _components_table_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/table.js */ "./src/modules/components/table.js");
/* harmony import */ var _core_browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/browser.js */ "./src/modules/core/browser.js");
/* harmony import */ var _dialog_dialog_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dialog/dialog.js */ "./src/modules/dialog/dialog.js");






const ARIA_LABEL_SELECTOR = "a[href], audio, video[controls], input, select, button, textarea, header, footer, nav, main, aside, section, form, [role='navigation'], iframe, img";

class Razor {
	static #_onStateUpdate = null;
	static #stateUpdated = false;

	static OnThemeChange = null;

	static get OnStateUpdate() {
		return Razor.#_onStateUpdate;
	}

	static set OnStateUpdate(value) {
		if (Razor.#stateUpdated) {
			value?.();
		}

		Razor.#_onStateUpdate = value;
	}

	static GetHandlerURL = handler => {
		const parsed = new URL(document.URL);

		parsed.hash = "";
		parsed.searchParams.set("handler", handler);

		return parsed.toString();
	}

	static async GetPartialView(name, modelProperties, ajaxOptions = {}) {
		modelProperties ??= {};

		const response = await _ajax_ajax_js__WEBPACK_IMPORTED_MODULE_0__.Ajax.Post(this.GetHandlerURL("RenderPartialView"), {
			queryParameters: {
				view: name
			},
			body: modelProperties,
			headers: {
				pragma: 'no-cache',
				'cache-control': 'no-cache'
			},
			success: { 404: () => { } },
			LoadTimeout: 0,
			...ajaxOptions
		});

		return response?.ok ? response.content : "";
	}

	static RenderPartialView(name, modelProperties, container, options = { LoadingIcon: true }) {
		return new Promise(resolve => {
			if (!container) { resolve(); }

			setTimeout(() => {
				if (options.LoadingIcon) {
					container.innerHTML = '<chip-loading class="loading--pv"></chip-loading>';
				}
			}, 300);

			this.GetPartialView(name, modelProperties, options).then(response => {
				options.LoadingIcon = false;
				container.innerHTML = response;

				this.UpdateState();
				resolve();
			});
		});
	}

	static #DisableButton(button) {
		if (button) {
			button.disabled = true;
			button.classList.add("disabled");
		}
	}

	static #EnableButton(button) {
		if (button) {
			button.removeAttribute("disabled");
			button.removeClass("disabled");
		}
	}

	static FireButtonAjax(button) {
		let buttonForm = button.form;

		if (button?.nodeName !== "BUTTON") {
			buttonForm = document.getElementById(button.form) ?? button.closest("form");
		}

		function send() {
			if (!button?.ajax?.SkipFormValidation && (buttonForm && ([...buttonForm.querySelectorAll("chip-form") ?? []].find(x => !x.reportValidity()) || !buttonForm.reportValidity()))) {
				return;
			} else {
				Razor.#DisableButton(button);
			}

			const body = new URLSearchParams();

			if (buttonForm) {
				for (const pair of new FormData(buttonForm)) {
					if (pair[0] !== "__RequestVerificationToken") {
						body.append(pair[0].slice(pair[0].indexOf(".") + 1), pair[1]);
					}
				}
			}

			if (button?.CheckValid?.(body) === false) {
				return Razor.#EnableButton(button);
			}

			const responseOverride = button?.ajax?.success ?? {};

			responseOverride.ok ??= response => {
				history.replaceState("", document.title, button.ajax?.ReturnURL ?? response.url);
				_core_browser_js__WEBPACK_IMPORTED_MODULE_3__.Browser.Refresh();
			}

			responseOverride["400"] ??= response => {
				if (typeof button.ajax?.OnBadRequest === "function") {
					button.ajax.OnBadRequest(response);
				} else {
					_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_4__.Dialog.ShowWarning("That doesn't look right", Razor.GetBadRequestReason(response));
				}
			}

			let url = "";

			if (button.ajax?.Handler) {
				url = Razor.GetHandlerURL(button.ajax.Handler);
			} else {
				url = button.getAttribute("formAction") ? button.formAction : Razor.GetHandlerURL("Save");
			}

			_ajax_ajax_js__WEBPACK_IMPORTED_MODULE_0__.Ajax.Post(url, {
				body,
				OnComplete: response => {
					Razor.#EnableButton(button);

					if (response?.ok) {
						window.onbeforeunload = null;
					}
				},
				success: responseOverride,
				error: error => {
					Razor.#EnableButton(button);

					_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_4__.Dialog.ShowError("Error", Localizer.ERROR_MESSAGE, error);
				}, ...button.ajax
			});
		}

		if (button.dataset.requiresConfirmation === "true") {
			_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_4__.Dialog.ShowConfirmation(button?.ajax?.ConfirmationData?.Title ?? "Are you sure?", button?.ajax?.ConfirmationData?.Body ?? "Are you sure you want to do this?").then(result => {
				if (result) {
					send();
				}
			});
		} else {
			send();
		}
	}

	static GetBadRequestReason = response => _core_browser_js__WEBPACK_IMPORTED_MODULE_3__.Browser.TryParseJSON(response.content)?.at(0)?.value.errors.at(0).errorMessage ?? response.content;

	static UpdateThemeToggleText(theme) {
		if (window.btnThemeToggle && theme) {
			btnThemeToggle.tooltip = Localizer[`THEME_BUTTON_${theme.toUpperCase()}`];
			btnThemeToggle.description = Localizer[`THEME_BUTTON_${theme.toUpperCase()}`];
		}
	}

	static #showTooltip(tooltip, element) {
		if (!tooltip?.trim()) { return; }

		let { width, left, top, height, right } = element.getBoundingClientRect(),
			container = document.createElementWithContents("div",
				`
								<div class="tooltip-content">
									${tooltip}
								</div>
								<div class="tooltip-arrow">
								</div>
							`.trim(),
				{
					className: "tooltip-container",
					id: element.__tooltipID,
					role: "tooltip"
				}
			);

		if (!height && !width) { return; }

		top += window.scrollY;
		right += window.scrollX;
		left += window.scrollX;

		const PLACEMENT_FNS = {
			placeTop: () => {
				Object.assign(container.style, {
					left: `${left + (width / 2)}px`,
					top: `${top}px`
				});

				container.setAttribute("placement", "top");
			},
			placeRight: () => {
				Object.assign(container.style, {
					left: `${left + width}px`,
					top: `${top + (height / 2)}px`
				});

				container.setAttribute("placement", "right");
			},
			placeBottom: () => {
				Object.assign(container.style, {
					top: `${top + height}px`
				});

				container.setAttribute("placement", "bottom");
			},
			placeLeft: () => {
				Object.assign(container.style, {
					left: `${left}px`,
					top: `${top + (height / 2)}px`
				});

				container.setAttribute("placement", "left");
			}
		}

		PLACEMENT_FNS.placeTop();

		document.body.appendChild(container);

		const tooltipDimensions = container.getBoundingClientRect(),
			currentDirection = element.getAttribute("tooltip-direction")?.toLowerCase() ?? "top";

		if (currentDirection !== "top") {
			PLACEMENT_FNS[`place${currentDirection[0].toUpperCase() + currentDirection.slice(1).toLowerCase()}`]();
		}

		if (tooltipDimensions.top <= 0 || tooltipDimensions.left <= 0 || (right + ((tooltipDimensions.width - width) / 2) > window.innerWidth)) {
			if (right + ((tooltipDimensions.width - width) / 2) <= window.innerWidth) {
				PLACEMENT_FNS.placeRight();
			} else if (tooltipDimensions.right <= window.innerWidth) {
				PLACEMENT_FNS.placeBottom();
			} else {
				PLACEMENT_FNS.placeLeft();
			}
		}

		container.classList.add("tooltip--shown");
		element.setAttribute("aria-describedby", element.__tooltipID);
	}

	static RefreshTooltips() {
		document.querySelectorAll("[tooltip]").forEach(element => {
			if (element.__tooltipID) { return; }

			element.__tooltipID ??= `tt${crypto.randomUUID().slice(0, 8)}`;

			let showTimeout,
				hideTimeout;

			if (element.matches?.(ARIA_LABEL_SELECTOR) && !element.hasAttribute("aria-label") && element.textContent.trim() === "") {
				element.ariaLabel = element.getAttribute("tooltip");
			}

			element.onmouseover = ev => {
				const dropdown = ev.target.closest(".dropdown__list"),
					tooltip = element.getAttribute("tooltip") ?? "";

				if (!document.getElementById(element.__tooltipID) && (!dropdown || dropdown.contains(element))) {
					clearTimeout(hideTimeout);
					hideTimeout = null;

					showTimeout ??= setTimeout(() => this.#showTooltip(tooltip, element), 300);
				}
			}

			function hideTooltip() {
				clearTimeout(showTimeout);
				showTimeout = null;

				hideTimeout ??= setTimeout(() => {
					element.removeAttribute("aria-describedby");
					document.getElementById(element.__tooltipID)?.remove();
				}, 300);
			}

			element.onmouseout = ev => {
				const dropdown = ev.target.closest(".dropdown__list");

				if (dropdown?.contains(element) === false || !element.contains(ev.relatedTarget)) {
					hideTooltip();
				}
			}

			element.onmouseleave = () => hideTooltip();
		});
	}

	static InvokeThemeChange() {
		const target = document.querySelector("link[href*='code-highlight']")

		if (target) {
			if (document.documentElement.dataset.theme === "dark") {
				target.href = target.href.replace("code-highlight.css", "code-highlight-dark.css");
			} else {
				target.href = target.href.replace("code-highlight-dark.css", "code-highlight.css");
			}
		}

		Razor.OnThemeChange?.();
	}

	static #RefreshElements() {
		document.querySelectorAll(".standard-pagination-input").forEach(x => x.onkeyup = ev => {
			if (ev.key === "Enter" && !isNaN(ev.target.value) && ev.target.value.trim() !== "") {
				_core_browser_js__WEBPACK_IMPORTED_MODULE_3__.Browser.SetURLParameter("p", Math.max(1, parseInt(ev.target.value)), true);
			}
		});

		document.querySelectorAll(".btn-collapse-sidebar").forEach(x => x.onclick = () => {
			const nav = x.closest("chip-framesidebar");

			if (nav) {
				nav.collapsed = !nav.collapsed;
			}
		});

		if (window.btnThemeToggle) {
			btnThemeToggle.onclick = () => {
				const theme = document.documentElement.dataset.theme === "dark" ? "light" : "dark";

				document.documentElement.dataset.theme = theme;
				localStorage.setItem("site-theme", theme);

				this.UpdateThemeToggleText(theme);
				this.InvokeThemeChange();
			}

			this.UpdateThemeToggleText(document.documentElement.dataset.theme);
		}

		document.querySelectorAll("[data-enhance='true']").forEach(x => x.enhance());

		document.querySelectorAll(".cookie-warning__button--accept").forEach(button => button.onclick = () => {
			document.cookie = `CookiePolicyCheck=null;path=/;expires=${_core_browser_js__WEBPACK_IMPORTED_MODULE_3__.Browser.AddYears(new Date(), 1)}`;
			document.querySelector(".js-cookie-banner").innerHTML = "";
		});

		document.querySelectorAll(".btn-entity-post").forEach(x => x.onclick = () => this.FireButtonAjax(x));

		document.querySelectorAll(".search-bar").forEach(bar => {
			const input = bar.querySelector("input");

			if (input) {
				function submit() {
					if (bar.Search?.href) {
						const url = Object.assign(new URL(_core_browser_js__WEBPACK_IMPORTED_MODULE_3__.Browser.ResolveRelativeURL(bar.Search?.href)), {
							hash: ""
						});

						url.searchParams.set("q", input.value.trim() === "" ? null : input.value.trim());

						location.href = url;
					} else {
						_core_browser_js__WEBPACK_IMPORTED_MODULE_3__.Browser.SetURLParameter("q", input.value.trim() === '' ? null : input.value.trim());
					}
				}

				input.onkeyup = ev => {
					if (ev.key === "Enter") {
						submit();
					}
				}

				bar.querySelector(".search-bar__button").onclick = () => submit();
			}
		});
	}

	static GetVerificationToken() {
		return document.querySelector("input[type='hidden'][name='__RequestVerificationToken']")?.value ?? "";
	}

	static #RefreshComponents() {
		_components_table_js__WEBPACK_IMPORTED_MODULE_2__.Table.RefreshTables();
		_components_list_view_js__WEBPACK_IMPORTED_MODULE_1__.ListView.RefreshListViews();
	}

	static UpdateState() {
		this.#RefreshComponents();
		this.#RefreshElements();
		this.RefreshTooltips();

		Razor.OnStateUpdate?.();
		Razor.#stateUpdated = true;
	}

	static SetButtonAjax(button, data) {
		if (button) {
			button.ajax ??= {};
			Object.assign(button.ajax, data);
		}
	}
}

_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_4__.Dialog.OnOpened = () => Razor.UpdateState();

/***/ }),

/***/ "./src/modules/reports/config-report.js":
/*!**********************************************!*\
  !*** ./src/modules/reports/config-report.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConfigReport: () => (/* binding */ ConfigReport)
/* harmony export */ });
class ConfigReport {
	static #hookCharacter = "┗━";

	static Run() {
		let failures = this.#GetFailures(),
			logs = [],
			count = 0;

		Object.entries(failures).forEach(([failure, section], ix) => {
			if (ix !== 0) { logs.push("\n".repeat(2)); }

			logs.push(failure);

			Object.entries(section).forEach(([problem, sectionData], ix) => {
				logs.push(`${"\n".repeat(ix === 0 ? 1 : 2)}${" ".repeat(2)}${this.#hookCharacter} ${problem}`);
				logs.push(`\n${" ".repeat(7)}${this.#hookCharacter} ${sectionData[0].description.trim().replace(/\t/g, "").replace(/\n/g, "\n" + " ".repeat(10))}\n\n`);
				logs.push(`${" ".repeat(9)}Element${sectionData.length === 1 ? "" : "s"}:\n`);

				sectionData.forEach((data, ix) => {
					logs.push(`${" ".repeat(6)}`);
					logs.push(data.element);

					if (ix !== sectionData.length - 1) {
						logs.push("\n");
					}
				});

				count += sectionData.length;
			});
		});

		if (logs.length) {
			Toast.ShowWarning(`Auxilium has identified ${count} resolvable issue${count === 1 ? "" : "s"} on this page. Please check the developer console to view more details.`);

			logs.unshift(`Total Issues: ${count}\n\n`);
			logs.unshift(`Sections: ${Object.keys(failures).length}\n`);
			logs.unshift("font-size:1.75rem;font-weight:700;line-height:2.8571rem;");
			logs.unshift("%c🠶 Auxilium Report\n");

			console.log(...logs);
		}
	}

	static #GetFailures() {
		let failures = [];

		if (!document.documentElement.dataset.serverPath) {
			failures.push({
				section: "Auxilium",
				type: "config",
				problem: "Missing HTML server-path",
				description: `The root HTML element in DOM needs the server-path attribute so that Auxilium can provide more accurate
											results when parsing relative URLs.
											`,
				element: document.documentElement
			});
		}

		if (!document.documentElement.lang) {
			failures.push({
				section: "Auxilium",
				type: "accessibility",
				problem: "Missing HTML lang",
				description: `The root HTML element in DOM should be given a lang value, for example lang="en". This ensures screen
				readers read/pronounce page content as intended.
											`,
				element: document.documentElement
			});
		}

		for (const breadcrumb of document.querySelectorAll("chip-breadcrumb")) {
			if (!breadcrumb.description && !breadcrumb.getAttribute("description")) {
				failures.push({
					section: "Breadcrumbs",
					type: "accessibility",
					problem: "Breadcrumb has no accessible name",
					description: `Provide a meaningful, accessible description via the description attribute to help screen readers.`,
					element: breadcrumb
				});
			}
		}

		for (const tree of document.querySelectorAll("chip-tree")) {
			if (!tree.description && !tree.getAttribute("description")) {
				failures.push({
					section: "Tree Views",
					type: "accessibility",
					problem: "Tree view has no accessible name",
					description: `Provide a meaningful, accessible description via the description attribute to help screen readers.`,
					element: tree
				});
			}
		}

		for (const button of document.querySelectorAll("chip-button")) {
			if (button.buttonStyle === "icon"
				&& (!button.description && !button.label && !button.tooltip)
				&& (!button.id || !document.querySelector(`[for='${button.id}']`))) {

				failures.push({
					section: "Buttons",
					type: "accessibility",
					problem: "Icon button has has no accessible name",
					description: `
						Provide either a label or tooltip to give extra information, especially to buttons that hold no discernible
						text. If you'd like to avoid displaying visible text on the page, you can supply a description instead.
					`,
					element: button
				});
			}
		}

		for (const iconPicker of document.querySelectorAll("chip-iconpicker")) {
			if (!iconPicker.label && !iconPicker.getAttribute("label") && !iconPicker.description && !iconPicker.getAttribute("description")) {
				failures.push({
					section: "Icon Pickers",
					type: "accessibility",
					problem: "Icon picker has no accessible name",
					description: `Provide a meaningful, accessible label via the label attribute to help screen readers. If you'd like
					to avoid displaying visible text on the page, you can supply a description instead.`,
					element: iconPicker
				});
			}
		}

		failures.push(...this.#GetInputFailures());
		failures.push(...this.#GetTextareaFailures());

		for (const img of document.querySelectorAll("img")) {
			if (!img.hasAttribute("alt") && !img.getAttribute("aria-label") && !img.getAttribute("aria-labelledby") && img.role !== "presentation") {
				failures.push({
					section: "Images",
					type: "accessibility",
					problem: "Image has neither an accessible name nor is marked as decorative",
					description: `If the image conveys meaning, provide either an alt, aria-label or aria-labelledby attribute. If not, you
					can pass role="presentation" to mark the image as decorative.`,
					element: img
				});
			}
		}

		for (const strandedHeader of document.querySelectorAll("h1:not(chip-header h1),h2:not(chip-header h2),h3:not(chip-header h3),h4:not(chip-header h4),h5:not(chip-header h5),h6:not(chip-header h6)")) {
			failures.push({
				section: "Stranded Elements",
				type: "stranded",
				problem: "Header does not reside within a chip-header",
				description: `When using Auxilium, it is required to use a chip-header component when working with headers to fully
				abuse Auxilium's styling and capabilities.`,
				element: strandedHeader
			});
		}

		failures = GroupBy(failures, x => x.section);

		for (const failure in failures) {
			failures[failure] = GroupBy(failures[failure], x => x.problem);
		}

		return failures;
	}

	static #GetTextareaFailures() {
		const failures = [];

		for (const textArea of document.querySelectorAll("chip-textarea")) {
			if (!textArea.description && !textArea.label && !textArea.placeholder && !textArea.getAttribute("label") && !textArea.getAttribute("description") && !textArea.getAttribute("placeholder") && !document.querySelector(`label[for='${textArea.identifier}']`)) {
				failures.push({
					section: "Textareas",
					type: "accessibility",
					problem: "Textarea has no accessible name",
					description: `Each chip-textarea needs to have a label (or alternatively, a placeholder) in order to provide meaningful descriptions, especially to
					screen readers. If you'd like to avoid displaying visible text on page, you can supply a description instead.`,
					element: textArea
				});
			}
		}

		return failures;
	}

	static #GetInputFailures() {
		const failures = [];

		for (const input of document.querySelectorAll("chip-input")) {
			if (!input.description && !input.label && !input.placeholder && !input.getAttribute("label") && !input.getAttribute("description") && !input.getAttribute("placeholder") && !document.querySelector(`label[for='${input.identifier}']`)) {
				failures.push({
					section: "Inputs",
					type: "accessibility",
					problem: "Input has no accessible name",
					description: `Each chip-input needs to have a label (or alternatively, a placeholder) in order to provide meaningful descriptions, especially to
					screen readers. If you'd like to avoid displaying visible text on page, you can supply a description instead.`,
					element: input
				});
			}
		}

		return failures;
	}
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*************************!*\
  !*** ./src/auxilium.js ***!
  \*************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   config: () => (/* binding */ config)
/* harmony export */ });
/* harmony import */ var _modules_ajax_ajax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/ajax/ajax.js */ "./src/modules/ajax/ajax.js");
/* harmony import */ var _modules_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/dialog/dialog.js */ "./src/modules/dialog/dialog.js");
/* harmony import */ var _modules_dialog_toast_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/dialog/toast.js */ "./src/modules/dialog/toast.js");
/* harmony import */ var _modules_razor_razor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/razor/razor.js */ "./src/modules/razor/razor.js");
/* harmony import */ var _modules_components_list_view_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/components/list-view.js */ "./src/modules/components/list-view.js");
/* harmony import */ var _modules_io_fileuploader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/io/fileuploader.js */ "./src/modules/io/fileuploader.js");
/* harmony import */ var _modules_core_browser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/core/browser.js */ "./src/modules/core/browser.js");
/* harmony import */ var _modules_database_db_interfacer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/database/db-interfacer.js */ "./src/modules/database/db-interfacer.js");
/* harmony import */ var _modules_components_card_card_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/components/card/card.js */ "./src/modules/components/card/card.js");
/* harmony import */ var _modules_components_checkbox_checkbox_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/components/checkbox/checkbox.js */ "./src/modules/components/checkbox/checkbox.js");
/* harmony import */ var _modules_components_textarea_textarea_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/components/textarea/textarea.js */ "./src/modules/components/textarea/textarea.js");
/* harmony import */ var _modules_components_infogroup_info_group_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/components/infogroup/info-group.js */ "./src/modules/components/infogroup/info-group.js");
/* harmony import */ var _modules_components_infogroup_infogroup_row_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/components/infogroup/infogroup-row.js */ "./src/modules/components/infogroup/infogroup-row.js");
/* harmony import */ var _modules_components_infogroup_infogroup_value_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/components/infogroup/infogroup-value.js */ "./src/modules/components/infogroup/infogroup-value.js");
/* harmony import */ var _modules_components_input_input_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modules/components/input/input.js */ "./src/modules/components/input/input.js");
/* harmony import */ var _modules_components_dropdown_dropdown_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modules/components/dropdown/dropdown.js */ "./src/modules/components/dropdown/dropdown.js");
/* harmony import */ var _modules_components_dropdown_dropdown_item_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./modules/components/dropdown/dropdown-item.js */ "./src/modules/components/dropdown/dropdown-item.js");
/* harmony import */ var _modules_components_callout_callout_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modules/components/callout/callout.js */ "./src/modules/components/callout/callout.js");
/* harmony import */ var _modules_components_sortablelist_sortable_list_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./modules/components/sortablelist/sortable-list.js */ "./src/modules/components/sortablelist/sortable-list.js");
/* harmony import */ var _modules_components_sortablelist_sortable_listitem_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./modules/components/sortablelist/sortable-listitem.js */ "./src/modules/components/sortablelist/sortable-listitem.js");
/* harmony import */ var _modules_components_tree_tree_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./modules/components/tree/tree.js */ "./src/modules/components/tree/tree.js");
/* harmony import */ var _modules_components_tree_tree_item_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./modules/components/tree/tree-item.js */ "./src/modules/components/tree/tree-item.js");
/* harmony import */ var _modules_components_dropdown_dropdown_divider_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./modules/components/dropdown/dropdown-divider.js */ "./src/modules/components/dropdown/dropdown-divider.js");
/* harmony import */ var _modules_components_dropdown_dropdown_group_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./modules/components/dropdown/dropdown-group.js */ "./src/modules/components/dropdown/dropdown-group.js");
/* harmony import */ var _modules_components_dropdown_dropdown_header_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./modules/components/dropdown/dropdown-header.js */ "./src/modules/components/dropdown/dropdown-header.js");
/* harmony import */ var _modules_components_contextmenu_menu_item_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./modules/components/contextmenu/menu-item.js */ "./src/modules/components/contextmenu/menu-item.js");
/* harmony import */ var _modules_components_contextmenu_context_menu_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./modules/components/contextmenu/context-menu.js */ "./src/modules/components/contextmenu/context-menu.js");
/* harmony import */ var _modules_components_contextmenu_menu_divider_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./modules/components/contextmenu/menu-divider.js */ "./src/modules/components/contextmenu/menu-divider.js");
/* harmony import */ var _modules_components_accordion_accordion_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./modules/components/accordion/accordion.js */ "./src/modules/components/accordion/accordion.js");
/* harmony import */ var _modules_components_accordion_accordion_item_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./modules/components/accordion/accordion-item.js */ "./src/modules/components/accordion/accordion-item.js");
/* harmony import */ var _modules_components_tabs_tabgroup_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./modules/components/tabs/tabgroup.js */ "./src/modules/components/tabs/tabgroup.js");
/* harmony import */ var _modules_components_tabs_tab_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./modules/components/tabs/tab.js */ "./src/modules/components/tabs/tab.js");
/* harmony import */ var _modules_components_form_form_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./modules/components/form/form.js */ "./src/modules/components/form/form.js");
/* harmony import */ var _modules_components_form_form_section_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./modules/components/form/form-section.js */ "./src/modules/components/form/form-section.js");
/* harmony import */ var _modules_components_emptyprompt_prompt_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./modules/components/emptyprompt/prompt.js */ "./src/modules/components/emptyprompt/prompt.js");
/* harmony import */ var _modules_components_button_button_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./modules/components/button/button.js */ "./src/modules/components/button/button.js");
/* harmony import */ var _modules_components_button_splitbutton_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./modules/components/button/splitbutton.js */ "./src/modules/components/button/splitbutton.js");
/* harmony import */ var _modules_components_button_dropdown_button_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./modules/components/button/dropdown-button.js */ "./src/modules/components/button/dropdown-button.js");
/* harmony import */ var _modules_components_iconpicker_iconpicker_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./modules/components/iconpicker/iconpicker.js */ "./src/modules/components/iconpicker/iconpicker.js");
/* harmony import */ var _modules_components_button_button_group_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./modules/components/button/button-group.js */ "./src/modules/components/button/button-group.js");
/* harmony import */ var _modules_components_colourpicker_colourpicker_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./modules/components/colourpicker/colourpicker.js */ "./src/modules/components/colourpicker/colourpicker.js");
/* harmony import */ var _modules_components_badge_badge_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./modules/components/badge/badge.js */ "./src/modules/components/badge/badge.js");
/* harmony import */ var _modules_components_label_label_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./modules/components/label/label.js */ "./src/modules/components/label/label.js");
/* harmony import */ var _modules_components_header_header_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./modules/components/header/header.js */ "./src/modules/components/header/header.js");
/* harmony import */ var _modules_components_range_range_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./modules/components/range/range.js */ "./src/modules/components/range/range.js");
/* harmony import */ var _modules_components_breadcrumb_breadcrumb_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./modules/components/breadcrumb/breadcrumb.js */ "./src/modules/components/breadcrumb/breadcrumb.js");
/* harmony import */ var _modules_components_breadcrumb_breadcrumb_item_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./modules/components/breadcrumb/breadcrumb-item.js */ "./src/modules/components/breadcrumb/breadcrumb-item.js");
/* harmony import */ var _modules_components_progress_progress_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./modules/components/progress/progress.js */ "./src/modules/components/progress/progress.js");
/* harmony import */ var _modules_components_progress_progress_item_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./modules/components/progress/progress-item.js */ "./src/modules/components/progress/progress-item.js");
/* harmony import */ var _modules_components_radio_radio_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./modules/components/radio/radio.js */ "./src/modules/components/radio/radio.js");
/* harmony import */ var _modules_components_code_block_code_block_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./modules/components/code-block/code-block.js */ "./src/modules/components/code-block/code-block.js");
/* harmony import */ var _highlight_min_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./highlight.min.js */ "./src/highlight.min.js");
/* harmony import */ var _modules_components_wireframe_frame_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./modules/components/wireframe/frame.js */ "./src/modules/components/wireframe/frame.js");
/* harmony import */ var _modules_components_wireframe_frame_header_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./modules/components/wireframe/frame-header.js */ "./src/modules/components/wireframe/frame-header.js");
/* harmony import */ var _modules_components_wireframe_frame_sidebar_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./modules/components/wireframe/frame-sidebar.js */ "./src/modules/components/wireframe/frame-sidebar.js");
/* harmony import */ var _modules_components_wireframe_frame_content_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./modules/components/wireframe/frame-content.js */ "./src/modules/components/wireframe/frame-content.js");
/* harmony import */ var _modules_components_wireframe_sidebar_header_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./modules/components/wireframe/sidebar-header.js */ "./src/modules/components/wireframe/sidebar-header.js");
/* harmony import */ var _modules_components_wireframe_sidebar_item_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./modules/components/wireframe/sidebar-item.js */ "./src/modules/components/wireframe/sidebar-item.js");
/* harmony import */ var _modules_components_beacon_beacon_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./modules/components/beacon/beacon.js */ "./src/modules/components/beacon/beacon.js");
/* harmony import */ var _modules_components_icon_icon_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./modules/components/icon/icon.js */ "./src/modules/components/icon/icon.js");
/* harmony import */ var _modules_components_select_select_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./modules/components/select/select.js */ "./src/modules/components/select/select.js");
/* harmony import */ var _modules_components_select_option_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./modules/components/select/option.js */ "./src/modules/components/select/option.js");
/* harmony import */ var _modules_components_carousel_carousel_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./modules/components/carousel/carousel.js */ "./src/modules/components/carousel/carousel.js");
/* harmony import */ var _modules_components_carousel_carousel_slide_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./modules/components/carousel/carousel-slide.js */ "./src/modules/components/carousel/carousel-slide.js");
/* harmony import */ var _modules_components_link_link_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./modules/components/link/link.js */ "./src/modules/components/link/link.js");
/* harmony import */ var _modules_reports_config_report_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./modules/reports/config-report.js */ "./src/modules/reports/config-report.js");
/* harmony import */ var _modules_components_dateformat_date_format_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./modules/components/dateformat/date-format.js */ "./src/modules/components/dateformat/date-format.js");
/* harmony import */ var _modules_components_grid_grid_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./modules/components/grid/grid.js */ "./src/modules/components/grid/grid.js");
/* harmony import */ var _modules_components_progress_bar_progressbar_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./modules/components/progress-bar/progressbar.js */ "./src/modules/components/progress-bar/progressbar.js");
/* harmony import */ var _modules_components_loading_loading_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./modules/components/loading/loading.js */ "./src/modules/components/loading/loading.js");
/* harmony import */ var _modules_components_list_list_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./modules/components/list/list.js */ "./src/modules/components/list/list.js");
/* harmony import */ var _modules_components_list_list_item_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./modules/components/list/list-item.js */ "./src/modules/components/list/list-item.js");
/* harmony import */ var _modules_components_text_text_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./modules/components/text/text.js */ "./src/modules/components/text/text.js");










































































const configSetter = {
	set(target, property, value) {
		if (target[property] !== value) {
			target[property] = value;
			onConfigValueChanged(property, value);
		}

		return true;
	}
}

const config = new Proxy({
	isDevelopment: document.documentElement.dataset.testMode?.toLowerCase() === "true",
	flavour: document.documentElement.dataset.flavour || "default",
	theme: document.documentElement.dataset.theme ?? "system",
	colour: document.documentElement.dataset.colour?.toLowerCase() ?? "blue"
}, configSetter);

const localizationHandler = {
	get(target, key) {
		return key in target ? target[key] : key;
	},
	set(target, key, value) {
		return Reflect.set(target, key, value);
	}
};

Object.assign(__webpack_require__.g, {
	Localizer: new Proxy({}, localizationHandler),
	Ajax: _modules_ajax_ajax_js__WEBPACK_IMPORTED_MODULE_0__.Ajax, Dialog: _modules_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_1__.Dialog, Toast: _modules_dialog_toast_js__WEBPACK_IMPORTED_MODULE_2__.Toast, ContextMenu: _modules_components_contextmenu_context_menu_js__WEBPACK_IMPORTED_MODULE_26__.ContextMenu, ListView: _modules_components_list_view_js__WEBPACK_IMPORTED_MODULE_4__.ListView,
	FileUploader: _modules_io_fileuploader_js__WEBPACK_IMPORTED_MODULE_5__.FileUploader, Razor: _modules_razor_razor_js__WEBPACK_IMPORTED_MODULE_3__.Razor, Browser: _modules_core_browser_js__WEBPACK_IMPORTED_MODULE_6__.Browser, DbInterfacer: _modules_database_db_interfacer_js__WEBPACK_IMPORTED_MODULE_7__.DbInterfacer, CodeHighlight: _highlight_min_js__WEBPACK_IMPORTED_MODULE_51__.hljs
});

Event.prototype.halt = function () {
	this.stopPropagation();
	this.stopImmediatePropagation();
}

HTMLElement.prototype.wrapWithElement = function (nodeName, attributes) {
	const wrapper = Object.assign(document.createElement(nodeName), attributes);
	this.insertAdjacentElement("beforebegin", wrapper);

	wrapper.appendChild(this);
	return wrapper;
}

Document.prototype.createElementWithContents = function (nodeName, content, attributes) {
	const element = Object.assign(this.createElement(nodeName), attributes);

	if (content instanceof NodeList || content instanceof HTMLCollection || Array.isArray(content)) { element.append(...[...content].filter(x => x != null)); }
	else if (content instanceof Node) { element.appendChild(content); }
	else if (content != null) { element.innerHTML = content.toString(); }

	return element;
}

HTMLElement.prototype.toggleClass = function (className, add) {
	if (add == null) {
		add = !this.classList.contains(className);
	}

	if (add) {
		this.classList.add(className);
	} else {
		this.removeClass(className);
	}
}

function replaceURLs(element) {
	const urlRegex = /ht{2}ps?:\/\/(?:w{3}\.|(?!w{3}))[a-zA-Z\d][a-zA-Z\d-]+[a-zA-Z\d]\.\S{2,}|w{3}\.[a-zA-Z\d][a-zA-Z\d-]+[a-zA-Z\d]\.\S{2,}|ht{2}ps?:\/\/(?:w{3}\.|(?!w{3}))[a-zA-Z\d]+\.\S{2,}|w{3}\.[a-zA-Z\d]+\.\S{2,}/gi;

	function processTextNode(textNode) {
		const text = textNode.nodeValue;
		const fragment = document.createDocumentFragment();
		let lastIndex = 0;

		text.replace(urlRegex, (url, offset) => {
			if (url.endsWith(")")) { url = url.slice(0, -1); }

			const displayURL = url;

			if (url.toLowerCase().startsWith("www.")) {
				url = "//" + url;
			}

			if (lastIndex < offset) {
				fragment.appendChild(document.createTextNode(text.slice(lastIndex, offset)));
			}

			fragment.appendChild(document.createElementWithContents("chip-link", displayURL, {
				rel: "noopener",
				target: "_blank",
				href: url
			}));

			lastIndex = offset + displayURL.length;
		});

		if (lastIndex < text.length) {
			fragment.appendChild(document.createTextNode(text.slice(lastIndex)));
		}

		textNode.replaceWith(fragment);
	}

	function traverseNodes(node) {
		if (node.nodeType === Node.TEXT_NODE) {
			processTextNode(node);
		} else if (node.nodeType === Node.ELEMENT_NODE) {
			Array.from(node.childNodes).forEach(traverseNodes);
		}
	}

	traverseNodes(element);
}

function replaceEmails(element) {
	const emailRegex = /[a-z\d!#$%&'*/=?^_`{|}~-]+(?:\.[a-z\d!#$%&'*/=?^_`{|}~-]+)*@(?:[a-z\d](?:[a-z\d-]*[a-z\d])?\.)+[a-z\d](?:[a-z\d-]*[a-z\d])?/ig;

	function processTextNode(textNode) {
		const text = textNode.nodeValue;
		const fragment = document.createDocumentFragment();
		let lastIndex = 0;

		text.replace(emailRegex, (email, offset) => {
			if (lastIndex < offset) {
				fragment.appendChild(document.createTextNode(text.slice(lastIndex, offset)));
			}

			fragment.appendChild(document.createElementWithContents("chip-link", email, {
				href: `mailto:${email}`
			}));

			lastIndex = offset + email.length;
		});

		if (lastIndex < text.length) {
			fragment.appendChild(document.createTextNode(text.slice(lastIndex)));
		}

		textNode.replaceWith(fragment);
	}

	function traverseNodes(node) {
		if (node.nodeType === Node.TEXT_NODE) {
			processTextNode(node);
		} else if (node.nodeType === Node.ELEMENT_NODE) {
			Array.from(node.childNodes).forEach(traverseNodes);
		}
	}

	traverseNodes(element);
}

HTMLElement.prototype.enhance = function () {
	replaceURLs(this);
	replaceEmails(this);
}

function trimBreaksFromElement(element) {
	let lines = element.textContent.split('\n');

	if (lines.at(0) === "") { lines.shift(); }

	let matches,
		indentation = (matches = /^\s+/.exec(lines[0])) !== null ? matches[0] : null;

	if (indentation) {
		lines = lines.map(line => line.replace(indentation, '').replace(/\t/g, '    '));
		element.textContent = lines.join('\n').trimStart();

		if (!element.nextSibling) { element.textContent = element.textContent.trimEnd(); }
	}
}

HTMLElement.prototype.trimBreaks = function () {
	trimBreaksFromElement(this);
}

Node.prototype.trimBreaks = function () {
	trimBreaksFromElement(this);
}

HTMLElement.prototype.removeClasses = function (...classNames) {
	this.classList.remove(classNames);

	if (this.className === "") {
		this.removeAttribute("class");
	}
}

HTMLElement.prototype.removeClass = function (className) {
	this.removeClasses(className);
}

function similarity(s1, s2) {
	let longer = s1;
	let shorter = s2;

	if (s1.length < s2.length) {
		longer = s2;
		shorter = s1;
	}

	const longerLength = longer.length;

	if (longerLength == 0) {
		return 1.0;
	}
	return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);
}

function editDistance(s1, s2) {
	s1 = s1.toLowerCase();
	s2 = s2.toLowerCase();

	const costs = [];

	for (let i = 0; i <= s1.length; i++) {
		let lastValue = i;

		for (let j = 0; j <= s2.length; j++) {
			if (i == 0) {
				costs[j] = j;
			}
			else if (j > 0) {
				let newValue = costs[j - 1];

				if (s1.charAt(i - 1) != s2.charAt(j - 1)) {
					newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
				}

				costs[j - 1] = lastValue;
				lastValue = newValue;
			}
		}

		if (i > 0) {
			costs[s2.length] = lastValue;
		}
	}

	return costs[s2.length];
}

const isScrollable = node => {
	if (!(node instanceof HTMLElement || node instanceof SVGElement)) {
		return false
	}

	const style = getComputedStyle(node);

	return ['overflow', 'overflow-x', 'overflow-y'].some((propertyName) => {
		const value = style.getPropertyValue(propertyName)
		return value === 'auto' || value === 'scroll'
	});
}

__webpack_require__.g.IsURL = function (value) {
	return /ht{2}ps?:\/\/(?:w{3}\.|(?!w{3}))[a-zA-Z\d][a-zA-Z\d-]+[a-zA-Z\d]\.\S{2,}|w{3}\.[a-zA-Z\d][a-zA-Z\d-]+[a-zA-Z\d]\.\S{2,}|ht{2}ps?:\/\/(?:w{3}\.|(?!w{3}))[a-zA-Z\d]+\.\S{2,}|w{3}\.[a-zA-Z\d]+\.\S{2,}/i.test(value.trim());
}

__webpack_require__.g._setFlavourLocalization = function (flavour = "default") {
	flavour ||= "default";

	if (flavour === "default") {
		Object.assign(Localizer, {
			ERROR_TITLE: "Error",
			ERROR_MESSAGE: "Something went wrong, and we're not sure what it was. You can either try again or report this error to an administrator if it persists."
		});
	} else {
		Object.assign(Localizer, {
			ERROR_TITLE: "There was a problem",
			ERROR_MESSAGE: "An unknown error has caused the application to stop working. If you continue to see this error, contact us."
		});
	}

	Localizer.DIALOG_BUTTON_CLOSE = "Close";
	Localizer.DIALOG_BUTTON_AFFIRMATIVE = "Yes";
	Localizer.DIALOG_BUTTON_NEGATIVE = "No";

	Localizer.THEME_BUTTON_DARK = "Change to light mode";
	Localizer.THEME_BUTTON_LIGHT = "Change to dark mode";
	Localizer.TOGGLE_DROPDOWN = "Toggle dropdown";

	Localizer.CONFIRMATION_TITLE = "Are you sure?";
	Localizer.WARNING_TITLE = "Warning";
	Localizer.SUCCESS_TITLE = "Success";

	Localizer.DROPDOWN_REQUIRED = "Please select an option";
	Localizer.COPIED_VALUE = "Copied to clipboard successfully";
	Localizer.TOGGLE_SIDEBAR = "Toggle sidebar";

	Localizer.BAD_REQUEST = "Something about your request wasn't recognized. Please try again later, and report this issue to an administrator if it persists.";
	Localizer.NOT_FOUND = "We couldn't seem to find the resource you requested. It could be that it doesn't exist, or it has been deleted.";
	Localizer.ACCESS_DENIED = "It doesn't look like you've got permission to do that. If you believe this is a mistake, please contact your system administrator.";
	Localizer.ACCESS_DENIED_TITLE = "Access Denied";

	Object.assign(_modules_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_1__.Dialog.DefaultOptions, {
		ButtonText: Localizer.DIALOG_BUTTON_CLOSE,
		AffirmativeText: Localizer.DIALOG_BUTTON_AFFIRMATIVE,
		NegativeText: Localizer.DIALOG_BUTTON_NEGATIVE
	});
}

__webpack_require__.g.getScrollParent = node => {
	let currentParent = node.parentElement

	while (currentParent) {
		if (isScrollable(currentParent)) {
			return currentParent
		}

		currentParent = currentParent.parentElement
	}

	return document.scrollingElement || document.documentElement
}

__webpack_require__.g.getClipboardText = async function () {
	try {
		const state = (await navigator.permissions.query({ name: 'clipboard-read' })).state;

		return state !== "denied"
			? await navigator.clipboard.readText()
			: "";
	} catch {
		// Firefox doesn't support reading from the clipboard
		return "";
	}
}

__webpack_require__.g.getClipboardData = async function () {
	try {
		const state = (await navigator.permissions.query({ name: 'clipboard-read' })).state;

		return state !== "denied"
			? await navigator.clipboard.read()
			: [];
	} catch {
		// Firefox being Firefox
		return [];
	}
}

__webpack_require__.g.writeClipboardText = async function (text) {
	try {
		const state = (await navigator.permissions.query({ name: 'clipboard-write' })).state;

		if (state !== "denied") {
			await navigator.clipboard.writeText(text);
		}
	} catch {
		await navigator.clipboard.writeText(text);
	}
}

__webpack_require__.g.writeClipboard = async function (items) {
	try {
		const state = (await navigator.permissions.query({ name: 'clipboard-write' })).state;

		if (state !== "denied") {
			await navigator.clipboard.write(items);
		}
	} catch {
		await navigator.clipboard.write(items);
	}
}

__webpack_require__.g.capitalise = function (str) {
	return String(str).charAt(0).toUpperCase() + String(str).slice(1);
}

__webpack_require__.g.toTitleCase = function (str) {
	if (!str) { return str; }

	let upper = true;
	let newStr = "";

	for (let i = 0, l = str.length; i < l; i++) {
		if (str[i] == " ") {
			upper = true;
			newStr += str[i];

			continue;
		}

		newStr += upper ? str[i].toUpperCase() : str[i].toLowerCase();
		upper = false;
	}

	return newStr;
}

__webpack_require__.g.SortCaseInsensitive = function (a, b) {
	return a.toLowerCase().localeCompare(b.toLowerCase());
}

__webpack_require__.g.GroupBy = (array, fn) => array.reduce((a, b, i) => {
	const key = fn(b, i, array);

	a[key] ||= [];
	a[key].push(b);

	return a;
}, {});

__webpack_require__.g.SearchArray = function (array, query, propertyName, minLength) {
	const splitQuery = query.toUpperCase().split(" "),
		matchWholeProp = query.length < minLength;

	let arrSearched = array.
		map(x => {
			const comparator = propertyName ? x[propertyName] : x;

			const obj = {
				IsMatch: false,
				OriginalElement: x,
				MatchLevel: similarity(comparator.toUpperCase(), query)
			}

			if (matchWholeProp) {
				obj.IsMatch = comparator.toUpperCase() === query.toUpperCase();
			} else {
				obj.IsMatch = splitQuery.find(y => comparator.toUpperCase().includes(y));
			}

			return obj;
		}).filter(x => x.IsMatch).sort((a, b) => b.MatchLevel - a.MatchLevel);

	// If we're doing a fuzzy search, and there are results that contain ALL queries, reduce the fuzzy search to these results
	if (!matchWholeProp && splitQuery.length > 1) {
		const verboseMatches = arrSearched.filter(x => {
			const originalComparator = propertyName ? x.OriginalElement[propertyName] : x.OriginalElement;

			return !splitQuery.find(y => !originalComparator.toUpperCase().includes(y))
		});

		if (verboseMatches.length) {
			arrSearched = verboseMatches;
		}
	}

	return arrSearched.map(x => x.OriginalElement);
}

_setFlavourLocalization(document.documentElement.dataset.flavour);

window.customElements.define("chip-card", _modules_components_card_card_js__WEBPACK_IMPORTED_MODULE_8__.Card);
window.customElements.define("chip-checkbox", _modules_components_checkbox_checkbox_js__WEBPACK_IMPORTED_MODULE_9__.Checkbox);
window.customElements.define("chip-input", _modules_components_input_input_js__WEBPACK_IMPORTED_MODULE_14__.Input);
window.customElements.define("chip-textarea", _modules_components_textarea_textarea_js__WEBPACK_IMPORTED_MODULE_10__.Textarea);
window.customElements.define("chip-infogroup", _modules_components_infogroup_info_group_js__WEBPACK_IMPORTED_MODULE_11__.InfoGroup);
window.customElements.define("chip-inforow", _modules_components_infogroup_infogroup_row_js__WEBPACK_IMPORTED_MODULE_12__.InfoGroupRow);
window.customElements.define("chip-infovalue", _modules_components_infogroup_infogroup_value_js__WEBPACK_IMPORTED_MODULE_13__.InfoGroupValue);
window.customElements.define("chip-dropdown", _modules_components_dropdown_dropdown_js__WEBPACK_IMPORTED_MODULE_15__.Dropdown);
window.customElements.define("chip-dropdownitem", _modules_components_dropdown_dropdown_item_js__WEBPACK_IMPORTED_MODULE_16__.DropdownItem);
window.customElements.define("chip-dropdowndivider", _modules_components_dropdown_dropdown_divider_js__WEBPACK_IMPORTED_MODULE_22__.DropdownDivider);
window.customElements.define("chip-dropdowngroup", _modules_components_dropdown_dropdown_group_js__WEBPACK_IMPORTED_MODULE_23__.DropdownGroup);
window.customElements.define("chip-dropdownheader", _modules_components_dropdown_dropdown_header_js__WEBPACK_IMPORTED_MODULE_24__.DropdownHeader);
window.customElements.define("chip-callout", _modules_components_callout_callout_js__WEBPACK_IMPORTED_MODULE_17__.Callout);
window.customElements.define("chip-sortablelist", _modules_components_sortablelist_sortable_list_js__WEBPACK_IMPORTED_MODULE_18__.SortableList);
window.customElements.define("chip-sortablelistitem", _modules_components_sortablelist_sortable_listitem_js__WEBPACK_IMPORTED_MODULE_19__.SortableListItem);
window.customElements.define("chip-tree", _modules_components_tree_tree_js__WEBPACK_IMPORTED_MODULE_20__.Tree);
window.customElements.define("chip-treeitem", _modules_components_tree_tree_item_js__WEBPACK_IMPORTED_MODULE_21__.TreeItem);
window.customElements.define("chip-contextmenu", _modules_components_contextmenu_context_menu_js__WEBPACK_IMPORTED_MODULE_26__.ContextMenu);
window.customElements.define("chip-menuitem", _modules_components_contextmenu_menu_item_js__WEBPACK_IMPORTED_MODULE_25__.MenuItem);
window.customElements.define("chip-menudivider", _modules_components_contextmenu_menu_divider_js__WEBPACK_IMPORTED_MODULE_27__.MenuDivider);
window.customElements.define("chip-accordion", _modules_components_accordion_accordion_js__WEBPACK_IMPORTED_MODULE_28__.Accordion);
window.customElements.define("chip-accordionitem", _modules_components_accordion_accordion_item_js__WEBPACK_IMPORTED_MODULE_29__.AccordionItem);
window.customElements.define("chip-button", _modules_components_button_button_js__WEBPACK_IMPORTED_MODULE_35__.Button);
window.customElements.define("chip-splitbutton", _modules_components_button_splitbutton_js__WEBPACK_IMPORTED_MODULE_36__.SplitButton);
window.customElements.define("chip-dropdownbutton", _modules_components_button_dropdown_button_js__WEBPACK_IMPORTED_MODULE_37__.DropdownButton);
window.customElements.define("chip-tabgroup", _modules_components_tabs_tabgroup_js__WEBPACK_IMPORTED_MODULE_30__.TabGroup);
window.customElements.define("chip-tab", _modules_components_tabs_tab_js__WEBPACK_IMPORTED_MODULE_31__.Tab);
window.customElements.define("chip-form", _modules_components_form_form_js__WEBPACK_IMPORTED_MODULE_32__.Form);
window.customElements.define("chip-formsection", _modules_components_form_form_section_js__WEBPACK_IMPORTED_MODULE_33__.FormSection);
window.customElements.define("chip-emptyprompt", _modules_components_emptyprompt_prompt_js__WEBPACK_IMPORTED_MODULE_34__.Prompt);
window.customElements.define("chip-iconpicker", _modules_components_iconpicker_iconpicker_js__WEBPACK_IMPORTED_MODULE_38__.IconPicker);
window.customElements.define("chip-buttongroup", _modules_components_button_button_group_js__WEBPACK_IMPORTED_MODULE_39__.ButtonGroup);
window.customElements.define("chip-colourpicker", _modules_components_colourpicker_colourpicker_js__WEBPACK_IMPORTED_MODULE_40__.ColourPicker);
window.customElements.define("chip-badge", _modules_components_badge_badge_js__WEBPACK_IMPORTED_MODULE_41__.Badge);
window.customElements.define("chip-label", _modules_components_label_label_js__WEBPACK_IMPORTED_MODULE_42__.Label);
window.customElements.define("chip-header", _modules_components_header_header_js__WEBPACK_IMPORTED_MODULE_43__.Header);
window.customElements.define("chip-range", _modules_components_range_range_js__WEBPACK_IMPORTED_MODULE_44__.Range);
window.customElements.define("chip-breadcrumb", _modules_components_breadcrumb_breadcrumb_js__WEBPACK_IMPORTED_MODULE_45__.Breadcrumb);
window.customElements.define("chip-breadcrumbitem", _modules_components_breadcrumb_breadcrumb_item_js__WEBPACK_IMPORTED_MODULE_46__.BreadcrumbItem);
window.customElements.define("chip-progress", _modules_components_progress_progress_js__WEBPACK_IMPORTED_MODULE_47__.Progress);
window.customElements.define("chip-progressitem", _modules_components_progress_progress_item_js__WEBPACK_IMPORTED_MODULE_48__.ProgressItem);
window.customElements.define("chip-radio", _modules_components_radio_radio_js__WEBPACK_IMPORTED_MODULE_49__.Radio);
window.customElements.define("chip-codeblock", _modules_components_code_block_code_block_js__WEBPACK_IMPORTED_MODULE_50__.CodeBlock);
window.customElements.define("chip-frame", _modules_components_wireframe_frame_js__WEBPACK_IMPORTED_MODULE_52__.Frame);
window.customElements.define("chip-frameheader", _modules_components_wireframe_frame_header_js__WEBPACK_IMPORTED_MODULE_53__.FrameHeader);
window.customElements.define("chip-framesidebar", _modules_components_wireframe_frame_sidebar_js__WEBPACK_IMPORTED_MODULE_54__.FrameSidebar);
window.customElements.define("chip-framecontent", _modules_components_wireframe_frame_content_js__WEBPACK_IMPORTED_MODULE_55__.FrameContent);
window.customElements.define("chip-sidebarheader", _modules_components_wireframe_sidebar_header_js__WEBPACK_IMPORTED_MODULE_56__.SidebarHeader);
window.customElements.define("chip-sidebaritem", _modules_components_wireframe_sidebar_item_js__WEBPACK_IMPORTED_MODULE_57__.SidebarItem);
window.customElements.define("chip-beacon", _modules_components_beacon_beacon_js__WEBPACK_IMPORTED_MODULE_58__.Beacon);
window.customElements.define("chip-icon", _modules_components_icon_icon_js__WEBPACK_IMPORTED_MODULE_59__.Icon);
window.customElements.define("chip-select", _modules_components_select_select_js__WEBPACK_IMPORTED_MODULE_60__.Select);
window.customElements.define("chip-option", _modules_components_select_option_js__WEBPACK_IMPORTED_MODULE_61__.ChipOption);
window.customElements.define("chip-carousel", _modules_components_carousel_carousel_js__WEBPACK_IMPORTED_MODULE_62__.Carousel);
window.customElements.define("chip-carouselslide", _modules_components_carousel_carousel_slide_js__WEBPACK_IMPORTED_MODULE_63__.CarouselSlide);
window.customElements.define("chip-link", _modules_components_link_link_js__WEBPACK_IMPORTED_MODULE_64__.Link);
window.customElements.define("chip-dateformat", _modules_components_dateformat_date_format_js__WEBPACK_IMPORTED_MODULE_66__.DateFormat);
window.customElements.define("chip-grid", _modules_components_grid_grid_js__WEBPACK_IMPORTED_MODULE_67__.Grid);
window.customElements.define("chip-progressbar", _modules_components_progress_bar_progressbar_js__WEBPACK_IMPORTED_MODULE_68__.ProgressBar);
window.customElements.define("chip-loading", _modules_components_loading_loading_js__WEBPACK_IMPORTED_MODULE_69__.Loading);
window.customElements.define("chip-list", _modules_components_list_list_js__WEBPACK_IMPORTED_MODULE_70__.List);
window.customElements.define("chip-listitem", _modules_components_list_list_item_js__WEBPACK_IMPORTED_MODULE_71__.ListItem);
window.customElements.define("chip-text", _modules_components_text_text_js__WEBPACK_IMPORTED_MODULE_72__.TextElement);

if (location.hash) {
	const closestTab = document.getElementById(location.hash.substring(1))?.closest(".tab-group__tab, chip-tab");

	if (closestTab) {
		closestTab.closest("chip-tabgroup").selectIndex([...closestTab.parentElement.children ?? []].indexOf(closestTab));
	}
}

_modules_razor_razor_js__WEBPACK_IMPORTED_MODULE_3__.Razor.UpdateState();

function closeDropdownsFromEvent(ev) {
	let closestInput = ev.target?.closest?.("chip-dropdown")?.parentElement;

	if (closestInput?.nodeName !== "CHIP-INPUT") { closestInput = null; }

	[...document.querySelectorAll("chip-dropdown")].filter(x => (ev.target instanceof Node && !x.contains(ev.target)) && x !== ev.target?.closest?.("chip-dropdown") && !closestInput?.contains(x))
		.forEach(x => x.Close());
}

window.addEventListener('focus', ev => closeDropdownsFromEvent(ev), false);

document.body.addEventListener("mousedown", ev => {
	document.querySelectorAll("chip-contextmenu").forEach(x => x.HandleMenuBlurEvent(ev));

	closeDropdownsFromEvent(ev);
});

if (config.isDevelopment) {
	window.addEventListener("load", () => _modules_reports_config_report_js__WEBPACK_IMPORTED_MODULE_65__.ConfigReport.Run());
} else if (!document.documentElement.hasAttribute("data-test-mode")) {
	console.warn("Missing test-mode dataset tag on html element");
}

function onConfigValueChanged(property, value) {
	switch (property) {
		case "flavour":
			_modules_core_browser_js__WEBPACK_IMPORTED_MODULE_6__.Browser.SetFlavour(value);
			break;
		case "theme":
			_modules_core_browser_js__WEBPACK_IMPORTED_MODULE_6__.Browser.SetColourMode(value);
			break;
		case "colour":
			document.documentElement.dataset.colour = value ?? "blue";
			break;
	}
}
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=auxilium.min.js.map