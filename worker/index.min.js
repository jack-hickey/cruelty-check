function json(e,n=200,t={}){return Response.json(e,{status:n,headers:{"Cache-Control":"s-maxage=60",...t}})}function getNormalizedText(e){return e?e.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"").replace(/[^\p{L}\p{N}\s]/gu,""):""}function text(e,n=400,t={}){return new Response(e,{status:n,headers:{"Content-Type":"text/plain",...t}})}async function parseJSON(e){try{return await e.json()}catch{throw text("Invalid JSON",400)}}async function parseForm(e){try{return await e.formData()}catch{throw text("Invalid body",400)}}async function productsHandler({env:e,params:n}){if(!n.filename)return text("File not specified");const t=await e.R2_BUCKET.get(n.filename);return t?new Response(t.body,{headers:{"Content-Type":t.httpMetadata.contentType||"application/octet-stream","Cache-Control":"public, max-age=31536000"}}):text("File not found",404)}async function productCountHandler({env:e}){const{results:n}=await e.DATABASE.prepare("SELECT COUNT(*) AS Count FROM Products WHERE Accepted=0").all(),t=n[0].Count;return json({schemaVersion:1,label:"pending products",message:t.toString(),color:t>0?"orange":"brightgreen"})}async function addBrandHandler({request:e,env:n}){const t=await parseJSON(e);return t.Name?(await n.DATABASE.prepare("\n      INSERT OR IGNORE INTO Brands \n      (Name, Parent_ID, Cruelty_Free, B_Corp, Animal_Testing, Search_Name)\n      VALUES (?, ?, ?, ?, ?, ?)\n    ").bind(t.Name,t.ParentID??null,t.CrueltyFree?1:0,t.BCorp?1:0,t.AnimalTesting?1:0,getNormalizedText(t.Name)).run(),text("Ok",200)):text("Invalid JSON")}async function addProductHandler({request:e,env:n}){const t=await parseForm(e),r=t.get("Name"),a=t.get("BrandID");let o=t.get("Image");if(!(r&&a&&o&&o.type.startsWith("image/")))return text("Invalid body",400);const s=`${crypto.randomUUID()}.${o.name.split(".").pop()}`;return await n.R2_BUCKET.put(s,o.stream()),await n.DATABASE.prepare("INSERT INTO Products (Name, Brand_ID, Is_Vegan, Image, Fair_Trade, Search_Name) VALUES (?, ?, ?, ?, ?, ?)").bind(r,a,"true"===t.get("Vegan")?1:0,s,"true"===t.get("Fairtrade")?1:0,getNormalizedText(r)).run(),text("Ok",200)}async function brandsHandler({request:e,env:n}){const t=await parseJSON(e);if(!t.query)return text("Missing query");const r=getNormalizedText(t.query)+"*",{results:a}=await n.DATABASE.prepare("\n      SELECT b.*, bm25(BrandsFTS) AS score\n      FROM BrandsFTS\n      JOIN Brands b ON b.ID = BrandsFTS.rowid\n      WHERE BrandsFTS MATCH ?\n      ORDER BY score ASC\n      LIMIT 50\n    ").bind(r).all();return json(a)}async function searchHandler({request:e,env:n}){const t=((await parseJSON(e)).query||"").trim();if(!t)return json([]);const r=t.split(/\s+/).map(getNormalizedText).filter(Boolean);if(0===r.length)return json([]);const a=r.map(e=>`${e}*`).join(" AND "),{results:o}=await n.DATABASE.prepare("\n    WITH RECURSIVE BrandHierarchy AS (\n      SELECT \n        b.ID, b.Name, b.Parent_ID, b.Cruelty_Free, b.Animal_Testing,\n        0 AS Level, p.ID AS Product_ID\n      FROM Products p\n      JOIN Brands b ON b.ID = p.Brand_ID\n\n      UNION ALL\n\n      SELECT \n        pb.ID, pb.Name, pb.Parent_ID, pb.Cruelty_Free, pb.Animal_Testing,\n        bh.Level + 1, bh.Product_ID\n      FROM Brands pb\n      JOIN BrandHierarchy bh ON bh.Parent_ID = pb.ID\n    ),\n    RankedProducts AS (\n      SELECT \n        Products.rowid AS Product_ID,\n        bm25(ProductsFTS) AS score\n      FROM ProductsFTS\n      JOIN Products ON Products.ID = ProductsFTS.rowid\n      WHERE ProductsFTS MATCH ?\n    )\n    SELECT \n      p.ID, p.Name, p.Image, p.Is_Vegan,\n      b.ID AS Brand_ID, b.Name AS Brand, b.Cruelty_Free, b.Animal_Testing, b.B_Corp,\n      (\n        SELECT json_group_array(\n          json_object(\n            'ID', ID,\n            'Name', Name,\n            'Cruelty_Free', Cruelty_Free,\n            'Animal_Testing', Animal_Testing,\n            'Parent_ID', Parent_ID,\n            'Level', Level\n          )\n        )\n        FROM BrandHierarchy bh\n        WHERE bh.Product_ID = p.ID\n        ORDER BY Level\n      ) AS Brand_Hierarchy,\n      rp.score\n    FROM RankedProducts rp\n    JOIN Products p ON p.ID = rp.Product_ID\n    JOIN Brands b ON b.ID = p.Brand_ID\n    WHERE p.Accepted = 1\n    ORDER BY rp.score ASC;\n  ").bind(a).all();return json(o)}async function reportHandler({request:e,env:n}){if("POST"!==e.method)return text("Method Not Allowed",405);const t=await parseJSON(e);if(!t.title||!t.description||!t.type)return text("Bad Request",400);const r=e.headers.get("user-agent")?.toLowerCase()||"",a=[{name:"Edge",regex:/edg/},{name:"Opera",regex:/(opera|opr)/},{name:"Vivaldi",regex:/vivaldi/},{name:"Brave",regex:/brave/},{name:"Chrome",regex:/chrome/,exclude:/(edg|opr|vivaldi|brave)/},{name:"Firefox",regex:/firefox/},{name:"Safari",regex:/safari/,exclude:/chrome|chromium|crios/},{name:"Samsung Internet",regex:/samsungbrowser/},{name:"Internet Explorer",regex:/msie|trident/}].find(e=>e.regex.test(r)&&(!e.exclude||!e.exclude.test(r)))?.name??"Unknown",o=/Windows NT 10\.0/.test(r)?"Windows 10/11":/Windows NT 6\.3/.test(r)?"Windows 8.1":/Windows NT 6\.2/.test(r)?"Windows 8":/Windows NT 6\.1/.test(r)?"Windows 7":/Windows Phone|IEMobile/.test(r)?"Windows Phone":/Macintosh|Mac OS X/.test(r)?"macOS":/CrOS/.test(r)?"ChromeOS":/Android/.test(r)?"Android":/iPhone|iPad|iPod/.test(r)?"iOS":/Linux/.test(r)?"Linux":"Unknown",s=`### Details\n${t.description}\n### Source\nBrowser: ${a}\nOperating System: ${o}`,d=await fetch(`https://api.github.com/repos/${n.GITHUB_REPO}/issues`,{method:"POST",headers:{Authorization:`token ${n.GITHUB_TOKEN}`,Accept:"application/vnd.github+json","User-Agent":"cloudflare-pages-form"},body:JSON.stringify({title:t.title,body:s,labels:[t.type.toLowerCase()],assignee:"jack-hickey"})});return d.ok?text("Ok",200):text(await d.text(),d.status)}const routes=[{method:"GET",path:/^\/products\/([^/]+)$/,handler:productsHandler,paramNames:["filename"]},{method:"GET",path:/^\/productcount$/,handler:productCountHandler},{method:"POST",path:/^\/addbrand$/,handler:addBrandHandler},{method:"POST",path:/^\/addproduct$/,handler:addProductHandler},{method:"POST",path:/^\/brands$/,handler:brandsHandler},{method:"POST",path:/^\/search$/,handler:searchHandler},{method:"POST",path:/^\/report$/,handler:reportHandler}];export default{async fetch(e,n,t){const r=new URL(e.url);for(const a of routes){if(a.method&&a.method!==e.method)continue;const o=r.pathname.match(a.path);if(o){const r={};return a.paramNames&&a.paramNames.forEach((e,n)=>r[e]=o[n+1]),a.handler({request:e,env:n,ctx:t,params:r})}}return text("Not found",404)}};